type: checkiO
files:
- name: mission.py
  visible: true
  text: "from typing import List, Any\n\n\n#def all_the_same(elements: List[Any])\
    \ -> bool:\ndef all_the_same(elements):\n    # your code here\n    tmp=len(elements)\n\
    \    tmp2=type(tmp)\n\n    answer = True\n    for i in range(len(elements)):\n\
    \        x = 0\n\n        while x < len(elements):\n            if i == x:\n \
    \               x = x+1\n                if x >= len(elements):\n            \
    \        break\n            p = elements[x]\n            r = elements[i]\n   \
    \         if elements[x] != elements[i]:\n                answer = False\n   \
    \             break\n            x=x+1\n\n    return answer\n\n\nif __name__ ==\
    \ '__main__':\n    print(\"Example:\")\n    print(all_the_same([1, 1, 1]))\n \
    \   \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n\
    \    assert all_the_same([1, 1, 1]) == True\n    assert all_the_same([1, 2, 1])\
    \ == False\n    assert all_the_same(['a', 'a', 'a']) == True\n    assert all_the_same([])\
    \ == True\n    assert all_the_same([1]) == True\n    print(\"Coding complete?\
    \ Click 'Check' to earn cool rewards!\")\n"
  learner_created: false
status: Solved
code: "from typing import List, Any\n\n\n#def all_the_same(elements: List[Any]) ->\
  \ bool:\ndef all_the_same(elements):\n    # your code here\n    tmp=len(elements)\n\
  \    tmp2=type(tmp)\n\n    answer = True\n    for i in range(len(elements)):\n \
  \       x = 0\n\n        while x < len(elements):\n            if i == x:\n    \
  \            x = x+1\n                if x >= len(elements):\n                 \
  \   break\n            p = elements[x]\n            r = elements[i]\n          \
  \  if elements[x] != elements[i]:\n                answer = False\n            \
  \    break\n            x=x+1\n\n    return answer\n\n\nif __name__ == '__main__':\n\
  \    print(\"Example:\")\n    print(all_the_same([1, 1, 1]))\n    \n    # These\
  \ \"asserts\" are used for self-checking and not for an auto-testing\n    assert\
  \ all_the_same([1, 1, 1]) == True\n    assert all_the_same([1, 2, 1]) == False\n\
  \    assert all_the_same(['a', 'a', 'a']) == True\n    assert all_the_same([]) ==\
  \ True\n    assert all_the_same([1]) == True\n    print(\"Coding complete? Click\
  \ 'Check' to earn cool rewards!\")\n"
seconds_from_change: 22346654
