<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="14" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <CheckiOCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="CheckiO is a game where you code in Python or JavaScript.&#10;Progress in the game by solving code challenges and compete for the most elegant and creative solutions.&#10;&lt;a href=&quot;http://www.checkio.org/&quot;&gt;http://www.checkio.org/&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="fromZip" value="false" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="Python 3.x" />
          <option name="languageCode" value="en" />
          <option name="name" value="Py CheckiO" />
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="updateDate" value="0" />
          <option name="items">
            <list>
              <CheckiOStation>
                <option name="customPresentableName" />
                <option name="id" value="1" />
                <option name="index" value="1" />
                <option name="name" value="Home" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CheckiOMission>
                      <option name="code" value="import re&#10;def checkio(data):&#10;    #print(data)&#10;    pattern = &quot;^.*(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$&quot;&#10;    if re.match(pattern, data) \&#10;            and 9 &lt; len(data) :&#10;        x=True&#10;    else:&#10;        x=False&#10;    #print(x)&#10;    return x&#10;&#10;#Some hintsr&#10;#Just check all conditions&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert (checkio('A1213pokl') == False),&quot;1st example&quot;&#10;    assert (checkio('bAse730onE4') == True),&quot;2nd example&quot;&#10;    assert (checkio('asasasasasasasaas') == False),&quot;3rd example&quot;&#10;    assert (checkio('QWERTYqwerty') == False),&quot;4th example&quot;&#10;    assert (checkio('123456123456') == False),&quot;5th example&quot;&#10;    assert (checkio('QwErTy911poqqqq') == True),&quot;6th example&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; src=&quot;https://static.checkio.org/media/task/media/bbf378a0bdb1406599f44f1de07b07e6/house_password_v1_400.png&quot; style=&quot;max-height: 400px; float: left&quot;&gt;&#10;&#10;&lt;p&gt;&#10;    Stephan and Sophia forget about security and use simple passwords for everything.&#10;    Help Nikola develop a password security check module.&#10;    The password will be considered strong enough if its length is greater than or equal to 10 symbols,&#10;    it has at least one digit, as well as containing one uppercase letter and one lowercase letter in it.&#10;    The password contains only ASCII latin letters or digits.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Input: &lt;/strong&gt;A password as a string.&lt;/p&gt;&#10;&lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt; Is the password safe or not as a boolean or any data type that can be&#10;    converted and processed as a boolean. In the results you will see the converted results.&lt;/p&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;&lt;strong&gt;Example:&lt;/strong&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;checkio('A1213pokl') == False&#10;checkio('bAse730onE') == True&#10;checkio('asasasasasasasaas') == False&#10;checkio('QWERTYqwerty') == False&#10;checkio('123456123456') == False&#10;checkio('QwErTy911poqqqq') == True&#10;&lt;/pre&gt;&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;br&gt;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    If you are worried about the security of your app or service, you can check your users' passwords for complexity.&#10;    You can use these skills to require that your users passwords meet more conditions (punctuations or unicode).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Precondition&lt;/strong&gt;:&lt;br&gt;&#10;    re.match(&quot;[a-zA-Z0-9]+&quot;, password)&lt;br&gt;&#10;    0 &amp;lt; len(password) &amp;le; 64&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="85" />
                      <option name="index" value="1" />
                      <option name="name" value="House Password" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="1319197" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="import re&#10;def checkio(data):&#10;    #print(data)&#10;    pattern = &quot;^.*(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$&quot;&#10;    if re.match(pattern, data) \&#10;            and 9 &lt; len(data) :&#10;        x=True&#10;    else:&#10;        x=False&#10;    #print(x)&#10;    return x&#10;&#10;#Some hintsr&#10;#Just check all conditions&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert (checkio('A1213pokl') == False),&quot;1st example&quot;&#10;    assert (checkio('bAse730onE4') == True),&quot;2nd example&quot;&#10;    assert (checkio('asasasasasasasaas') == False),&quot;3rd example&quot;&#10;    assert (checkio('QWERTYqwerty') == False),&quot;4th example&quot;&#10;    assert (checkio('123456123456') == False),&quot;5th example&quot;&#10;    assert (checkio('QwErTy911poqqqq') == True),&quot;6th example&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="#Your optional code here&#10;#You can import some modules or create additional functions&#10;&#10;&#10;def checkio(x):&#10;    data=[]&#10;    found=False&#10;    if 0 &lt; len(x) &lt; 1000:&#10;        for i in range (len(x)):&#10;&#10;            for j in range (len(x)):&#10;                if (i!=j):&#10;                    if x[i] == x[j]:&#10;                        found=True&#10;            if (found):&#10;                data.append(x[i])&#10;                found=False&#10;##        print(data)&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    return data&#10;&#10;#Some hints&#10;#You can use list.count(element) method for counting.&#10;#Create new list with non-unique elements&#10;#Loop over original list&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert list(checkio([1, 2, 3, 1, 3])) == [1, 3, 1, 3], &quot;1st example&quot;&#10;    assert list(checkio([1, 2, 3, 4, 5])) == [], &quot;2nd example&quot;&#10;    assert list(checkio([5, 5, 5, 5, 5])) == [5, 5, 5, 5, 5], &quot;3rd example&quot;&#10;    assert list(checkio([10, 9, 10, 10, 9, 8])) == [10, 9, 10, 10, 9], &quot;4th example&quot;&#10;    print(&quot;It is all good. Let's check it now&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;story&quot;&gt;&#10;    &lt;div style=&quot;text-align: center&quot;&gt;&#10;        &lt;img src=&quot;https://static.checkio.org/media/task/media/115c9e71decd4329a8df694808fa74d0/robots.png&quot; style=&quot;max-height: 350px&quot;&gt;&#10;    &lt;/div&gt;&#10;    &lt;p&gt;&#10;        If you have 50 different plug types, appliances wouldn't be available and would be very&#10;        expensive. But once an electric outlet becomes standardized, many companies can design&#10;        appliances, and competition ensues, creating variety and better prices for consumers.&#10;        &lt;br&gt;&#10;        -- Bill Gates&#10;&#10;    &lt;/p&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    You are given a non-empty list of integers (X).&#10;    For this task, you should return a list consisting of only the non-unique elements in this list.&#10;    To do so you will need to remove all unique elements (elements which are contained in a given&#10;    list only once).&#10;    When solving this task, do not change the order of the list.&#10;    Example: [1, 2, 3, 1, 3] 1 and 3 non-unique elements and result will be [1, 3, 1, 3].&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img title=&quot;non-unique-elements&quot;&#10;         src=&quot;https://static.checkio.org/media/task/media/115c9e71decd4329a8df694808fa74d0/non-unique-elements.png&quot;&#10;         alt=&quot;non-unique-elements&quot;&#10;         style=&quot;max-height: 160px&quot;/&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Input: &lt;/strong&gt;A list of integers.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt;An iterable of integers.&lt;/p&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio([1, 2, 3, 1, 3]) == [1, 3, 1, 3]&#10;checkio([1, 2, 3, 4, 5]) == []&#10;checkio([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]&#10;checkio([10, 9, 10, 10, 9, 8]) == [10, 9, 10, 10, 9]&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&lt;br&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;How it is used:&lt;/strong&gt;&#10;    This mission will help you to understand how to manipulate arrays,&#10;    something that is the basis for solving more complex tasks.&#10;    The concept can be easily generalized for real world tasks.&#10;    For example: if you need to clarify statistics by removing low frequency elements (noise).&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You can find out more about Python arrays in &lt;a href=&quot;https://py.checkio.org/blog/arrays-for-python/&quot;&gt;one of our articles featuring lists, tuples, array.array and numpy.array&lt;/a&gt;. &#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt;&lt;br&gt;&#10;    0 &amp;lt; len(data) &amp;lt; 1000&lt;br&gt;&#10;&lt;/p&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="179" />
                      <option name="index" value="2" />
                      <option name="name" value="Non-unique Elements" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="1253247" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="#Your optional code here&#10;#You can import some modules or create additional functions&#10;&#10;&#10;def checkio(x):&#10;    data=[]&#10;    found=False&#10;    if 0 &lt; len(x) &lt; 1000:&#10;        for i in range (len(x)):&#10;&#10;            for j in range (len(x)):&#10;                if (i!=j):&#10;                    if x[i] == x[j]:&#10;                        found=True&#10;            if (found):&#10;                data.append(x[i])&#10;                found=False&#10;##        print(data)&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    return data&#10;&#10;#Some hints&#10;#You can use list.count(element) method for counting.&#10;#Create new list with non-unique elements&#10;#Loop over original list&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert list(checkio([1, 2, 3, 1, 3])) == [1, 3, 1, 3], &quot;1st example&quot;&#10;    assert list(checkio([1, 2, 3, 4, 5])) == [], &quot;2nd example&quot;&#10;    assert list(checkio([5, 5, 5, 5, 5])) == [5, 5, 5, 5, 5], &quot;3rd example&quot;&#10;    assert list(checkio([10, 9, 10, 10, 9, 8])) == [10, 9, 10, 10, 9], &quot;4th example&quot;&#10;    print(&quot;It is all good. Let's check it now&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="from itertools import groupby&#10;##import sys #sys not allowed on checkio&#10;from statistics import mode, StatisticsError&#10;from collections import Counter&#10;&#10;def checkio(texten):&#10;&#10;    myList=&quot;&quot;&#10;    data=&quot;&quot;&#10;    text=texten.lower()&#10;    text=''.join(sorted(text))&#10;    for c in text:&#10;      if 122 &gt;= ord(c) &gt;= 97:&#10;        myList=myList+c&#10;&#10;&#10;    for x, y in groupby(myList):&#10;       if sum(1 for _ in y) &gt; 1:&#10;##         print(x)&#10;         try:&#10;             data=mode(myList)&#10;         except StatisticsError as e:&#10;##             print(&quot;Oops!&quot;,sys.exc_info()[0],&quot;occured.&quot;)&#10;##             print(e)&#10;             type(myList)&#10;             count = Counter(myList)&#10;##             print(count)&#10;             mostCommonChar=count.most_common()&#10;             mc = str(mostCommonChar[0]).strip('()')&#10;             data=mc[1]&#10;##             data=myList[0]&#10;         break&#10;&#10;&#10;    if not data :&#10;        try:&#10;            data=myList[0]&#10;        except IndexError:&#10;            data=&quot;&quot;&#10;##    print(data)&#10;    return data&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(checkio(&quot;HeLlo World!&quot;))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio(&quot;Hello World!&quot;) == &quot;l&quot;, &quot;Hello test&quot;&#10;    assert checkio(&quot;How do you do?&quot;) == &quot;o&quot;, &quot;O is most wanted&quot;&#10;    assert checkio(&quot;One&quot;) == &quot;e&quot;, &quot;All letter only once.&quot;&#10;    assert checkio(&quot;Oops!&quot;) == &quot;o&quot;, &quot;Don't forget about lower case.&quot;&#10;    assert checkio(&quot;AAaooo!!!!&quot;) == &quot;a&quot;, &quot;Only letters.&quot;&#10;    assert checkio(&quot;abe&quot;) == &quot;a&quot;, &quot;The First.&quot;&#10;    assert checkio(&quot;Z&quot;) == &quot;z&quot;, &quot;Try empty.&quot;&#10;    assert checkio(&quot;&quot;) == &quot;&quot;, &quot;Try empty.&quot;&#10;    assert checkio(&quot;Lorem ipsum dolor sit amet&quot;) == &quot;m&quot;, &quot;test #1 from checkio&quot;&#10;    print(&quot;Start the long test&quot;)&#10;    assert checkio(&quot;a&quot; * 9000 + &quot;b&quot; * 1000) == &quot;a&quot;, &quot;Long.&quot;&#10;    print(&quot;The local tests are done.&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/0a271e6be5594c78919b29d4c0e58145/title.png&quot; style=&quot;max-height: 350px&quot;&gt;&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    You are given a text, which contains different english letters and punctuation symbols.&#10;    You should find the most frequent letter in the text. The letter returned must be in lower case.&lt;br&gt;&#10;    While checking for the most wanted letter, casing does not matter, so for the purpose of your search,&#10;    &quot;A&quot;&amp;nbsp;==&amp;nbsp;&quot;a&quot;.&#10;    Make sure you do not count punctuation symbols, digits and whitespaces, only letters.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    If you have &lt;strong&gt;two or more letters with the same frequency&lt;/strong&gt;,&#10;    then return the letter which comes first in the latin alphabet.&#10;    For example -- &quot;one&quot; contains &quot;o&quot;, &quot;n&quot;, &quot;e&quot; only once for each, thus we choose &quot;e&quot;.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A text for analysis as a string.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The most frequent letter in lower case as a string.&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio(&quot;Hello World!&quot;) == &quot;l&quot;&#10;checkio(&quot;How do you do?&quot;) == &quot;o&quot;&#10;checkio(&quot;One&quot;) == &quot;e&quot;&#10;checkio(&quot;Oops!&quot;) == &quot;o&quot;&#10;checkio(&quot;AAaooo!!!!&quot;) == &quot;a&quot;&#10;checkio(&quot;abe&quot;) == &quot;a&quot;&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    For most decryption tasks you need to know the frequency of occurrence for various letters in a section of text.&#10;    For example: we can easily crack a simple addition or substitution cipher if we know the frequency in which letters appear.&#10;    This is interesting stuff for language experts!&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&lt;strong&gt;Precondition&lt;/strong&gt;:&lt;br&gt;&#10;    A text contains only ASCII symbols.&lt;br&gt;&#10;    0 &amp;lt; len(text) &amp;le; 10&lt;sup&gt;5&lt;/sup&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;!--&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How to use TryIt: &lt;/strong&gt;&lt;br&gt;&#10;    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/yJUA5qN898E&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&#10;&lt;/p&gt;&#10;--&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="218" />
                      <option name="index" value="3" />
                      <option name="name" value="The Most Wanted Letter" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="1222186" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="from itertools import groupby&#10;##import sys #sys not allowed on checkio&#10;from statistics import mode, StatisticsError&#10;from collections import Counter&#10;&#10;def checkio(texten):&#10;&#10;    myList=&quot;&quot;&#10;    data=&quot;&quot;&#10;    text=texten.lower()&#10;    text=''.join(sorted(text))&#10;    for c in text:&#10;      if 122 &gt;= ord(c) &gt;= 97:&#10;        myList=myList+c&#10;&#10;&#10;    for x, y in groupby(myList):&#10;       if sum(1 for _ in y) &gt; 1:&#10;##         print(x)&#10;         try:&#10;             data=mode(myList)&#10;         except StatisticsError as e:&#10;##             print(&quot;Oops!&quot;,sys.exc_info()[0],&quot;occured.&quot;)&#10;##             print(e)&#10;             type(myList)&#10;             count = Counter(myList)&#10;##             print(count)&#10;             mostCommonChar=count.most_common()&#10;             mc = str(mostCommonChar[0]).strip('()')&#10;             data=mc[1]&#10;##             data=myList[0]&#10;         break&#10;&#10;&#10;    if not data :&#10;        try:&#10;            data=myList[0]&#10;        except IndexError:&#10;            data=&quot;&quot;&#10;##    print(data)&#10;    return data&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(checkio(&quot;HeLlo World!&quot;))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio(&quot;Hello World!&quot;) == &quot;l&quot;, &quot;Hello test&quot;&#10;    assert checkio(&quot;How do you do?&quot;) == &quot;o&quot;, &quot;O is most wanted&quot;&#10;    assert checkio(&quot;One&quot;) == &quot;e&quot;, &quot;All letter only once.&quot;&#10;    assert checkio(&quot;Oops!&quot;) == &quot;o&quot;, &quot;Don't forget about lower case.&quot;&#10;    assert checkio(&quot;AAaooo!!!!&quot;) == &quot;a&quot;, &quot;Only letters.&quot;&#10;    assert checkio(&quot;abe&quot;) == &quot;a&quot;, &quot;The First.&quot;&#10;    assert checkio(&quot;Z&quot;) == &quot;z&quot;, &quot;Try empty.&quot;&#10;    assert checkio(&quot;&quot;) == &quot;&quot;, &quot;Try empty.&quot;&#10;    assert checkio(&quot;Lorem ipsum dolor sit amet&quot;) == &quot;m&quot;, &quot;test #1 from checkio&quot;&#10;    print(&quot;Start the long test&quot;)&#10;    assert checkio(&quot;a&quot; * 9000 + &quot;b&quot; * 1000) == &quot;a&quot;, &quot;Long.&quot;&#10;    print(&quot;The local tests are done.&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def checkio(game_result):&#10;    answer=&quot;&quot;&#10;    clean=str(game_result).replace(&quot;'&quot;,&quot;&quot;).replace(&quot;,&quot;,&quot;&quot;).replace(&quot; &quot;,&quot;&quot;).replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;)&#10;&#10;# ------ X ------&#10;    bintal=clean.replace(&quot;O&quot;,&quot;0&quot;).replace(&quot;.&quot;,&quot;0&quot;).replace(&quot;X&quot;,&quot;1&quot;)&#10;    c=int(bintal, base=2)&#10;    if kontroll(c):&#10;        answer=&quot;X&quot;&#10;&#10;# ------ O ------&#10;    bintal=clean.replace(&quot;O&quot;,&quot;1&quot;).replace(&quot;.&quot;,&quot;0&quot;).replace(&quot;X&quot;,&quot;0&quot;)&#10;    c=int(bintal, base=2)&#10;    if kontroll(c):&#10;        answer=&quot;O&quot;&#10;&#10;# ------ D ------&#10;    if answer==&quot;&quot;:&#10;        answer=&quot;D&quot;&#10;&#10;    return answer&#10;&#10;def kontroll(check_list):&#10;    answer=False&#10;    result=[0b100100100,0b010010010,0b001001001,0b111000000,0b000111000,0b000000111,0b100010001,0b001010100]&#10;&#10;    for i in result:&#10;        if check_list &amp; i in result:&#10;            answer=True&#10;&#10;    return answer&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(checkio([&quot;X.O&quot;,&#10;                   &quot;XX.&quot;,&#10;                   &quot;XOO&quot;]))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert kontroll(0b100100100) == 1, &quot;binärkoll&quot;&#10;&#10;    assert checkio([&#10;        &quot;X.O&quot;,&#10;        &quot;XX.&quot;,&#10;        &quot;XOO&quot;]) == &quot;X&quot;, &quot;Xs wins&quot;&#10;    assert checkio([&#10;        &quot;OO.&quot;,&#10;        &quot;XOX&quot;,&#10;        &quot;XOX&quot;]) == &quot;O&quot;, &quot;Os wins&quot;&#10;    assert checkio([&#10;        &quot;OOX&quot;,&#10;        &quot;XXO&quot;,&#10;        &quot;OXX&quot;]) == &quot;D&quot;, &quot;Draw&quot;&#10;    assert checkio([&#10;        &quot;O.X&quot;,&#10;        &quot;XX.&quot;,&#10;        &quot;XOO&quot;]) == &quot;X&quot;, &quot;Xs wins again&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div style=&quot;text-align: center&quot;&gt;&#10;        &lt;img src=&quot;https://static.checkio.org/media/task/media/4abe068a7ce44b3a86828a8e17cad1b4/title.png&quot; style=&quot;max-height: 530px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    Tic-Tac-Toe, sometimes also known as Xs and Os, is a game for two players&#10;    (X and O) who take turns marking the spaces in a 3×3 grid.&#10;    The player who succeeds in placing three respective marks in a horizontal, vertical, or diagonal rows (NW-SE and&#10;    NE-SW) wins the game.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    But we will not be playing this game. You will be the referee for this games results. You are given a result of a&#10;    game and you must determine if the game ends in a win or a draw as well as who will be the winner. Make sure to&#10;    return &quot;X&quot;&#10;    if the X-player wins and &quot;O&quot; if the O-player wins. If the game is a draw, return &quot;D&quot;.&#10;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img title=&quot;x-o-referee&quot; src=&quot;https://static.checkio.org/media/task/media/4abe068a7ce44b3a86828a8e17cad1b4/x-o-referee.png&quot; alt=&quot;x-o-referee&quot; style=&quot;max-height: 325px&quot;/&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    A game's result is presented as a list of strings, where &quot;X&quot; and &quot;O&quot; are players' marks and &quot;.&quot; is the empty cell.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A game result as a list of strings (unicode).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; &quot;X&quot;, &quot;O&quot; or &quot;D&quot; as a string.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio([&#10;    &quot;X.O&quot;,&#10;    &quot;XX.&quot;,&#10;    &quot;XOO&quot;]) == &quot;X&quot;&#10;checkio([&#10;    &quot;OO.&quot;,&#10;    &quot;XOX&quot;,&#10;    &quot;XOX&quot;]) == &quot;O&quot;&#10;checkio([&#10;    &quot;OOX&quot;,&#10;    &quot;XXO&quot;,&#10;    &quot;OXX&quot;]) == &quot;D&quot;&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    The concepts in this task will help you when iterating data types.&#10;    They can  also be used in game algorithms, allowing you to know how to check results.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;!--&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How to use TryIt: &lt;/strong&gt;&lt;br&gt;&#10;    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/fUFgb_LU2z4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&#10;&lt;/p&gt;&#10;--&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt;&lt;br&gt;&#10;    There is either one winner or a draw.&lt;br&gt;&#10;    len(game_result) == 3&lt;br&gt;&#10;    all(len(row) == 3 for row in game_result)&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="219" />
                      <option name="index" value="4" />
                      <option name="name" value="Xs and Os Referee" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="790674" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(game_result):&#10;    answer=&quot;&quot;&#10;    clean=str(game_result).replace(&quot;'&quot;,&quot;&quot;).replace(&quot;,&quot;,&quot;&quot;).replace(&quot; &quot;,&quot;&quot;).replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;)&#10;&#10;# ------ X ------&#10;    bintal=clean.replace(&quot;O&quot;,&quot;0&quot;).replace(&quot;.&quot;,&quot;0&quot;).replace(&quot;X&quot;,&quot;1&quot;)&#10;    c=int(bintal, base=2)&#10;    if kontroll(c):&#10;        answer=&quot;X&quot;&#10;&#10;# ------ O ------&#10;    bintal=clean.replace(&quot;O&quot;,&quot;1&quot;).replace(&quot;.&quot;,&quot;0&quot;).replace(&quot;X&quot;,&quot;0&quot;)&#10;    c=int(bintal, base=2)&#10;    if kontroll(c):&#10;        answer=&quot;O&quot;&#10;&#10;# ------ D ------&#10;    if answer==&quot;&quot;:&#10;        answer=&quot;D&quot;&#10;&#10;    return answer&#10;&#10;def kontroll(check_list):&#10;    answer=False&#10;    result=[0b100100100,0b010010010,0b001001001,0b111000000,0b000111000,0b000000111,0b100010001,0b001010100]&#10;&#10;    for i in result:&#10;        if check_list &amp; i in result:&#10;            answer=True&#10;&#10;    return answer&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(checkio([&quot;X.O&quot;,&#10;                   &quot;XX.&quot;,&#10;                   &quot;XOO&quot;]))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert kontroll(0b100100100) == 1, &quot;binärkoll&quot;&#10;&#10;    assert checkio([&#10;        &quot;X.O&quot;,&#10;        &quot;XX.&quot;,&#10;        &quot;XOO&quot;]) == &quot;X&quot;, &quot;Xs wins&quot;&#10;    assert checkio([&#10;        &quot;OO.&quot;,&#10;        &quot;XOX&quot;,&#10;        &quot;XOX&quot;]) == &quot;O&quot;, &quot;Os wins&quot;&#10;    assert checkio([&#10;        &quot;OOX&quot;,&#10;        &quot;XXO&quot;,&#10;        &quot;OXX&quot;]) == &quot;D&quot;, &quot;Draw&quot;&#10;    assert checkio([&#10;        &quot;O.X&quot;,&#10;        &quot;XX.&quot;,&#10;        &quot;XOO&quot;]) == &quot;X&quot;, &quot;Xs wins again&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="&#10;&#10;def flat_list(array):&#10;    wrklist=[]&#10;&#10;&#10;    def convert(element):&#10;        for j in element:&#10;            if type(j) == list:&#10;                convert(j)&#10;&#10;            else:&#10;                wrklist.append(j)&#10;&#10;        return&#10;&#10;&#10;    for i in array:&#10;        if type(i) == list:&#10;            convert(i)&#10;            # for j in i:&#10;            #     wrklist.append(j)&#10;        else:&#10;            wrklist.append(i)&#10;&#10;&#10;&#10;&#10;    return wrklist&#10;&#10;&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    assert flat_list([1, 2, 3]) == [1, 2, 3], &quot;First&quot;&#10;    assert flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4], &quot;Second&quot;&#10;    assert flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7], &quot;Third&quot;&#10;    assert flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1], &quot;Four&quot;&#10;    print('Done! Check it')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; src=&quot;https://static.checkio.org/media/task/media/ef2a9e6360bd4ec7806b2451d7d6a742/title.png&quot; style=&quot;float:left;max-height: 400px&quot;&gt;&#10;&lt;p&gt;&#10;    Nicola likes to categorize all sorts of things.&#10;    He categorized a series of numbers and as the result of his efforts,&#10;    a simple sequence of numbers became a deeply-nested list.&#10;    Sophia and Stephan don't really understand his organization and need to figure out what it all means.&#10;    They need your help to understand Nikolas crazy list.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    There is a list which contains integers or&#10;    other nested lists which may contain yet more lists and integers which then… you get the idea.&#10;    You should put all of the integer values into one flat list.&#10;    The order should be as it was in the original list with string representation from left to right.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    We need to hide this program from Nikola by keeping it small and easy to hide.&#10;    Because of this, &lt;strong&gt;your code should be shorter than 140 characters (with whitespaces)&lt;/strong&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Input data:&lt;/strong&gt; A nested list with integers.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Output data:&lt;/strong&gt; The one-dimensional list with integers.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Example:&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;flat_list([1, 2, 3]) == [1, 2, 3]&#10;flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4]&#10;flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7]&#10;flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1]&#10;&lt;/pre&gt;&#10;&#10;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This concept is useful for parsing and analyzing files with complex structures and&#10;    the task challenges your creativity in writing short code.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition: &lt;/strong&gt; 0 &amp;le; |array| &amp;le; 100&lt;br&gt;&#10;    &amp;forall; x ∈ array : -2&lt;sup&gt;32&lt;/sup&gt; &lt; x &lt; 2&lt;sup&gt;32&lt;/sup&gt; or x is a list&lt;br&gt;&#10;    depth &lt; 10&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="292" />
                      <option name="index" value="5" />
                      <option name="name" value="Flatten a List" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="726451" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="&#10;&#10;def flat_list(array):&#10;    wrklist=[]&#10;&#10;&#10;    def convert(element):&#10;        for j in element:&#10;            if type(j) == list:&#10;                convert(j)&#10;&#10;            else:&#10;                wrklist.append(j)&#10;&#10;        return&#10;&#10;&#10;    for i in array:&#10;        if type(i) == list:&#10;            convert(i)&#10;            # for j in i:&#10;            #     wrklist.append(j)&#10;        else:&#10;            wrklist.append(i)&#10;&#10;&#10;&#10;&#10;    return wrklist&#10;&#10;&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    assert flat_list([1, 2, 3]) == [1, 2, 3], &quot;First&quot;&#10;    assert flat_list([1, [2, 2, 2], 4]) == [1, 2, 2, 2, 4], &quot;Second&quot;&#10;    assert flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]]) == [2, 4, 5, 6, 6, 6, 6, 6, 7], &quot;Third&quot;&#10;    assert flat_list([-1, [1, [-2], 1], -1]) == [-1, 1, -2, 1, -1], &quot;Four&quot;&#10;    print('Done! Check it')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="VOWELS = &quot;aeiouy&quot;&#10;&#10;def translate(phrase):&#10;    answer=&quot;&quot;&#10;    i=0&#10;&#10;    while i &lt; len(phrase):&#10;        if phrase[i] != &quot; &quot;:&#10;            consonant=True&#10;            test=phrase[i]&#10;            for j in VOWELS:&#10;                test=phrase[i]&#10;                if phrase[i] == j:&#10;                    consonant=False&#10;                    break&#10;&#10;            if consonant:&#10;                answer=answer+phrase[i]&#10;                i=i+2&#10;&#10;            else:&#10;                answer=answer+phrase[i]&#10;                i=i+3&#10;        else:&#10;            answer=answer+phrase[i]&#10;            i=i+1&#10;&#10;    return answer&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(translate(&quot;hieeelalaooo&quot;))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert translate(&quot;hieeelalaooo&quot;) == &quot;hello&quot;, &quot;Hi!&quot;&#10;    assert translate(&quot;hoooowe yyyooouuu duoooiiine&quot;) == &quot;how you doin&quot;, &quot;Joey?&quot;&#10;    assert translate(&quot;aaa bo cy da eee fe&quot;) == &quot;a b c d e f&quot;, &quot;Alphabet&quot;&#10;    assert translate(&quot;sooooso aaaaaaaaa&quot;) == &quot;sos aaa&quot;, &quot;Mayday, mayday&quot;&#10;    assert translate(&quot;hoooowe yyyooouuu duoooiiine?&quot;) == &quot;how you doin?&quot;, &quot;Joey?&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; title=&quot;byrd&quot; src=&quot;https://static.checkio.org/media/task/media/bcfc3641ec4e4b458251972088a4395b/byrd03.png&quot; alt=&quot;byrd&quot; style=&quot;float: left;&quot;/&gt;&#10;&#10;&lt;p&gt;&#10;    Stephan has a friend who happens to be a little mechbird.&#10;    Recently, he was trying to teach it how to speak basic language.&#10;    Today the bird spoke its first word: &quot;hieeelalaooo&quot;.&#10;    This sounds a lot like &quot;hello&quot;, but with too many vowels.&#10;    Stephan asked Nikola for help and he helped to examine how the bird changes words.&#10;    With the information they discovered, we should help them to make a translation module.&#10;&lt;/p&gt;&#10;&#10;&lt;div&gt;&#10;    The bird converts words by two rules:&lt;br&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;- after each consonant letter the bird appends a random vowel letter (l ⇒ la or le);&lt;/li&gt;&#10;    &lt;li&gt;- after each vowel letter the bird appends two of the same letter (a ⇒ aaa);&lt;/li&gt;&#10;&lt;/ul&gt;&#10;    &lt;strong&gt;Vowels letters == &quot;aeiouy&quot;.&lt;/strong&gt;&#10;&lt;/div&gt;&#10;&lt;br&gt;&#10;&lt;p&gt;&#10;    You are given an ornithological phrase as several words which are separated by white-spaces&#10;    (each pair of words by one whitespace).&#10;    The bird does not know how to punctuate its phrases and only speaks words as letters.&#10;    All words are given in lowercase.&#10;    You should translate this phrase from the bird language to something more understandable.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A bird phrase as a string.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The translation as a string.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;translate(&quot;hieeelalaooo&quot;) == &quot;hello&quot;&#10;translate(&quot;hoooowe yyyooouuu duoooiiine&quot;) == &quot;how you doin&quot;&#10;translate(&quot;aaa bo cy da eee fe&quot;) == &quot;a b c d e f&quot;&#10;translate(&quot;sooooso aaaaaaaaa&quot;) == &quot;sos aaa&quot;&#10;    &lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This a similar cipher to those used by children when they invent their own &quot;bird&quot; language.&#10;    Now you will be ready to crack the code.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    re.match(&quot;\A([a-z]+\ ?)+(?&amp;lt;!\ )\Z&quot;, phrase)&lt;br&gt;&#10;    A phrase always has the translation.&#10;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="326" />
                      <option name="index" value="6" />
                      <option name="name" value="Bird Language" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="721102" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="VOWELS = &quot;aeiouy&quot;&#10;&#10;def translate(phrase):&#10;    answer=&quot;&quot;&#10;    i=0&#10;&#10;    while i &lt; len(phrase):&#10;        if phrase[i] != &quot; &quot;:&#10;            consonant=True&#10;            test=phrase[i]&#10;            for j in VOWELS:&#10;                test=phrase[i]&#10;                if phrase[i] == j:&#10;                    consonant=False&#10;                    break&#10;&#10;            if consonant:&#10;                answer=answer+phrase[i]&#10;                i=i+2&#10;&#10;            else:&#10;                answer=answer+phrase[i]&#10;                i=i+3&#10;        else:&#10;            answer=answer+phrase[i]&#10;            i=i+1&#10;&#10;    return answer&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(translate(&quot;hieeelalaooo&quot;))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert translate(&quot;hieeelalaooo&quot;) == &quot;hello&quot;, &quot;Hi!&quot;&#10;    assert translate(&quot;hoooowe yyyooouuu duoooiiine&quot;) == &quot;how you doin&quot;, &quot;Joey?&quot;&#10;    assert translate(&quot;aaa bo cy da eee fe&quot;) == &quot;a b c d e f&quot;, &quot;Alphabet&quot;&#10;    assert translate(&quot;sooooso aaaaaaaaa&quot;) == &quot;sos aaa&quot;, &quot;Mayday, mayday&quot;&#10;    assert translate(&quot;hoooowe yyyooouuu duoooiiine?&quot;) == &quot;how you doin?&quot;, &quot;Joey?&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def safe_pawns(pawns):&#10;    antal=0&#10;    if pawns != {&quot;&quot;} and pawns != &quot;&quot;:&#10;        rad=hitta_högsta_nr(pawns)&#10;        while rad &gt; 1 :&#10;            platser_på_rad=hitta_de_på_en_rad(pawns,rad)&#10;#            vakt_plats=vilka_pos_är_vakternas(platser_på_rad)&#10;#            vakt_plats=sortera_bort_dubletter(vakt_plats)&#10;            for varje_bonde in platser_på_rad:&#10;                bonde=[]&#10;                bonde.append(varje_bonde)&#10;                vakt_plats=vilka_pos_är_vakternas(bonde)&#10;                for vakt in vakt_plats:&#10;                    if vakt in pawns:&#10;                        antal = antal +1&#10;                        break #räcker med en vakt så bryt om en hittas.&#10;            rad = rad -1&#10;    print(str(antal) + &quot; &quot; + str(pawns))&#10;    return antal&#10;&#10;&#10;high=1&#10;&#10;def hitta_högsta_nr(positions):&#10;    high=0&#10;    #print(positions)&#10;    for position in positions:&#10;        #print(position[1])&#10;        #print(type(position[1]))&#10;        if int(position[1]) &gt; high:&#10;            high = int(position[1])&#10;    return high&#10;&#10;def översätt_bokstav_till_nr(ch):&#10;    character={&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5,&quot;f&quot;:6,&quot;g&quot;:7,&quot;h&quot;:8}&#10;    return character[ch]&#10;&#10;def översätt_nr_till_bokstav(nr):&#10;    character={1:&quot;a&quot;,2:&quot;b&quot;,3:&quot;c&quot;,4:&quot;d&quot;,5:&quot;e&quot;,6:&quot;f&quot;,7:&quot;g&quot;,8:&quot;h&quot;}&#10;    return character[nr]&#10;&#10;def leta_över_och_under(number):&#10;    #leta över och under den som har högsta nr&#10;    #för att hitta de med bokstaven bredvid, d -&gt; c &amp; e fast i nr-form.&#10;    if 1 &lt; number &lt; 8:&#10;        guard=[number-1,number+1]&#10;    if number == 1:&#10;        guard=[0,number+1]&#10;    if number == 8:&#10;        guard=[number-1,0]&#10;    return guard&#10;&#10;def vilka_pos_är_vakternas(pos):&#10;    #hitta två platser under pos (tex c5) och returnera de (b4,d4) i en lista&#10;    #inparameter är lista med platser&#10;    resultat=[]&#10;    for i in pos:&#10;        pos_ch=översätt_bokstav_till_nr(i[0])&#10;        pos_nr = int(i[1])&#10;        if pos_nr &gt; 1:&#10;            if pos_ch &gt; 1:&#10;                lo = pos_ch-1&#10;                lo_pos = översätt_nr_till_bokstav(lo)+str(pos_nr-1)&#10;                resultat.append(lo_pos)&#10;            if pos_ch &lt; 8:&#10;                hi = pos_ch+1&#10;                hi_pos = översätt_nr_till_bokstav(hi)+str(pos_nr-1)&#10;                resultat.append(hi_pos)&#10;&#10;    return resultat&#10;&#10;def hitta_de_på_en_rad(bönder,pos):&#10;    # hittar de bönder som är i en viss rad&#10;    lista=[]&#10;&#10;    for topp in bönder:&#10;        if int(topp[1]) == pos:&#10;            lista.append(topp)&#10;    return lista&#10;&#10;def sortera_bort_dubletter(bönder):&#10;    lista=[]&#10;    for bonde in bönder:&#10;        if bonde not in lista:&#10;            lista.append(bonde)&#10;    return lista&#10;&#10;def hur_många_vakterna_finns_i_bondelistan(bondelista,vakter):&#10;    antal=0&#10;    for vakt in vakter:&#10;        if vakt in bondelista:&#10;            antal=antal+1&#10;    return antal&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert vilka_pos_är_vakternas([&quot;c5&quot;]) == [&quot;b4&quot;,&quot;d4&quot;]&#10;    assert vilka_pos_är_vakternas([&quot;c5&quot;,&quot;e5&quot;]) == [&quot;b4&quot;,&quot;d4&quot;,&quot;d4&quot;,&quot;f4&quot;]&#10;    assert sortera_bort_dubletter([&quot;b4&quot;,&quot;d4&quot;,&quot;d4&quot;,&quot;f4&quot;]) == [&quot;b4&quot;,&quot;d4&quot;,&quot;f4&quot;]&#10;    assert hur_många_vakterna_finns_i_bondelistan({&quot;b4&quot;, &quot;d4&quot;, &quot;f4&quot;, &quot;c3&quot;, &quot;e3&quot;, &quot;g5&quot;, &quot;d2&quot;},[&quot;b4&quot;,&quot;d4&quot;,&quot;f4&quot;]) == 3&#10;    assert hitta_de_på_en_rad({&quot;b4&quot;, &quot;d4&quot;, &quot;f4&quot;, &quot;c3&quot;, &quot;e3&quot;, &quot;g5&quot;, &quot;d2&quot;},5) == [&quot;g5&quot;]&#10;    assert vilka_pos_är_vakternas({&quot;g5&quot;})&#10;    assert safe_pawns({&quot;b4&quot;, &quot;d4&quot;, &quot;f4&quot;, &quot;c3&quot;, &quot;e3&quot;, &quot;g5&quot;, &quot;d2&quot;}) == 6&#10;    assert safe_pawns({&quot;b4&quot;, &quot;c4&quot;, &quot;d4&quot;, &quot;e4&quot;, &quot;f4&quot;, &quot;g4&quot;, &quot;e5&quot;}) == 1&#10;    assert safe_pawns({&quot;&quot;}) == 0&#10;    assert vilka_pos_är_vakternas({&quot;a1&quot;}) == []&#10;    assert vilka_pos_är_vakternas({&quot;a8&quot;}) == [&quot;b7&quot;]&#10;    assert vilka_pos_är_vakternas({&quot;h8&quot;}) == [&quot;g7&quot;]&#10;    assert safe_pawns({&quot;b4&quot;,&quot;c4&quot;,&quot;d4&quot;,&quot;e4&quot;,&quot;f4&quot;,&quot;g4&quot;,&quot;e3&quot;}) == 2&#10;    #assert safe_pawns({&quot;a1&quot;,&quot;b2&quot;,&quot;c3&quot;,&quot;d4&quot;,&quot;e5&quot;,&quot;f6&quot;,&quot;g7&quot;,&quot;h8&quot;}) == 1&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/aea94b197081464ca1748e4562b8fbae/title.png&quot; style=&quot;max-height: 350px&quot;&gt;&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    Almost everyone in the world knows about the ancient game &lt;a href=&quot;http://en.wikipedia.org/wiki/Chess&quot;&gt;Chess&lt;/a&gt;&#10;    and has at least a basic understanding of its rules.&#10;    It has various units with a wide range of movement patterns allowing&#10;    for a huge number of possible different game positions (for example&#10;    &lt;a href=&quot;http://oeis.org/A048987&quot;&gt;Number of possible chess games at the end of the n-th plies.&lt;/a&gt;)&#10;    For this mission, we will examine the movements and behavior of chess pawns.&#10;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    Chess is a two-player strategy game played on a checkered game board laid out in eight rows&#10;    (called ranks and denoted with numbers 1 to 8) and&#10;    eight columns (called files and denoted with letters a to h) of squares.&#10;    Each square of the chessboard is identified by a unique coordinate pair&#10;    — a letter and a number (ex, &quot;a1&quot;, &quot;h8&quot;, &quot;d6&quot;).&#10;    For this mission we only need to concern ourselves with pawns.&#10;    A pawn may capture an opponent's piece on a square diagonally in front of it on an adjacent file,&#10;    by moving to that square. For white pawns the front squares are squares with greater row number &#10;    than the square they currently occupy.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    A pawn is generally a weak unit, but we have 8 of them which we can use to build a pawn defense wall.&#10;    With this strategy, one pawn defends the others.&#10;    A pawn is safe if another pawn can capture a unit on that square.&#10;    We have several white pawns on the chess board and only white pawns.&#10;    You should design your code to find how many pawns are safe.&#10;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img class=&quot;for_info_only&quot; title=&quot;pawns&quot; src=&quot;https://static.checkio.org/media/task/media/aea94b197081464ca1748e4562b8fbae/pawns.png&quot; alt=&quot;pawns&quot; style=&quot;max-height:260px&quot;/&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You are given a set of square coordinates where we have placed white pawns.&#10;    You should count how many pawns are safe.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Placed pawns coordinates as a set of strings.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The number of safe pawns as a integer.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;safe_pawns({&quot;b4&quot;, &quot;d4&quot;, &quot;f4&quot;, &quot;c3&quot;, &quot;e3&quot;, &quot;g5&quot;, &quot;d2&quot;}) == 6&#10;safe_pawns({&quot;b4&quot;, &quot;c4&quot;, &quot;d4&quot;, &quot;e4&quot;, &quot;f4&quot;, &quot;g4&quot;, &quot;e5&quot;}) == 1&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    For a game AI one of the important tasks is the ability to estimate game state.&#10;    This concept will show how you can do this on the simple chess figures positions.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&lt;br&gt;&#10;    0 &amp;lt; pawns &amp;le; 8&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="343" />
                      <option name="index" value="7" />
                      <option name="name" value="Pawn Brotherhood" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="468449" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def safe_pawns(pawns):&#10;    antal=0&#10;    if pawns != {&quot;&quot;} and pawns != &quot;&quot;:&#10;        rad=hitta_högsta_nr(pawns)&#10;        while rad &gt; 1 :&#10;            platser_på_rad=hitta_de_på_en_rad(pawns,rad)&#10;#            vakt_plats=vilka_pos_är_vakternas(platser_på_rad)&#10;#            vakt_plats=sortera_bort_dubletter(vakt_plats)&#10;            for varje_bonde in platser_på_rad:&#10;                bonde=[]&#10;                bonde.append(varje_bonde)&#10;                vakt_plats=vilka_pos_är_vakternas(bonde)&#10;                for vakt in vakt_plats:&#10;                    if vakt in pawns:&#10;                        antal = antal +1&#10;                        break #räcker med en vakt så bryt om en hittas.&#10;            rad = rad -1&#10;    print(str(antal) + &quot; &quot; + str(pawns))&#10;    return antal&#10;&#10;&#10;high=1&#10;&#10;def hitta_högsta_nr(positions):&#10;    high=0&#10;    #print(positions)&#10;    for position in positions:&#10;        #print(position[1])&#10;        #print(type(position[1]))&#10;        if int(position[1]) &gt; high:&#10;            high = int(position[1])&#10;    return high&#10;&#10;def översätt_bokstav_till_nr(ch):&#10;    character={&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5,&quot;f&quot;:6,&quot;g&quot;:7,&quot;h&quot;:8}&#10;    return character[ch]&#10;&#10;def översätt_nr_till_bokstav(nr):&#10;    character={1:&quot;a&quot;,2:&quot;b&quot;,3:&quot;c&quot;,4:&quot;d&quot;,5:&quot;e&quot;,6:&quot;f&quot;,7:&quot;g&quot;,8:&quot;h&quot;}&#10;    return character[nr]&#10;&#10;def leta_över_och_under(number):&#10;    #leta över och under den som har högsta nr&#10;    #för att hitta de med bokstaven bredvid, d -&gt; c &amp; e fast i nr-form.&#10;    if 1 &lt; number &lt; 8:&#10;        guard=[number-1,number+1]&#10;    if number == 1:&#10;        guard=[0,number+1]&#10;    if number == 8:&#10;        guard=[number-1,0]&#10;    return guard&#10;&#10;def vilka_pos_är_vakternas(pos):&#10;    #hitta två platser under pos (tex c5) och returnera de (b4,d4) i en lista&#10;    #inparameter är lista med platser&#10;    resultat=[]&#10;    for i in pos:&#10;        pos_ch=översätt_bokstav_till_nr(i[0])&#10;        pos_nr = int(i[1])&#10;        if pos_nr &gt; 1:&#10;            if pos_ch &gt; 1:&#10;                lo = pos_ch-1&#10;                lo_pos = översätt_nr_till_bokstav(lo)+str(pos_nr-1)&#10;                resultat.append(lo_pos)&#10;            if pos_ch &lt; 8:&#10;                hi = pos_ch+1&#10;                hi_pos = översätt_nr_till_bokstav(hi)+str(pos_nr-1)&#10;                resultat.append(hi_pos)&#10;&#10;    return resultat&#10;&#10;def hitta_de_på_en_rad(bönder,pos):&#10;    # hittar de bönder som är i en viss rad&#10;    lista=[]&#10;&#10;    for topp in bönder:&#10;        if int(topp[1]) == pos:&#10;            lista.append(topp)&#10;    return lista&#10;&#10;def sortera_bort_dubletter(bönder):&#10;    lista=[]&#10;    for bonde in bönder:&#10;        if bonde not in lista:&#10;            lista.append(bonde)&#10;    return lista&#10;&#10;def hur_många_vakterna_finns_i_bondelistan(bondelista,vakter):&#10;    antal=0&#10;    for vakt in vakter:&#10;        if vakt in bondelista:&#10;            antal=antal+1&#10;    return antal&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert vilka_pos_är_vakternas([&quot;c5&quot;]) == [&quot;b4&quot;,&quot;d4&quot;]&#10;    assert vilka_pos_är_vakternas([&quot;c5&quot;,&quot;e5&quot;]) == [&quot;b4&quot;,&quot;d4&quot;,&quot;d4&quot;,&quot;f4&quot;]&#10;    assert sortera_bort_dubletter([&quot;b4&quot;,&quot;d4&quot;,&quot;d4&quot;,&quot;f4&quot;]) == [&quot;b4&quot;,&quot;d4&quot;,&quot;f4&quot;]&#10;    assert hur_många_vakterna_finns_i_bondelistan({&quot;b4&quot;, &quot;d4&quot;, &quot;f4&quot;, &quot;c3&quot;, &quot;e3&quot;, &quot;g5&quot;, &quot;d2&quot;},[&quot;b4&quot;,&quot;d4&quot;,&quot;f4&quot;]) == 3&#10;    assert hitta_de_på_en_rad({&quot;b4&quot;, &quot;d4&quot;, &quot;f4&quot;, &quot;c3&quot;, &quot;e3&quot;, &quot;g5&quot;, &quot;d2&quot;},5) == [&quot;g5&quot;]&#10;    assert vilka_pos_är_vakternas({&quot;g5&quot;})&#10;    assert safe_pawns({&quot;b4&quot;, &quot;d4&quot;, &quot;f4&quot;, &quot;c3&quot;, &quot;e3&quot;, &quot;g5&quot;, &quot;d2&quot;}) == 6&#10;    assert safe_pawns({&quot;b4&quot;, &quot;c4&quot;, &quot;d4&quot;, &quot;e4&quot;, &quot;f4&quot;, &quot;g4&quot;, &quot;e5&quot;}) == 1&#10;    assert safe_pawns({&quot;&quot;}) == 0&#10;    assert vilka_pos_är_vakternas({&quot;a1&quot;}) == []&#10;    assert vilka_pos_är_vakternas({&quot;a8&quot;}) == [&quot;b7&quot;]&#10;    assert vilka_pos_är_vakternas({&quot;h8&quot;}) == [&quot;g7&quot;]&#10;    assert safe_pawns({&quot;b4&quot;,&quot;c4&quot;,&quot;d4&quot;,&quot;e4&quot;,&quot;f4&quot;,&quot;g4&quot;,&quot;e3&quot;}) == 2&#10;    #assert safe_pawns({&quot;a1&quot;,&quot;b2&quot;,&quot;c3&quot;,&quot;d4&quot;,&quot;e5&quot;,&quot;f6&quot;,&quot;g7&quot;,&quot;h8&quot;}) == 1&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def long_repeat(line):&#10;    x=0&#10;    lista=[0]&#10;    tmp=len(line)&#10;    for i in range(len(line)):&#10;        p=line[i]&#10;        if i+1 &lt; len(line):&#10;            r=line[i+1]&#10;        else:&#10;            r=&quot;§&quot;&#10;        x=x+1&#10;#        if line[i] != line[i+1]:&#10;        if line[i] != r:&#10;            lista.append(x)&#10;            x=0&#10;    lista.sort(reverse=True)&#10;    return lista[0]&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert long_repeat('sdsffffse') == 4, &quot;First&quot;&#10;    assert long_repeat('ddvvrwwwrggg') == 3, &quot;Second&quot;&#10;    assert long_repeat('abababaab') == 2, &quot;Third&quot;&#10;    assert long_repeat('abababaabccc') == 3, &quot;end case&quot;&#10;    assert long_repeat('') == 0, &quot;Empty&quot;&#10;    assert long_repeat('aa') == 2, &quot;Fourth&quot;&#10;    print('&quot;Run&quot; is good. How is &quot;Check&quot;?')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;i&gt;&lt;a href=&quot;https://py.checkio.org/forum/post/11382/4-mission-ideas-substrings/&quot;&gt;There are four substring missions&lt;/a&gt; that were born all in one day and you shouldn’t be needed more than one day to solve them. All of those mission can be simply solved by brute force, but is it always the best way to go? (you might not have access to all of those missions yet, but they are going to be available with more opened islands on the map).&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    This mission is the first one of the series. Here you should find the length of the longest substring that consists of the same letter. For example, line &quot;aaabbcaaaa&quot; contains four substrings with the same letters &quot;aaa&quot;, &quot;bb&quot;,&quot;c&quot; and &quot;aaaa&quot;. The last substring is the longest one which makes it an answer.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; String.&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Int. &#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;long_repeat('sdsffffse') == 4&#10;long_repeat('ddvvrwwwrggg') == 3&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="494" />
                      <option name="index" value="8" />
                      <option name="name" value="Long Repeat" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="442836" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def long_repeat(line):&#10;    x=0&#10;    lista=[0]&#10;    tmp=len(line)&#10;    for i in range(len(line)):&#10;        p=line[i]&#10;        if i+1 &lt; len(line):&#10;            r=line[i+1]&#10;        else:&#10;            r=&quot;§&quot;&#10;        x=x+1&#10;#        if line[i] != line[i+1]:&#10;        if line[i] != r:&#10;            lista.append(x)&#10;            x=0&#10;    lista.sort(reverse=True)&#10;    return lista[0]&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert long_repeat('sdsffffse') == 4, &quot;First&quot;&#10;    assert long_repeat('ddvvrwwwrggg') == 3, &quot;Second&quot;&#10;    assert long_repeat('abababaab') == 2, &quot;Third&quot;&#10;    assert long_repeat('abababaabccc') == 3, &quot;end case&quot;&#10;    assert long_repeat('') == 0, &quot;Empty&quot;&#10;    assert long_repeat('aa') == 2, &quot;Fourth&quot;&#10;    print('&quot;Run&quot; is good. How is &quot;Check&quot;?')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="from typing import List, Any&#10;&#10;&#10;#def all_the_same(elements: List[Any]) -&gt; bool:&#10;def all_the_same(elements):&#10;    # your code here&#10;    tmp=len(elements)&#10;    tmp2=type(tmp)&#10;&#10;    answer = True&#10;    for i in range(len(elements)):&#10;        x = 0&#10;&#10;        while x &lt; len(elements):&#10;            if i == x:&#10;                x = x+1&#10;                if x &gt;= len(elements):&#10;                    break&#10;            p = elements[x]&#10;            r = elements[i]&#10;            if elements[x] != elements[i]:&#10;                answer = False&#10;                break&#10;            x=x+1&#10;&#10;    return answer&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(all_the_same([1, 1, 1]))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert all_the_same([1, 1, 1]) == True&#10;    assert all_the_same([1, 2, 1]) == False&#10;    assert all_the_same(['a', 'a', 'a']) == True&#10;    assert all_the_same([]) == True&#10;    assert all_the_same([1]) == True&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    In this mission you should check if all elements in the given list are equal.&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; List.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Bool. &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;all_the_same([1, 1, 1]) == True&#10;all_the_same([1, 2, 1]) == False&#10;all_the_same(['a', 'a', 'a']) == True&#10;all_the_same([]) == True&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&lt;p&gt;&lt;i&gt;The idea for this mission was found on &lt;a href=&quot;https://dbader.org/&quot;&gt;Python Tricks series by Dan Bader&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&#10;&lt;!-- Here you can explain how it can be used in development and what is usage of this. --&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;all elements of the input list are hashable&lt;/i&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="520" />
                      <option name="index" value="9" />
                      <option name="name" value="All the Same" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="435050" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="from typing import List, Any&#10;&#10;&#10;#def all_the_same(elements: List[Any]) -&gt; bool:&#10;def all_the_same(elements):&#10;    # your code here&#10;    tmp=len(elements)&#10;    tmp2=type(tmp)&#10;&#10;    answer = True&#10;    for i in range(len(elements)):&#10;        x = 0&#10;&#10;        while x &lt; len(elements):&#10;            if i == x:&#10;                x = x+1&#10;                if x &gt;= len(elements):&#10;                    break&#10;            p = elements[x]&#10;            r = elements[i]&#10;            if elements[x] != elements[i]:&#10;                answer = False&#10;                break&#10;            x=x+1&#10;&#10;    return answer&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(all_the_same([1, 1, 1]))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert all_the_same([1, 1, 1]) == True&#10;    assert all_the_same([1, 2, 1]) == False&#10;    assert all_the_same(['a', 'a', 'a']) == True&#10;    assert all_the_same([]) == True&#10;    assert all_the_same([1]) == True&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def sun_angle(time):&#10;&#10;    tid  = time_till_minuter(time)&#10;    if syns_solen(tid):&#10;        time = tid_till_vinkel(tid)&#10;    else:&#10;        time = &quot;I don't see the sun!&quot;&#10;&#10;    return time&#10;&#10;&#10;&#10;&#10;def time_till_minuter(time):&#10;    time_list = time.split(&quot;:&quot;)&#10;    tid=int(time_list[0])*60+int(time_list[1])&#10;    return tid&#10;&#10;def tid_till_vinkel(tid):&#10;    # tid i minuter&#10;    # 18 * 60 = 1080&#10;    # 06 * 60 = 360&#10;    vinkel = (tid - 360)/(1080-360)*180&#10;    return float('{:.5g}'.format(vinkel))&#10;&#10;def syns_solen(tid):&#10;    if 360 &lt;= tid &lt;= 1080:&#10;        dag = True&#10;    else:&#10;        dag = False&#10;    return dag&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(sun_angle(&quot;07:00&quot;))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert time_till_minuter(&quot;06:00&quot;) == 360&#10;    assert tid_till_vinkel(720) == 90&#10;    assert tid_till_vinkel(813) == 113.25&#10;    assert sun_angle(&quot;07:00&quot;) == 15&#10;    assert sun_angle(&quot;01:23&quot;) == &quot;I don't see the sun!&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    Every true traveler must know how to do 3 things: fix the fire, find the water and extract useful information from the nature around him. Programming won't help you with the fire and water, but when it comes to the information extraction - it might be just the thing you need.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Your task is to find the angle of the sun above the horizon knowing the time of the day. Input data: the sun rises in the East at 6:00 AM, which corresponds to the angle of 0 degrees. At 12:00 PM the sun reaches its zenith, which means that the angle equals 90 degrees. 6:00 PM is the time of the sunset so the angle is 180 degrees. If the input will be the time of the night (before 6:00 AM or after 6:00 PM), your function should return - &quot;I don't see the sun!&quot;.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img  title=&quot;Sun angle&quot; src=&quot;https://static.checkio.org/media/task/media/70b4ef56a4f948218c1c218f08f77063/sun.png&quot; alt=&quot;example&quot; style=&quot;max-height: 400px&quot;&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; The time of the day.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The angle of the sun, rounded to 2 decimal places.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;&lt;p&gt;&#10;&lt;strong&gt;Example:&lt;/strong&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;sun_angle(&quot;07:00&quot;) == 15&#10;sun_angle(&quot;12:15&quot;] == 93.75&#10;sun_angle(&quot;01:23&quot;) == &quot;I don't see the sun!&quot;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Here you can explain how it can be used in development and what is usage of this. --&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    One day it can save your life, if you'll be lost far away from civilization.&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Here you can explain some constraints for input--&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p&gt;&lt;strong&gt;Precondition&lt;/strong&gt;:&lt;br&gt;&#10;    00:00 &lt;= time &lt;= 23:59&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="539" />
                      <option name="index" value="10" />
                      <option name="name" value="Sun Angle" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="431055" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def sun_angle(time):&#10;&#10;    tid  = time_till_minuter(time)&#10;    if syns_solen(tid):&#10;        time = tid_till_vinkel(tid)&#10;    else:&#10;        time = &quot;I don't see the sun!&quot;&#10;&#10;    return time&#10;&#10;&#10;&#10;&#10;def time_till_minuter(time):&#10;    time_list = time.split(&quot;:&quot;)&#10;    tid=int(time_list[0])*60+int(time_list[1])&#10;    return tid&#10;&#10;def tid_till_vinkel(tid):&#10;    # tid i minuter&#10;    # 18 * 60 = 1080&#10;    # 06 * 60 = 360&#10;    vinkel = (tid - 360)/(1080-360)*180&#10;    return float('{:.5g}'.format(vinkel))&#10;&#10;def syns_solen(tid):&#10;    if 360 &lt;= tid &lt;= 1080:&#10;        dag = True&#10;    else:&#10;        dag = False&#10;    return dag&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(sun_angle(&quot;07:00&quot;))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert time_till_minuter(&quot;06:00&quot;) == 360&#10;    assert tid_till_vinkel(720) == 90&#10;    assert tid_till_vinkel(813) == 113.25&#10;    assert sun_angle(&quot;07:00&quot;) == 15&#10;    assert sun_angle(&quot;01:23&quot;) == &quot;I don't see the sun!&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def time_converter(time):&#10;    #replace this for solution&#10;&#10;    minuter = time_till_minuter(time)&#10;    half = am_pm(minuter)&#10;    tid = minuter_till_ampm_time(minuter)&#10;    tiden = str(tid) + str(half)&#10;&#10;    return tiden&#10;&#10;&#10;&#10;&#10;def am_pm(tid):&#10;    half = &quot; a.m.&quot;&#10;    # lunch 12:00 - 23:59 -&gt; pm&#10;    #tid = int(tid)&#10;    if 720 &lt;= tid &lt;= 1439:&#10;        half = &quot; p.m.&quot;&#10;&#10;    return half&#10;&#10;def time_till_minuter(time):&#10;    tid = time.split(&quot;:&quot;)&#10;    timme = int(tid[0])*60&#10;    minut = int(tid[1])&#10;    minuter=timme+minut&#10;    return minuter&#10;&#10;def minuter_till_ampm_time(minut):&#10;    if minut &gt;= 780:&#10;        minut = minut - 720&#10;    if minut == 0:&#10;        minut = minut + 720&#10;    min = round((minut / 60 - int(minut / 60))*60)&#10;    tim = minut / 60&#10;    if minut &gt; 600:&#10;        tim = ('{0:&gt;2}'.format(int(tim)))&#10;    else:&#10;        tim = ('{0:&gt;1}'.format(int(tim)))&#10;&#10;    min = ('{0:0&gt;2}'.format(int(min)))&#10;    ampm_time = (str(tim) + &quot;:&quot; + str(min))&#10;    return ampm_time&#10;&#10;&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(time_converter('12:30'))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert minuter_till_ampm_time(720) == &quot;12:00&quot;&#10;    assert time_converter('12:30') == '12:30 p.m.'&#10;    assert time_converter('09:00') == '9:00 a.m.'&#10;    assert time_converter('13:00') == '1:00 p.m.'&#10;    assert time_converter('00:00') == '12:00 a.m.'&#10;    assert time_converter('12:00') == '12:00 p.m.'&#10;    assert time_converter('12:01') == '12:01 p.m.'&#10;    assert time_converter('18:50') == '6:50 p.m.'&#10;    assert time_converter('23:15') == '11:15 p.m.'&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    You prefer a good old 12-hour time format. But the modern world we live in would rather use the 24-hour format and you see it everywhere. Your task is to convert the time from the 24-h format into 12-h format by following the next rules:&lt;br&gt;&#10;- the output format should be 'hh:mm a.m.' (for hours before midday) or 'hh:mm p.m.' (for hours after midday)&lt;br&gt;&#10;- if hours is less than 10 - don't write a '0' before it. For example: '9:05 a.m.'&lt;br&gt;&#10;&#10;Here you can find some useful information about the &lt;a href='https://en.wikipedia.org/wiki/12-hour_clock'&gt;12-hour format&lt;/a&gt;.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img  title=&quot;Time&quot; src=&quot;https://static.checkio.org/media/task/media/d755e36637094c5384367b15852d9143/time.png&quot; alt=&quot;example&quot; style=&quot;max-height: 220px&quot;/&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Time in a 24-hour format (as a string).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Time in a 12-hour format (as a string). &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;&lt;p&gt;&#10;&lt;strong&gt;Example:&lt;/strong&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;time_converter('12:30') == '12:30 p.m.'&#10;time_converter('09:00') == '9:00 a.m.'&#10;time_converter('23:15') == '11:15 p.m.'&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Here you can explain how it can be used in development and what is usage of this. --&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    For work with the different time formats.&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Here you can explain some constraints for input--&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p&gt;&lt;strong&gt;Precondition&lt;/strong&gt;:&lt;br&gt;&#10;    '00:00' &lt;= time &lt;= '23:59'&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="546" />
                      <option name="index" value="11" />
                      <option name="name" value="Time Converter (24h to 12h)" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="359940" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def time_converter(time):&#10;    #replace this for solution&#10;&#10;    minuter = time_till_minuter(time)&#10;    half = am_pm(minuter)&#10;    tid = minuter_till_ampm_time(minuter)&#10;    tiden = str(tid) + str(half)&#10;&#10;    return tiden&#10;&#10;&#10;&#10;&#10;def am_pm(tid):&#10;    half = &quot; a.m.&quot;&#10;    # lunch 12:00 - 23:59 -&gt; pm&#10;    #tid = int(tid)&#10;    if 720 &lt;= tid &lt;= 1439:&#10;        half = &quot; p.m.&quot;&#10;&#10;    return half&#10;&#10;def time_till_minuter(time):&#10;    tid = time.split(&quot;:&quot;)&#10;    timme = int(tid[0])*60&#10;    minut = int(tid[1])&#10;    minuter=timme+minut&#10;    return minuter&#10;&#10;def minuter_till_ampm_time(minut):&#10;    if minut &gt;= 780:&#10;        minut = minut - 720&#10;    if minut == 0:&#10;        minut = minut + 720&#10;    min = round((minut / 60 - int(minut / 60))*60)&#10;    tim = minut / 60&#10;    if minut &gt; 600:&#10;        tim = ('{0:&gt;2}'.format(int(tim)))&#10;    else:&#10;        tim = ('{0:&gt;1}'.format(int(tim)))&#10;&#10;    min = ('{0:0&gt;2}'.format(int(min)))&#10;    ampm_time = (str(tim) + &quot;:&quot; + str(min))&#10;    return ampm_time&#10;&#10;&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(time_converter('12:30'))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert minuter_till_ampm_time(720) == &quot;12:00&quot;&#10;    assert time_converter('12:30') == '12:30 p.m.'&#10;    assert time_converter('09:00') == '9:00 a.m.'&#10;    assert time_converter('13:00') == '1:00 p.m.'&#10;    assert time_converter('00:00') == '12:00 a.m.'&#10;    assert time_converter('12:00') == '12:00 p.m.'&#10;    assert time_converter('12:01') == '12:01 p.m.'&#10;    assert time_converter('18:50') == '6:50 p.m.'&#10;    assert time_converter('23:15') == '11:15 p.m.'&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="class Warrior(object):&#10;    &quot;&quot;&quot;klass för att lösa spelproblem checkio&quot;&quot;&quot;&#10;    def __init__(self, health=50, attack=5):&#10;        self.health = health&#10;        self.attack = attack&#10;        if self.health &gt; 0:&#10;            self.is_alive = True&#10;        else:&#10;            self.is_alive = False&#10;&#10;    def talk(self):&#10;        print(&quot;Health = &quot; + str(self.health))&#10;        print(&quot;Attack = &quot; + str(self.attack))&#10;        print(&quot;I liv = &quot;  + str(self.is_alive))&#10;    pass&#10;&#10;class Knight(Warrior):&#10;    def __init__(self, health=50, attack=7):&#10;        self.health = health&#10;        self.attack = attack&#10;        if self.health &gt; 0:&#10;            self.is_alive = True&#10;        else:&#10;            self.is_alive = False&#10;    pass&#10;&#10;def fight(unit_1, unit_2):&#10;    success = False&#10;    while unit_1.is_alive &amp; unit_2.is_alive:&#10;        unit_2.health -= unit_1.attack&#10;        if unit_1.health &gt; 0 and unit_2.health &lt;= 0:&#10;            success = True&#10;        else:&#10;            unit_1.health -= unit_2.attack&#10;        if unit_1.health &gt; 0 and unit_2.health &lt;= 0:&#10;            success = True&#10;        if unit_2.health &lt;= 0:&#10;            unit_2.is_alive = False&#10;        if unit_1.health &lt;= 0:&#10;            unit_1.is_alive = False&#10;    return success&#10;&#10;if __name__ == '__main__':&#10;&#10;    chuck = Warrior()&#10;    bruce = Warrior()&#10;    carl = Knight()&#10;    dave = Warrior()&#10;    mark = Warrior()&#10;&#10;    assert fight(chuck, bruce) == True&#10;    assert fight(dave, carl) == False&#10;    assert chuck.is_alive == True&#10;    assert bruce.is_alive == False&#10;    assert carl.is_alive == True&#10;    assert dave.is_alive == False&#10;    assert fight(carl, mark) == False&#10;    assert carl.is_alive == False&#10;&#10;    print(&quot;Coding complete? Let's try tests!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;story for_info_only&quot;&gt;&#10;One day, on a typical spring afternoon, Sir Ronald has been looking around his land, riding a horse. Nothing foretold troubles, when suddenly Sir Ronald heard a scream for help, coming from somewhere nearby: &lt;br&gt;&#10;- &quot;Help! Help!&quot; - shouted a piercing young girl's voice. &lt;br&gt;&#10;As a true knight, Sir Ronald couldn’t stay away and went to the lady’s rescue. Rushing in the direction from which the cry came, he saw a carriage. The girl peered out the window hoping to see someone who could help her. &lt;br&gt;&#10;- &quot;Stop!&quot;- ordered Sir Ronald to the coachman. - &quot;By what right are you on my land?&quot; &lt;br&gt;&#10;The coachman didn’t get a chance to open his mouth, as his master came out of the carriage. &lt;br&gt;&#10;- &quot;My respects, noble sir. I had no idea that this land is yours. My bride and I were just going to my estate, not wanting to give anyone any trouble. &quot;&lt;br&gt;&#10;- &quot;A flat-out lie! I'm not his bride!&quot; - the girl exclaimed from the window. &lt;br&gt;&#10;- &quot;Explain yourself, Sir. What does that mean?&quot;,- said Sir Ronald. &lt;br&gt;&#10;- &quot;Of course. The king of a neighboring country has promised his daughter and half his kingdom to the one who’ll save her from the outlaws who took her. I’ve defeated those bastards and now I’m taking the princess to her father. &quot;&lt;br&gt;&#10;- &quot;It's not true! They were in on it together They’ve kidnapped me on his order! I saw how he paid them a bag of gold!&quot; - The princess didn’t stop taking for a second, trying to quickly describe the situation to the miraculously appeared savior. &lt;br&gt;&#10;- &quot;Such behavior is unworthy of a knight! Prepare to die!&quot;,- exclaimed Sir Ronald, drawing his sword.&#10;- &quot;Ha-ha-ha, simple-hearted nobleman! We’ll see about that...&quot;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;I'm sure that many of you have some experience with computer games. But have you ever wanted to change the game so that the characters or a game world would be more consistent with your idea of the perfect game? Probably, yes.&lt;br&gt;&#10;In this mission (and in several subsequent ones, related to it) you’ll have a chance &quot;to sit in the developer's chair&quot; and create the logic of a simple game about battles.&lt;br&gt;&#10;Let's start with the simple task - one-on-one duel. You need to create the class &lt;strong&gt;Warrior&lt;/strong&gt;, the instances of which will have 2 parameters - health (equal to 50 points) and attack (equal to 5 points), and 1 property - is_alive, which can be True (if warrior's health is &gt; 0) or False (in the other case). In addition you have to create the second unit type - Knight, which should be the subclass of the Warrior but have the increased attack - 7. Also you have to create a function &lt;strong&gt;fight()&lt;/strong&gt;, which will initiate the duel between 2 warriors and define the strongest of them. The duel occurs according to the following principle:&lt;br&gt;&#10;every turn one of the warriors will hit another one and the last will lose his health in the same value as the attack of the first warrior. After that, the second warrior will do the same to the first one.&lt;br&gt;&#10;If in the end of the turn the first warrior has &gt; 0 health and the other one doesn’t, the function should return &lt;strong&gt;True&lt;/strong&gt;, in the other case it should return &lt;strong&gt;False&lt;/strong&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot; style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img  title=&quot;fight&quot; src=&quot;https://static.checkio.org/media/task/media/4e0dd625813446a595c6f45e5033d355/warrior.png&quot; alt=&quot;example&quot; style=&quot;max-height: 600px&quot;/&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;&lt;p&gt;&#10;&lt;strong&gt;Example&lt;/strong&gt;:&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;chuck = Warrior()&#10;bruce = Warrior()&#10;carl = Knight()&#10;dave = Warrior()&#10;&#10;fight(chuck, bruce) == True&#10;fight(dave, carl) == False&#10;chuck.is_alive == True&#10;bruce.is_alive == False&#10;carl.is_alive == True&#10;dave.is_alive == False&#10;&lt;/pre&gt;&#10;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt;The warriors.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt;The result of the duel (True or False).&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    For computer games development.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    2 types of units&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="566" />
                      <option name="index" value="12" />
                      <option name="name" value="The Warriors" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="278380" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="class Warrior(object):&#10;    &quot;&quot;&quot;klass för att lösa spelproblem checkio&quot;&quot;&quot;&#10;    def __init__(self, health=50, attack=5):&#10;##        self.health = 50&#10;##        self.attack = attack&#10;        self.health = health&#10;        self.attack = attack&#10;        if self.health &gt; 0:&#10;            self.is_alive = True&#10;        else:&#10;            self.is_alive = False&#10;&#10;    def talk(self):&#10;        print(&quot;Health = &quot; + str(self.health))&#10;        print(&quot;Attack = &quot; + str(self.attack))&#10;        print(&quot;I liv = &quot;  + str(self.is_alive))&#10;&#10;    pass&#10;&#10;class Knight(Warrior):&#10;    def __init__(self, health=50, attack=7):&#10;        self.health = health&#10;        self.attack = attack&#10;        if self.health &gt; 0:&#10;            self.is_alive = True&#10;        else:&#10;            self.is_alive = False&#10;&#10;    pass&#10;&#10;def fight(unit_1, unit_2):&#10;&#10;    def turn(unit_1, unit_2):&#10;        success = False&#10;        unit_2.health -= unit_1.attack&#10;        p1 = unit_1.health&#10;        p2 = unit_2.health&#10;&#10;        if unit_1.health &gt; 0 and unit_2.health &lt;= 0:&#10;            success = True&#10;        else:&#10;&#10;            unit_1.health -= unit_2.attack&#10;            p1 = unit_1.health&#10;            p2 = unit_2.health&#10;&#10;        if unit_1.health &gt; 0 and unit_2.health &lt;= 0:&#10;            success = True&#10;&#10;        if unit_2.health &lt;= 0:&#10;            unit_2.is_alive = False&#10;        if unit_1.health &lt;= 0:&#10;            unit_1.is_alive = False&#10;&#10;        return success&#10;&#10;    while unit_1.is_alive &amp; unit_2.is_alive:&#10;        success = turn(unit_1, unit_2)&#10;&#10;##    success = turn(unit_1, unit_2)&#10;&#10;    return success&#10;&#10;&#10;if __name__ == '__main__':&#10;&#10;    chuck = Warrior()&#10;    bruce = Warrior()&#10;    carl = Knight()&#10;    dave = Warrior()&#10;    mark = Warrior()&#10;&#10;    assert fight(chuck, bruce) == True&#10;    assert fight(dave, carl) == False&#10;    assert chuck.is_alive == True&#10;    assert bruce.is_alive == False&#10;    assert carl.is_alive == True&#10;    assert dave.is_alive == False&#10;    assert fight(carl, mark) == False&#10;    assert carl.is_alive == False&#10;&#10;    print(&quot;Coding complete? Let's try tests!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="from collections import Counter&#10;def frequency_sort(items):&#10;    list = []&#10;    for i in items:&#10;        if i not in list:&#10;            for j in items:&#10;                if i==j:&#10;                    list.append(i)&#10;    return sorting(list)&#10;&#10;def sorting(line):&#10;    result = [item for items, c in Counter(line).most_common()&#10;        for item in [items] * c]&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]&#10;    assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']&#10;    assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]&#10;    assert list(frequency_sort([])) == []&#10;    assert list(frequency_sort([1])) == [1]&#10;    p= list(frequency_sort([4,6,2,2,2,6,4,4,4]))&#10;    print(p.sort)&#10;    s= list(frequency_sort([4,6,2,2,2,6,4,4,4]))&#10;    print(sorting(s))&#10;    assert list(frequency_sort([4,6,2,2,2,6,4,4,4])) == [4,4,4,4,2,2,2,6,6]&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    Sort the given iterable so that its elements end up in the decreasing frequency order, that is, the number of times they appear in elements. If two elements have the same frequency, they should end up in the same order as the first appearance in the iterable.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Iterable&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Iterable&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]) == [4, 4, 4, 4, 6, 6, 2, 2]&#10;frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob']) == ['bob', 'bob', 'bob', 'carl', 'alex']&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&#10;&lt;!-- Here you can explain some constraints for input--&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;elements can be ints or strings&lt;/i&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&lt;i&gt;The mission was taken from Python CCPS 109 Fall 2018. It's being taught for Ryerson Chang School of Continuing Education by &lt;a href=&quot;http://www.scs.ryerson.ca/~ikokkari/&quot;&gt;Ilkka Kokkarinen&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&#10;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="610" />
                      <option name="index" value="13" />
                      <option name="name" value="Sort Array by Element Frequency" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="272475" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="from collections import Counter&#10;def frequency_sort(items):&#10;    list = []&#10;    for i in items:&#10;        if i not in list:&#10;            for j in items:&#10;                if i==j:&#10;                    list.append(i)&#10;    return sorting(list)&#10;&#10;def sorting(line):&#10;    result = [item for items, c in Counter(line).most_common()&#10;        for item in [items] * c]&#10;    return result&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]&#10;    assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']&#10;    assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]&#10;    assert list(frequency_sort([])) == []&#10;    assert list(frequency_sort([1])) == [1]&#10;    p= list(frequency_sort([4,6,2,2,2,6,4,4,4]))&#10;    print(p.sort)&#10;    s= list(frequency_sort([4,6,2,2,2,6,4,4,4]))&#10;    print(sorting(s))&#10;    assert list(frequency_sort([4,6,2,2,2,6,4,4,4])) == [4,4,4,4,2,2,2,6,6]&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                  </list>
                </option>
              </CheckiOStation>
              <CheckiOStation>
                <option name="customPresentableName" />
                <option name="id" value="2" />
                <option name="index" value="2" />
                <option name="name" value="Elementary" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CheckiOMission>
                      <option name="code" value="def checkio(array):&#10;    &quot;&quot;&quot;&#10;        sums even-indexes elements and multiply at the last&#10;    &quot;&quot;&quot;&#10;    a=0&#10;    if array == []:&#10;        result = 0&#10;    else:&#10;        for i in range(0, len(array), 2):&#10;            print(array[i])&#10;            a += int(array[i])&#10;        result = a * int(array[len(array)-1])&#10;&#10;&#10;&#10;&#10;    return result&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(checkio([0, 1, 2, 3, 4, 5]))&#10;    &#10;    assert checkio([0, 1, 2, 3, 4, 5]) == 30, &quot;(0+2+4)*5=30&quot;&#10;    assert checkio([1, 3, 5]) == 30, &quot;(1+5)*5=30&quot;&#10;    assert checkio([6]) == 36, &quot;(6)*6=36&quot;&#10;    assert checkio([]) == 0, &quot;An empty array = 0&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; title=&quot;slice&quot; src=&quot;https://static.checkio.org/media/task/media/6ab3789385b44e3596d81b1ae6fb0134/slice.png&quot; alt=&quot;slice&quot;&#10;     style=&quot;float: left; &quot;/&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    You are given an array of integers. You should find the sum of the integers with even indexes (0th, 2nd, 4th...). Then multiply this summed number and the final element of the array together. &#10;     Don't forget that the first element has an index of 0.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    For an empty array, the result will always be 0 (zero).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A list of integers.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The number as an integer.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio([0, 1, 2, 3, 4, 5]) == 30&#10;checkio([1, 3, 5]) == 30&#10;checkio([6]) == 36&#10;checkio([]) == 0&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Indexes and slices are important elements of coding. This will come in handy down the&#10;    road!&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition: &lt;/strong&gt;&#10;    0 &amp;le; len(array) &amp;le; 20&lt;br&gt;&#10;    all(isinstance(x, int) for x in array)&lt;br&gt;&#10;    all(-100 &amp;lt; x &amp;lt; 100 for x in array)&lt;br&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="269" />
                      <option name="index" value="1" />
                      <option name="name" value="Even the Last" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="269188" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(array):&#10;    &quot;&quot;&quot;&#10;        sums even-indexes elements and multiply at the last&#10;    &quot;&quot;&quot;&#10;    a=0&#10;    if array == []:&#10;        result = 0&#10;    else:&#10;        for i in range(0, len(array), 2):&#10;            print(array[i])&#10;            a += int(array[i])&#10;        result = a * int(array[len(array)-1])&#10;&#10;&#10;&#10;&#10;    return result&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(checkio([0, 1, 2, 3, 4, 5]))&#10;    &#10;    assert checkio([0, 1, 2, 3, 4, 5]) == 30, &quot;(0+2+4)*5=30&quot;&#10;    assert checkio([1, 3, 5]) == 30, &quot;(1+5)*5=30&quot;&#10;    assert checkio([6]) == 36, &quot;(6)*6=36&quot;&#10;    assert checkio([]) == 0, &quot;An empty array = 0&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def checkio(number: int) -&gt; int:&#10;    length=len(str(number))&#10;    p=str(number)&#10;    y=1&#10;    for i in range(0,length):&#10;        x=int(p[i])&#10;        if x &gt; 0:&#10;            y = y * x&#10;    return y&#10;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(checkio(123405))&#10;    &#10;    # These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio(123405) == 120&#10;    assert checkio(999) == 729&#10;    assert checkio(1000) == 1&#10;    assert checkio(1111) == 1&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; title=&quot;juggler&quot; src=&quot;https://static.checkio.org/media/task/media/61139715c4734b25bbaed6ae78f80886/juggler.png&quot; alt=&quot;juggler&quot; style=&quot;max-height: 300px;float: left;&quot;/&gt;&#10;&lt;p&gt;&#10;    You are given a positive integer.&#10;    Your function should calculate the product of the digits excluding any zeroes.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    For example: The number given is 123405. The result will be 1*2*3*4*5=120 (don't forget to exclude zeroes).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A positive integer.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The product of the digits as an integer.&#10;&lt;/p&gt;&#10;&#10;&lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio(123405) == 120&#10;checkio(999) == 729&#10;checkio(1000) == 1&#10;checkio(1111) == 1&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This task can teach you how to solve a problem with simple data type conversion.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition: &lt;/strong&gt;&#10;        0 &amp;lt; number &amp;lt; 10&lt;sup&gt;6&lt;/sup&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="270" />
                      <option name="index" value="2" />
                      <option name="name" value="Digits Multiplication" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="256568" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(number: int) -&gt; int:&#10;    length=len(str(number))&#10;    p=str(number)&#10;    y=1&#10;    for i in range(0,length):&#10;        x=int(p[i])&#10;        if x &gt; 0:&#10;            y = y * x&#10;    return y&#10;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(checkio(123405))&#10;    &#10;    # These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio(123405) == 120&#10;    assert checkio(999) == 729&#10;    assert checkio(1000) == 1&#10;    assert checkio(1111) == 1&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def checkio(*args):&#10;    return 0&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    def almost_equal(checked, correct, significant_digits):&#10;        precision = 0.1 ** significant_digits&#10;        return correct - precision &lt; checked &lt; correct + precision&#10;        &#10;    print('Example:')&#10;    print(checkio(1, 2, 3))&#10;    &#10;    assert almost_equal(checkio(1, 2, 3), 2, 3), &quot;3-1=2&quot;&#10;    assert almost_equal(checkio(5, -5), 10, 3), &quot;5-(-5)=10&quot;&#10;    assert almost_equal(checkio(10.2, -2.2, 0, 1.1, 0.5), 12.4, 3), &quot;10.2-(-2.2)=12.4&quot;&#10;    assert almost_equal(checkio(), 0, 3), &quot;Empty&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; title=&quot;ruler&quot; src=&quot;https://static.checkio.org/media/task/media/a248184c62a140adb3befe110709ac5c/ruler.png&quot; alt=&quot;ruler&quot;&#10;     style=&quot;float: left; &quot;/&gt;&#10;&#10;&lt;p&gt;&#10;    Let's work with numbers.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You are given an array of numbers (floats). You should find the difference between the maximum and minimum element.&#10;    Your function should be able to handle an undefined amount of arguments. For an empty argument list, the function&#10;    should&#10;    return 0.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Floating-point numbers are represented in computer hardware as base 2 (binary) fractions.&#10;&#10;    So we should check the result with &amp;plusmn;0.001 precision.&lt;br&gt;&#10;    Think about how to work with&#10;    an arbitrary number of arguments.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; An arbitrary number of arguments as numbers (int, float).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The difference between maximum and minimum as a number (int, float).&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio(1, 2, 3) == 2&#10;checkio(5, -5) == 10&#10;checkio(10.2, -2.2, 0, 1.1, 0.5) == 12.4&#10;checkio() == 0&#10;    &lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Here you will learn about passing an undefined amount of arguments to functions.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition: &lt;/strong&gt;&#10;    0 &amp;le; len(args) &amp;le; 20&lt;br&gt;&#10;    all(-100 &amp;lt; x &amp;lt; 100 for x in args)&lt;br&gt;&#10;    all(isinstance(x, (int, float)) for x in args)&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;facts for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        Your vote gains more value as you grow in level. Starting at level 5 you can upvote a publication twice and&#10;        starting at level 14, you can upvote something five times!&#10;    &lt;/p&gt;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="274" />
                      <option name="index" value="3" />
                      <option name="name" value="The Most Numbers" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(*args):&#10;    return 0&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    def almost_equal(checked, correct, significant_digits):&#10;        precision = 0.1 ** significant_digits&#10;        return correct - precision &lt; checked &lt; correct + precision&#10;        &#10;    print('Example:')&#10;    print(checkio(1, 2, 3))&#10;    &#10;    assert almost_equal(checkio(1, 2, 3), 2, 3), &quot;3-1=2&quot;&#10;    assert almost_equal(checkio(5, -5), 10, 3), &quot;5-(-5)=10&quot;&#10;    assert almost_equal(checkio(10.2, -2.2, 0, 1.1, 0.5), 12.4, 3), &quot;10.2-(-2.2)=12.4&quot;&#10;    assert almost_equal(checkio(), 0, 3), &quot;Empty&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def checkio(words: str) -&gt; bool:&#10;    return True or False&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(checkio(&quot;Hello World hello&quot;))&#10;    &#10;    assert checkio(&quot;Hello World hello&quot;) == True, &quot;Hello&quot;&#10;    assert checkio(&quot;He is 123 man&quot;) == False, &quot;123 man&quot;&#10;    assert checkio(&quot;1 2 3 4&quot;) == False, &quot;Digits&quot;&#10;    assert checkio(&quot;bla bla bla bla&quot;) == True, &quot;Bla Bla&quot;&#10;    assert checkio(&quot;Hi&quot;) == False, &quot;Hi&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only&quot; title=&quot;train&quot; src=&quot;https://static.checkio.org/media/task/media/81e1c7ba240c422e82d91dfb3e7a039d/train.png&quot; alt=&quot;train&quot; /&gt;&#10;&#10;&lt;p&gt;&#10;    Let's teach the Robots to distinguish words and numbers.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You are given a string with words and numbers separated by whitespaces (one space).&#10;    The words contains only letters.&#10;    You should check if the string contains three words in &lt;strong&gt;succession&lt;/strong&gt;.&#10;    For example, the string &quot;start 5 &lt;strong&gt;one two three&lt;/strong&gt; 7 end&quot; contains three words in succession.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A string with words.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The answer as a boolean.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio(&quot;Hello World hello&quot;) == True&#10;checkio(&quot;He is 123 man&quot;) == False&#10;checkio(&quot;1 2 3 4&quot;) == False&#10;checkio(&quot;bla bla bla bla&quot;) == True&#10;checkio(&quot;Hi&quot;) == False&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This teaches you how to work with strings and introduces some useful functions.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    The input contains words and/or numbers. There are no mixed words (letters and digits combined).&lt;br&gt;&#10;    0 &amp;lt; len(words) &amp;lt; 100&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="275" />
                      <option name="index" value="4" />
                      <option name="name" value="Three Words" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(words: str) -&gt; bool:&#10;    return True or False&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(checkio(&quot;Hello World hello&quot;))&#10;    &#10;    assert checkio(&quot;Hello World hello&quot;) == True, &quot;Hello&quot;&#10;    assert checkio(&quot;He is 123 man&quot;) == False, &quot;123 man&quot;&#10;    assert checkio(&quot;1 2 3 4&quot;) == False, &quot;Digits&quot;&#10;    assert checkio(&quot;bla bla bla bla&quot;) == True, &quot;Bla Bla&quot;&#10;    assert checkio(&quot;Hi&quot;) == False, &quot;Hi&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="# Your optional code here&#10;# You can import some modules or create additional functions&#10;&#10;&#10;def checkio(number: int) -&gt; str:&#10;    # Your code here&#10;    # It's main function. Don't remove this function&#10;    # It's using for auto-testing and must return a result for check.&#10;&#10;    # replace this for solution&#10;    return 'Fizz Buzz'&#10;&#10;# Some hints:&#10;# Convert a number in the string with str(n)&#10;&#10;# These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(checkio(15))&#10;    &#10;    assert checkio(15) == &quot;Fizz Buzz&quot;, &quot;15 is divisible by 3 and 5&quot;&#10;    assert checkio(6) == &quot;Fizz&quot;, &quot;6 is divisible by 3&quot;&#10;    assert checkio(5) == &quot;Buzz&quot;, &quot;5 is divisible by 5&quot;&#10;    assert checkio(7) == &quot;7&quot;, &quot;7 is not divisible by 3 or 5&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; title=&quot;juggler&quot; src=&quot;https://static.checkio.org/media/task/media/330371a1e78c41cdb3add01220aa432a/calculator.png&quot; alt=&quot;juggler&quot; style=&quot;float: left&quot; /&gt;&#10;&#10;&lt;p&gt;&#10;    &quot;Fizz buzz&quot; is a word game we will use to teach the robots about division. Let's learn computers.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You should write a function that will receive a positive integer and return:&lt;br&gt;&#10;    &lt;strong&gt;&quot;Fizz Buzz&quot;&lt;/strong&gt; if the number is divisible by 3 and by 5;&lt;br&gt;&#10;    &lt;strong&gt;&quot;Fizz&quot;&lt;/strong&gt; if the number is divisible by 3;&lt;br&gt;&#10;    &lt;strong&gt;&quot;Buzz&quot;&lt;/strong&gt; if the number is divisible by 5; &lt;br&gt;&#10;    &lt;strong&gt;The number&lt;/strong&gt; as a string for other cases.&lt;br&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A number as an integer.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The answer as a string.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio(15) == &quot;Fizz Buzz&quot;&#10;checkio(6) == &quot;Fizz&quot;&#10;checkio(5) == &quot;Buzz&quot;&#10;checkio(7) == &quot;7&quot;&#10;&#10;    &lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Here you can learn how to write the simplest function and work with if-else statements.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    0 &amp;lt; number &amp;le; 1000&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="278" />
                      <option name="index" value="5" />
                      <option name="name" value="Fizz Buzz" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="# Your optional code here&#10;# You can import some modules or create additional functions&#10;&#10;&#10;def checkio(number: int) -&gt; str:&#10;    # Your code here&#10;    # It's main function. Don't remove this function&#10;    # It's using for auto-testing and must return a result for check.&#10;&#10;    # replace this for solution&#10;    return 'Fizz Buzz'&#10;&#10;# Some hints:&#10;# Convert a number in the string with str(n)&#10;&#10;# These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(checkio(15))&#10;    &#10;    assert checkio(15) == &quot;Fizz Buzz&quot;, &quot;15 is divisible by 3 and 5&quot;&#10;    assert checkio(6) == &quot;Fizz&quot;, &quot;6 is divisible by 3&quot;&#10;    assert checkio(5) == &quot;Buzz&quot;, &quot;5 is divisible by 5&quot;&#10;    assert checkio(7) == &quot;7&quot;, &quot;7 is not divisible by 3 or 5&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def checkio(numbers_array: tuple) -&gt; list:&#10;    return numbers_array&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(list(checkio((-20, -5, 10, 15))))&#10;&#10;    def check_it(array):&#10;        if not isinstance(array, (list, tuple)):&#10;            raise TypeError(&quot;The result should be a list or tuple.&quot;)&#10;        return list(array)&#10;&#10;    assert check_it(checkio((-20, -5, 10, 15))) == [-5, 10, 15, -20], &quot;Example&quot;  # or (-5, 10, 15, -20)&#10;    assert check_it(checkio((1, 2, 3, 0))) == [0, 1, 2, 3], &quot;Positive numbers&quot;&#10;    assert check_it(checkio((-1, -2, -3, 0))) == [0, -1, -2, -3], &quot;Negative numbers&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; title=&quot;X&quot; src=&quot;https://static.checkio.org/media/task/media/e8bdcab7600146bf8aa15e644b1805a6/X.png&quot; alt=&quot;X&quot;&#10;     style=&quot;float: left&quot;/&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    Let's try some sorting. Here is an array with the specific rules.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    The array&#10;    &#10;    (a tuple)&#10;    &#10;    has various numbers. You should sort it, but sort it by absolute value in ascending order.&#10;    For example, the sequence (-20, -5, 10, 15) will be sorted like so: (-5, 10, 15, -20).&#10;    Your function should return the sorted list  or tuple.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt; The numbers in the array are unique by their absolute values.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; An array of numbers , a tuple..&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The list or tuple (but not a generator) sorted by absolute values in ascending order.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Addition: &lt;/strong&gt; The results of your function will be shown as a list in the tests explanation panel.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio((-20, -5, 10, 15)) == [-5, 10, 15, -20] # or (-5, 10, 15, -20)&#10;checkio((1, 2, 3, 0)) == [0, 1, 2, 3]&#10;checkio((-1, -2, -3, 0)) == [0, -1, -2, -3]&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Sorting is a part of many tasks, so it will be useful to know how to use it.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition&lt;/strong&gt;:&#10;    len(set(abs(x) for x in array)) == len(array)&lt;br&gt;&#10;    0 &amp;lt; len(array) &amp;lt; 100&lt;br&gt;&#10;    all(isinstance(x, int) for x in array)&lt;br&gt;&#10;    all(-100 &amp;lt; x &amp;lt; 100 for x in array)&lt;br&gt;&#10;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="280" />
                      <option name="index" value="6" />
                      <option name="name" value="Absolute Sorting" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(numbers_array: tuple) -&gt; list:&#10;    return numbers_array&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(list(checkio((-20, -5, 10, 15))))&#10;&#10;    def check_it(array):&#10;        if not isinstance(array, (list, tuple)):&#10;            raise TypeError(&quot;The result should be a list or tuple.&quot;)&#10;        return list(array)&#10;&#10;    assert check_it(checkio((-20, -5, 10, 15))) == [-5, 10, 15, -20], &quot;Example&quot;  # or (-5, 10, 15, -20)&#10;    assert check_it(checkio((1, 2, 3, 0))) == [0, 1, 2, 3], &quot;Positive numbers&quot;&#10;    assert check_it(checkio((-1, -2, -3, 0))) == [0, -1, -2, -3], &quot;Negative numbers&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def left_join(phrases):&#10;    &quot;&quot;&quot;&#10;        Join strings and replace &quot;right&quot; to &quot;left&quot;&#10;    &quot;&quot;&quot;&#10;    return &quot;left&quot;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(left_join((&quot;left&quot;, &quot;right&quot;, &quot;left&quot;, &quot;stop&quot;)))&#10;    &#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert left_join((&quot;left&quot;, &quot;right&quot;, &quot;left&quot;, &quot;stop&quot;)) == &quot;left,left,left,stop&quot;, &quot;All to left&quot;&#10;    assert left_join((&quot;bright aright&quot;, &quot;ok&quot;)) == &quot;bleft aleft,ok&quot;, &quot;Bright Left&quot;&#10;    assert left_join((&quot;brightness wright&quot;,)) == &quot;bleftness wleft&quot;, &quot;One phrase&quot;&#10;    assert left_join((&quot;enough&quot;, &quot;jokes&quot;)) == &quot;enough,jokes&quot;, &quot;Nothing to replace&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;story&quot;&gt;&#10;    &lt;p&gt;&quot;For centuries, left-handers have suffered unfair discrimination in a world designed for right-handers.&quot;&#10;        &lt;br&gt;Santrock, John W. (2008). Motor, Sensory, and Perceptual Development.&lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;        &quot;Most humans (say 70 percent to 95 percent) are right-handed, a minority (say 5 percent to 30 percent)&#10;        are left-handed, and an indeterminate number of people are probably best described as ambidextrous.&quot;&#10;        &lt;br&gt;Scientific American. www.scientificamerican.com&lt;/p&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    One of the robots is charged with a simple task:&#10;    to join a sequence of strings into one sentence to produce instructions&#10;    on how to get around the ship.&#10;    But this robot is left-handed and has a tendency to joke around and confuse its right-handed friends.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    You are given a sequence of strings.&#10;    You should join these strings into chunk of text where the initial strings are separated by commas.&#10;    As a joke on the right handed robots, you should replace all cases of the words &quot;right&quot; with the word &quot;left&quot;,&#10;    even if it's a part of another word. All strings are given in lowercase.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A sequence of strings as a tuple of strings (unicode).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The text as a string.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;left_join((&quot;left&quot;, &quot;right&quot;, &quot;left&quot;, &quot;stop&quot;)) == &quot;left,left,left,stop&quot;&#10;left_join((&quot;bright aright&quot;, &quot;ok&quot;)) == &quot;bleft aleft,ok&quot;&#10;left_join((&quot;brightness wright&quot;,)) == &quot;bleftness wleft&quot;&#10;left_join((&quot;enough&quot;, &quot;jokes&quot;)) == &quot;enough,jokes&quot;&#10;    &lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This is a simple example of operations using strings and sequences.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&lt;br&gt;&#10;    0 &amp;lt; len(phrases) &amp;lt; 42&lt;br&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="354" />
                      <option name="index" value="7" />
                      <option name="name" value="Right to Left" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def left_join(phrases):&#10;    &quot;&quot;&quot;&#10;        Join strings and replace &quot;right&quot; to &quot;left&quot;&#10;    &quot;&quot;&quot;&#10;    return &quot;left&quot;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(left_join((&quot;left&quot;, &quot;right&quot;, &quot;left&quot;, &quot;stop&quot;)))&#10;    &#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert left_join((&quot;left&quot;, &quot;right&quot;, &quot;left&quot;, &quot;stop&quot;)) == &quot;left,left,left,stop&quot;, &quot;All to left&quot;&#10;    assert left_join((&quot;bright aright&quot;, &quot;ok&quot;)) == &quot;bleft aleft,ok&quot;, &quot;Bright Left&quot;&#10;    assert left_join((&quot;brightness wright&quot;,)) == &quot;bleftness wleft&quot;, &quot;One phrase&quot;&#10;    assert left_join((&quot;enough&quot;, &quot;jokes&quot;)) == &quot;enough,jokes&quot;, &quot;Nothing to replace&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def index_power(array: list, n: int) -&gt; int:&#10;    &quot;&quot;&quot;&#10;        Find Nth power of the element with index N.&#10;    &quot;&quot;&quot;&#10;    return None&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(index_power([1, 2, 3, 4], 2))&#10;    &#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert index_power([1, 2, 3, 4], 2) == 9, &quot;Square&quot;&#10;    assert index_power([1, 3, 10, 100], 3) == 1000000, &quot;Cube&quot;&#10;    assert index_power([0, 1], 0) == 1, &quot;Zero power&quot;&#10;    assert index_power([1, 2], 3) == -1, &quot;IndexError&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    You are given an array with positive numbers and a number N. You should find the N-th power of the element in the&#10;    array with the index N. If N is outside of the array, then return -1. Don't forget that the first element has the&#10;    index 0.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Let's look at a few examples:&lt;br&gt;&#10;    - array = [1, 2, 3, 4] and N = 2, then the result is 3&lt;sup&gt;2&lt;/sup&gt; == 9;&lt;br&gt;&#10;    - array = [1, 2, 3] and N = 3, but N is outside of the array, so the result is -1.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two arguments. An array as a list of integers and a number as a integer.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The result as an integer.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &#10;        &lt;pre class=&quot;brush: python&quot;&gt;&#10;index_power([1, 2, 3, 4], 2) == 9&#10;index_power([1, 3, 10, 100], 3) == 1000000&#10;index_power([0, 1], 0) == 1&#10;index_power([1, 2], 3) == -1&#10;        &lt;/pre&gt;&#10;    &#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This mission teaches you how to use basic arrays and indexes when combined with simple mathematics.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    0 &amp;lt; len(array) &amp;le; 10&lt;br&gt;&#10;    0 &amp;le; N&lt;br&gt;&#10;    all(0 &amp;le; x &amp;le; 100 for x in array)&lt;br&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="363" />
                      <option name="index" value="8" />
                      <option name="name" value="Index Power" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def index_power(array: list, n: int) -&gt; int:&#10;    &quot;&quot;&quot;&#10;        Find Nth power of the element with index N.&#10;    &quot;&quot;&quot;&#10;    return None&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(index_power([1, 2, 3, 4], 2))&#10;    &#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert index_power([1, 2, 3, 4], 2) == 9, &quot;Square&quot;&#10;    assert index_power([1, 3, 10, 100], 3) == 1000000, &quot;Cube&quot;&#10;    assert index_power([0, 1], 0) == 1, &quot;Zero power&quot;&#10;    assert index_power([1, 2], 3) == -1, &quot;IndexError&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def find_message(text: str) -&gt; str:&#10;    &quot;&quot;&quot;Find a secret message&quot;&quot;&quot;&#10;    return &quot;&quot;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(find_message(&quot;How are you? Eh, ok. Low or Lower? Ohhh.&quot;))&#10;    &#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert find_message(&quot;How are you? Eh, ok. Low or Lower? Ohhh.&quot;) == &quot;HELLO&quot;, &quot;hello&quot;&#10;    assert find_message(&quot;hello world!&quot;) == &quot;&quot;, &quot;Nothing&quot;&#10;    assert find_message(&quot;HELLO WORLD!!!&quot;) == &quot;HELLOWORLD&quot;, &quot;Capitals&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/553bae8bd22347b19e04f0c0cbe0084c/title.png&quot; style=&quot;max-height: 350px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;story&quot;&gt;&#10;    &quot;Where does a wise man hide a leaf? In the forest.&#10;    But what does he do if there is no forest? ... He grows a forest to hide it in.&quot;&lt;br&gt;&#10;    -- Gilbert Keith Chesterton&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Ever tried to send a secret message to someone without using the postal service? You could use newspapers to tell&#10;    your secret. Even if someone finds your message, it's easy to brush them off as paranoid and as a&#10;    conspiracy theorist. One of the simplest ways to hide a secret message is to use capital letters. Let's find some of&#10;    these secret messages.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You are given a chunk of text. Gather all capital letters in one word in the order that they appear in the text.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    For example: text =&#10;    &quot;&lt;strong&gt;H&lt;/strong&gt;ow are you? &lt;strong&gt;E&lt;/strong&gt;h, ok. &lt;strong&gt;L&lt;/strong&gt;ow or &lt;strong&gt;L&lt;/strong&gt;ower?&#10;    &lt;strong&gt;O&lt;/strong&gt;hhh.&quot;,&#10;    if we collect all of the capital letters, we get the message &quot;HELLO&quot;.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A text as a string (unicode).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The secret message as a string or an empty string.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;find_message(&quot;How are you? Eh, ok. Low or Lower? Ohhh.&quot;) == &quot;HELLO&quot;&#10;find_message(&quot;hello world!&quot;) == &quot;&quot;&#10;    &lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This is a simple exercise in working with strings: iterate, recognize and concatenate.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    0 &amp;lt; len(text) &amp;le; 1000&lt;br&gt;&#10;    all(ch in string.printable for ch in text)&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="364" />
                      <option name="index" value="9" />
                      <option name="name" value="Secret Message" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def find_message(text: str) -&gt; str:&#10;    &quot;&quot;&quot;Find a secret message&quot;&quot;&quot;&#10;    return &quot;&quot;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(find_message(&quot;How are you? Eh, ok. Low or Lower? Ohhh.&quot;))&#10;    &#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert find_message(&quot;How are you? Eh, ok. Low or Lower? Ohhh.&quot;) == &quot;HELLO&quot;, &quot;hello&quot;&#10;    assert find_message(&quot;hello world!&quot;) == &quot;&quot;, &quot;Nothing&quot;&#10;    assert find_message(&quot;HELLO WORLD!!!&quot;) == &quot;HELLOWORLD&quot;, &quot;Capitals&quot;&#10;    print(&quot;Coding complete? Click 'Check' to review your tests and earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def easy_unpack(elements: tuple) -&gt; tuple:&#10;    &quot;&quot;&quot;&#10;        returns a tuple with 3 elements - first, third and second to the last&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return ()&#10;&#10;if __name__ == '__main__':&#10;    print('Examples:')&#10;    print(easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)))&#10;    &#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)) == (1, 3, 7)&#10;    assert easy_unpack((1, 1, 1, 1)) == (1, 1, 1)&#10;    assert easy_unpack((6, 3, 7)) == (6, 7, 3)&#10;    print('Done! Go Check!')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    Your mission here is to create a function that gets a tuple and returns a tuple with 3 elements - the first, third and second to the last for the given array.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A tuple, at least 3 elements long.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A tuple. &#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: javascript&quot;&gt;&#10;easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)) == (1, 3, 7)&#10;easy_unpack((1, 1, 1, 1)) == (1, 1, 1)&#10;easy_unpack((6, 3, 7)) == (6, 7, 3)&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="502" />
                      <option name="index" value="10" />
                      <option name="name" value="Easy Unpack" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def easy_unpack(elements: tuple) -&gt; tuple:&#10;    &quot;&quot;&quot;&#10;        returns a tuple with 3 elements - first, third and second to the last&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return ()&#10;&#10;if __name__ == '__main__':&#10;    print('Examples:')&#10;    print(easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)))&#10;    &#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert easy_unpack((1, 2, 3, 4, 5, 6, 7, 9)) == (1, 3, 7)&#10;    assert easy_unpack((1, 1, 1, 1)) == (1, 1, 1)&#10;    assert easy_unpack((6, 3, 7)) == (6, 7, 3)&#10;    print('Done! Go Check!')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def bigger_price(limit: int, data: list) -&gt; list:&#10;    &quot;&quot;&quot;&#10;        TOP most expensive goods&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    from pprint import pprint&#10;    print('Example:')&#10;    pprint(bigger_price(2, [&#10;        {&quot;name&quot;: &quot;bread&quot;, &quot;price&quot;: 100},&#10;        {&quot;name&quot;: &quot;wine&quot;, &quot;price&quot;: 138},&#10;        {&quot;name&quot;: &quot;meat&quot;, &quot;price&quot;: 15},&#10;        {&quot;name&quot;: &quot;water&quot;, &quot;price&quot;: 1}&#10;    ]))&#10;&#10;    # These &quot;asserts&quot; using for self-checking and not for auto-testing&#10;    assert bigger_price(2, [&#10;        {&quot;name&quot;: &quot;bread&quot;, &quot;price&quot;: 100},&#10;        {&quot;name&quot;: &quot;wine&quot;, &quot;price&quot;: 138},&#10;        {&quot;name&quot;: &quot;meat&quot;, &quot;price&quot;: 15},&#10;        {&quot;name&quot;: &quot;water&quot;, &quot;price&quot;: 1}&#10;    ]) == [&#10;        {&quot;name&quot;: &quot;wine&quot;, &quot;price&quot;: 138},&#10;        {&quot;name&quot;: &quot;bread&quot;, &quot;price&quot;: 100}&#10;    ], &quot;First&quot;&#10;&#10;    assert bigger_price(1, [&#10;        {&quot;name&quot;: &quot;pen&quot;, &quot;price&quot;: 5},&#10;        {&quot;name&quot;: &quot;whiteboard&quot;, &quot;price&quot;: 170}&#10;    ]) == [{&quot;name&quot;: &quot;whiteboard&quot;, &quot;price&quot;: 170}], &quot;Second&quot;&#10;&#10;    print('Done! Looks like it is fine. Go and check it')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    You have a table with all available goods in the store. The data is represented as a list of dicts&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Your mission here is to find the TOP most expensive goods. The amount we are looking for will be given as a first argument and the whole data as the second one&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; int and list of dicts. Each dicts has two keys &quot;name&quot; and &quot;price&quot;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; the same as the second Input argument.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;bigger_price(2, [&#10;    {&quot;name&quot;: &quot;bread&quot;, &quot;price&quot;: 100},&#10;    {&quot;name&quot;: &quot;wine&quot;, &quot;price&quot;: 138},&#10;    {&quot;name&quot;: &quot;meat&quot;, &quot;price&quot;: 15},&#10;    {&quot;name&quot;: &quot;water&quot;, &quot;price&quot;: 1}&#10;]) == [&#10;    {&quot;name&quot;: &quot;wine&quot;, &quot;price&quot;: 138},&#10;    {&quot;name&quot;: &quot;bread&quot;, &quot;price&quot;: 100}&#10;]&#10;&#10;bigger_price(1, [&#10;    {&quot;name&quot;: &quot;pen&quot;, &quot;price&quot;: 5},&#10;    {&quot;name&quot;: &quot;whiteboard&quot;, &quot;price&quot;: 170}&#10;]) == [{&quot;name&quot;: &quot;whiteboard&quot;, &quot;price&quot;: 170}]&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="503" />
                      <option name="index" value="11" />
                      <option name="name" value="Bigger Price" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def bigger_price(limit: int, data: list) -&gt; list:&#10;    &quot;&quot;&quot;&#10;        TOP most expensive goods&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    from pprint import pprint&#10;    print('Example:')&#10;    pprint(bigger_price(2, [&#10;        {&quot;name&quot;: &quot;bread&quot;, &quot;price&quot;: 100},&#10;        {&quot;name&quot;: &quot;wine&quot;, &quot;price&quot;: 138},&#10;        {&quot;name&quot;: &quot;meat&quot;, &quot;price&quot;: 15},&#10;        {&quot;name&quot;: &quot;water&quot;, &quot;price&quot;: 1}&#10;    ]))&#10;&#10;    # These &quot;asserts&quot; using for self-checking and not for auto-testing&#10;    assert bigger_price(2, [&#10;        {&quot;name&quot;: &quot;bread&quot;, &quot;price&quot;: 100},&#10;        {&quot;name&quot;: &quot;wine&quot;, &quot;price&quot;: 138},&#10;        {&quot;name&quot;: &quot;meat&quot;, &quot;price&quot;: 15},&#10;        {&quot;name&quot;: &quot;water&quot;, &quot;price&quot;: 1}&#10;    ]) == [&#10;        {&quot;name&quot;: &quot;wine&quot;, &quot;price&quot;: 138},&#10;        {&quot;name&quot;: &quot;bread&quot;, &quot;price&quot;: 100}&#10;    ], &quot;First&quot;&#10;&#10;    assert bigger_price(1, [&#10;        {&quot;name&quot;: &quot;pen&quot;, &quot;price&quot;: 5},&#10;        {&quot;name&quot;: &quot;whiteboard&quot;, &quot;price&quot;: 170}&#10;    ]) == [{&quot;name&quot;: &quot;whiteboard&quot;, &quot;price&quot;: 170}], &quot;Second&quot;&#10;&#10;    print('Done! Looks like it is fine. Go and check it')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="# 1. on CheckiO your solution should be a function&#13;&#10;# 2. the function should return the right answer, not print it.&#13;&#10;&#13;&#10;def say_hi(name: str, age: int) -&gt; str:&#13;&#10;    &quot;&quot;&quot;&#13;&#10;        Hi!&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    # your code here&#13;&#10;    return &quot;Hi. My name is Alex and I'm 32 years old&quot;&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert say_hi(&quot;Alex&quot;, 32) == &quot;Hi. My name is Alex and I'm 32 years old&quot;, &quot;First&quot;&#13;&#10;    assert say_hi(&quot;Frank&quot;, 68) == &quot;Hi. My name is Frank and I'm 68 years old&quot;, &quot;Second&quot;&#13;&#10;    print('Done. Time to Check.')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;&#9;In this mission you should write a function that introduce a person with a given parameters in attributes.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two arguments. String and positive integer.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; String.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;say_hi(&quot;Alex&quot;, 32) == &quot;Hi. My name is Alex and I'm 32 years old&quot;&#10;say_hi(&quot;Frank&quot;, 68) == &quot;Hi. My name is Frank and I'm 68 years old&quot;&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="505" />
                      <option name="index" value="12" />
                      <option name="name" value="Say Hi" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="# 1. on CheckiO your solution should be a function&#10;# 2. the function should return the right answer, not print it.&#10;&#10;def say_hi(name: str, age: int) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        Hi!&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return &quot;Hi. My name is Alex and I'm 32 years old&quot;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert say_hi(&quot;Alex&quot;, 32) == &quot;Hi. My name is Alex and I'm 32 years old&quot;, &quot;First&quot;&#10;    assert say_hi(&quot;Frank&quot;, 68) == &quot;Hi. My name is Frank and I'm 68 years old&quot;, &quot;Second&quot;&#10;    print('Done. Time to Check.')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def second_index(text: str, symbol: str) -&gt; [int, None]:&#10;    &quot;&quot;&quot;&#10;        returns the second index of a symbol in a given text&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return 0&#10;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(second_index(&quot;sims&quot;, &quot;s&quot;))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert second_index(&quot;sims&quot;, &quot;s&quot;) == 3, &quot;First&quot;&#10;    assert second_index(&quot;find the river&quot;, &quot;e&quot;) == 12, &quot;Second&quot;&#10;    assert second_index(&quot;hi&quot;, &quot; &quot;) is None, &quot;Third&quot;&#10;    assert second_index(&quot;hi mayor&quot;, &quot; &quot;) is None, &quot;Fourth&quot;&#10;    assert second_index(&quot;hi mr Mayor&quot;, &quot; &quot;) == 5, &quot;Fifth&quot;&#10;    print('You are awesome! All tests are done! Go Check it!')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;&lt;p&gt;&#10;    You are given two strings and you have to find an index of the second occurrence of the second string in the first one.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;&#9;Let's go through the first example where you need to find the second occurrence of &quot;s&quot; in a word &quot;sims&quot;. It’s easy to find its first occurrence with a function &#10;&#10;&#10;&#9;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.index&quot;&gt;index&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.find&quot;&gt;find&lt;/a&gt; &#10;&#10;&#10;&#10;&#9;which will point out that &quot;s&quot; is the first symbol in a word &quot;sims&quot; and therefore the index of the first occurrence is 0. But we have to find the second &quot;s&quot; which is 4th in a row and that means that the index of the second occurrence (and the answer to a question) is 3. &#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two strings. &#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Int or None&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;second_index(&quot;sims&quot;, &quot;s&quot;) == 3&#10;second_index(&quot;find the river&quot;, &quot;e&quot;) == 12&#10;second_index(&quot;hi&quot;, &quot; &quot;) is None&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="507" />
                      <option name="index" value="13" />
                      <option name="name" value="Second Index" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def second_index(text: str, symbol: str) -&gt; [int, None]:&#10;    &quot;&quot;&quot;&#10;        returns the second index of a symbol in a given text&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return 0&#10;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(second_index(&quot;sims&quot;, &quot;s&quot;))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert second_index(&quot;sims&quot;, &quot;s&quot;) == 3, &quot;First&quot;&#10;    assert second_index(&quot;find the river&quot;, &quot;e&quot;) == 12, &quot;Second&quot;&#10;    assert second_index(&quot;hi&quot;, &quot; &quot;) is None, &quot;Third&quot;&#10;    assert second_index(&quot;hi mayor&quot;, &quot; &quot;) is None, &quot;Fourth&quot;&#10;    assert second_index(&quot;hi mr Mayor&quot;, &quot; &quot;) == 5, &quot;Fifth&quot;&#10;    print('You are awesome! All tests are done! Go Check it!')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def between_markers(text: str, begin: str, end: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns substring between two given markers&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return ''&#10;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(between_markers('What is &gt;apple&lt;', '&gt;', '&lt;'))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for testing&#10;    assert between_markers('What is &gt;apple&lt;', '&gt;', '&lt;') == &quot;apple&quot;, &quot;One sym&quot;&#10;    assert between_markers(&quot;&lt;head&gt;&lt;title&gt;My new site&lt;/title&gt;&lt;/head&gt;&quot;,&#10;                           &quot;&lt;title&gt;&quot;, &quot;&lt;/title&gt;&quot;) == &quot;My new site&quot;, &quot;HTML&quot;&#10;    assert between_markers('No[/b] hi', '[b]', '[/b]') == 'No', 'No opened'&#10;    assert between_markers('No [b]hi', '[b]', '[/b]') == 'hi', 'No close'&#10;    assert between_markers('No hi', '[b]', '[/b]') == 'No hi', 'No markers at all'&#10;    assert between_markers('No &lt;hi&gt;', '&gt;', '&lt;') == '', 'Wrong direction'&#10;    print('Wow, you are doing pretty good. Time to check it!')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    You are given a string and two markers (the initial and final). You have to find a substring enclosed between these two markers. But there are a few important conditions:&#10;&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;The initial and final markers are always different.&lt;/li&gt;&#10;&#9;&lt;li&gt;If there is no initial marker, then the first character should be considered the beginning of a string.&lt;/li&gt;&#10;&#9;&lt;li&gt;If there is no final marker, then the last character should be considered the ending of a string.&lt;/li&gt;&#10;    &lt;li&gt;If the initial and final markers are missing then simply return the whole string.&lt;/li&gt;&#10;&#9;&lt;li&gt;If the final marker comes before the initial marker, then return an empty string.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Three arguments. All of them are strings. The second and third arguments are the initial and final markers.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A string. &#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;between_markers('What is &gt;apple&lt;', '&gt;', '&lt;') == 'apple'&#10;between_markers('No[/b] hi', '[b]', '[/b]') == 'No'&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    &lt;i&gt;for parsing texts&lt;/i&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;can't be more than one final marker and can't be more than one initial&lt;/i&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="508" />
                      <option name="index" value="14" />
                      <option name="name" value="Between Markers" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def between_markers(text: str, begin: str, end: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns substring between two given markers&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return ''&#10;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(between_markers('What is &gt;apple&lt;', '&gt;', '&lt;'))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for testing&#10;    assert between_markers('What is &gt;apple&lt;', '&gt;', '&lt;') == &quot;apple&quot;, &quot;One sym&quot;&#10;    assert between_markers(&quot;&lt;head&gt;&lt;title&gt;My new site&lt;/title&gt;&lt;/head&gt;&quot;,&#10;                           &quot;&lt;title&gt;&quot;, &quot;&lt;/title&gt;&quot;) == &quot;My new site&quot;, &quot;HTML&quot;&#10;    assert between_markers('No[/b] hi', '[b]', '[/b]') == 'No', 'No opened'&#10;    assert between_markers('No [b]hi', '[b]', '[/b]') == 'hi', 'No close'&#10;    assert between_markers('No hi', '[b]', '[/b]') == 'No hi', 'No markers at all'&#10;    assert between_markers('No &lt;hi&gt;', '&gt;', '&lt;') == '', 'Wrong direction'&#10;    print('Wow, you are doing pretty good. Time to check it!')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="import re&#10;&#10;def first_word(text: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns the first word in a given text.&#10;    &quot;&quot;&quot;&#10;    # answer = []&#10;    # answer=text.split(&quot; &quot;, maxsplit=1)&#10;    # import re&#10;    # re.sub(r'a', 'b', 'banana')&#10;    answer_wrk = re.search(r&quot;[a-zA-z\']+&quot;, text)&#10;    answer = answer_wrk.group(0)&#10;&#10;    return answer&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(first_word(&quot;Hello world&quot;))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert first_word(&quot;Hello world&quot;) == &quot;Hello&quot;&#10;    assert first_word(&quot; a word &quot;) == &quot;a&quot;&#10;    assert first_word(&quot;don't touch it&quot;) == &quot;don't&quot;&#10;    assert first_word(&quot;greetings, friends&quot;) == &quot;greetings&quot;&#10;    assert first_word(&quot;... and so on ...&quot;) == &quot;and&quot;&#10;    assert first_word(&quot;hi&quot;) == &quot;hi&quot;&#10;    assert first_word(&quot;Hello.World&quot;) == &quot;Hello&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    You are given a string where you have to find its first word.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    When solving a task pay attention to the following points:&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;There can be dots and commas in a string.&lt;/li&gt;&#10;    &lt;li&gt;A string can start with a letter or, for example, a dot or space.&lt;/li&gt;&#10;    &lt;li&gt;A word can contain an apostrophe and it's a part of a word.&lt;/li&gt;&#10;    &lt;li&gt;The whole text can be represented with one word and that's it.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A string.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A string. &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;first_word(&quot;Hello world&quot;) == &quot;Hello&quot;&#10;first_word(&quot;greetings, friends&quot;) == &quot;greetings&quot;&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&lt;!-- Here you can explain how it can be used in development and what is usage of this. --&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    &lt;i&gt;the first word is a command in a command line&lt;/i&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Here you can explain some constraints for input--&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;the text can contain a-z A-Z , . ' &lt;/i&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="509" />
                      <option name="index" value="15" />
                      <option name="name" value="First Word" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="211057" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="import re&#10;&#10;def first_word(text: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns the first word in a given text.&#10;    &quot;&quot;&quot;&#10;    # answer = []&#10;    # answer=text.split(&quot; &quot;, maxsplit=1)&#10;    # import re&#10;    # re.sub(r'a', 'b', 'banana')&#10;    answer_wrk = re.search(r&quot;[a-zA-z\']+&quot;, text)&#10;    answer = answer_wrk.group(0)&#10;&#10;    return answer&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(first_word(&quot;Hello world&quot;))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert first_word(&quot;Hello world&quot;) == &quot;Hello&quot;&#10;    assert first_word(&quot; a word &quot;) == &quot;a&quot;&#10;    assert first_word(&quot;don't touch it&quot;) == &quot;don't&quot;&#10;    assert first_word(&quot;greetings, friends&quot;) == &quot;greetings&quot;&#10;    assert first_word(&quot;... and so on ...&quot;) == &quot;and&quot;&#10;    assert first_word(&quot;hi&quot;) == &quot;hi&quot;&#10;    assert first_word(&quot;Hello.World&quot;) == &quot;Hello&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def correct_sentence(text: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns a corrected sentence which starts with a capital letter&#10;        and ends with a dot.&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return text&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(correct_sentence(&quot;greetings, friends&quot;))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert correct_sentence(&quot;greetings, friends&quot;) == &quot;Greetings, friends.&quot;&#10;    assert correct_sentence(&quot;Greetings, friends&quot;) == &quot;Greetings, friends.&quot;&#10;    assert correct_sentence(&quot;Greetings, friends.&quot;) == &quot;Greetings, friends.&quot;&#10;    assert correct_sentence(&quot;hi&quot;) == &quot;Hi.&quot;&#10;    assert correct_sentence(&quot;welcome to New York&quot;) == &quot;Welcome to New York.&quot;&#10;    &#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    For the input of your function, you will be given one sentence. You have to return a corrected version, that starts with a capital letter and ends with a period (dot). &#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;i&gt;Pay attention to the fact that not all of the fixes are necessary. If a sentence already ends with a period (dot), then adding another one will be a mistake.&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A string.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A string.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;correct_sentence(&quot;greetings, friends&quot;) == &quot;Greetings, friends.&quot;&#10;correct_sentence(&quot;Greetings, friends&quot;) == &quot;Greetings, friends.&quot;&#10;correct_sentence(&quot;Greetings, friends.&quot;) == &quot;Greetings, friends.&quot;&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&lt;!-- Here you can explain how it can be used in development and what is usage of this. --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;No leading and trailing spaces, text contains only spaces, a-z A-Z , and .&lt;/i&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="510" />
                      <option name="index" value="16" />
                      <option name="name" value="Correct Sentence" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def correct_sentence(text: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns a corrected sentence which starts with a capital letter&#10;        and ends with a dot.&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return text&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(correct_sentence(&quot;greetings, friends&quot;))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert correct_sentence(&quot;greetings, friends&quot;) == &quot;Greetings, friends.&quot;&#10;    assert correct_sentence(&quot;Greetings, friends&quot;) == &quot;Greetings, friends.&quot;&#10;    assert correct_sentence(&quot;Greetings, friends.&quot;) == &quot;Greetings, friends.&quot;&#10;    assert correct_sentence(&quot;hi&quot;) == &quot;Hi.&quot;&#10;    assert correct_sentence(&quot;welcome to New York&quot;) == &quot;Welcome to New York.&quot;&#10;    &#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def best_stock(data):&#10;    # your code here&#10;    return 'GOOG'&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(best_stock({&#10;        'CAC': 10.0,&#10;        'ATX': 390.2,&#10;        'WIG': 1.2&#10;    }))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert best_stock({&#10;        'CAC': 10.0,&#10;        'ATX': 390.2,&#10;        'WIG': 1.2&#10;    }) == 'ATX', &quot;First&quot;&#10;    assert best_stock({&#10;        'CAC': 91.1,&#10;        'ATX': 1.01,&#10;        'TASI': 120.9&#10;    }) == 'TASI', &quot;Second&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    You are given the current stock prices. You have to find out which stocks cost more. &#10;&lt;/p&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; The dictionary where the market identifier code is a key and the value is a stock price.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A string and the market identifier code. &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;best_stock({&#10;    'CAC': 10.0,&#10;    'ATX': 390.2,&#10;    'WIG': 1.2&#10;}) == 'ATX'&#10;best_stock({&#10;    'CAC': 91.1,&#10;    'ATX': 1.01,&#10;    'TASI': 120.9&#10;}) == 'TASI'&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Preconditions: &lt;/strong&gt; All the prices are unique.&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="516" />
                      <option name="index" value="17" />
                      <option name="name" value="Best Stock" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def best_stock(data):&#10;    # your code here&#10;    return 'GOOG'&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(best_stock({&#10;        'CAC': 10.0,&#10;        'ATX': 390.2,&#10;        'WIG': 1.2&#10;    }))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert best_stock({&#10;        'CAC': 10.0,&#10;        'ATX': 390.2,&#10;        'WIG': 1.2&#10;    }) == 'ATX', &quot;First&quot;&#10;    assert best_stock({&#10;        'CAC': 91.1,&#10;        'ATX': 1.01,&#10;        'TASI': 120.9&#10;    }) == 'TASI', &quot;Second&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def popular_words(text: str, words: list) -&gt; dict:&#13;&#10;    # your code here&#13;&#10;    return None&#13;&#10;&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    print(&quot;Example:&quot;)&#13;&#10;    print(popular_words('''&#13;&#10;When I was One&#13;&#10;I had just begun&#13;&#10;When I was Two&#13;&#10;I was nearly new&#13;&#10;''', ['i', 'was', 'three', 'near']))&#13;&#10;&#13;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#13;&#10;    assert popular_words('''&#13;&#10;When I was One&#13;&#10;I had just begun&#13;&#10;When I was Two&#13;&#10;I was nearly new&#13;&#10;''', ['i', 'was', 'three', 'near']) == {&#13;&#10;        'i': 4,&#13;&#10;        'was': 3,&#13;&#10;        'three': 0,&#13;&#10;        'near': 0&#13;&#10;    }&#13;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    In this mission your task is to determine the popularity of certain words in the text. &#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    At the input of your function are given 2 arguments: the text and the array of words the popularity of which you need to determine. &#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;When solving this task pay attention to the following points:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;The words should be sought in all registers. This means that if you need to find a word &quot;one&quot; then words like &quot;one&quot;, &quot;One&quot;, &quot;oNe&quot;, &quot;ONE&quot; etc. will do.&lt;/li&gt;&#10;    &lt;li&gt;The search words are always indicated in the lowercase.&lt;/li&gt;&#10;    &lt;li&gt;If the word wasn’t found even once, it has to be returned in the dictionary with  0 (zero) value.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; The text and the search words array.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The dictionary where the search words are the keys and values are the number of times when those words are occurring in a given text. &#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;popular_words('''&#10;When I was One&#10;I had just begun&#10;When I was Two&#10;I was nearly new&#10;''', ['i', 'was', 'three', 'near']) == {&#10;    'i': 4,&#10;    'was': 3,&#10;    'three': 0,&#10;    'near': 0&#10;}&#10;&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Here you can explain some constraints for input--&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p&gt;&lt;strong&gt;Precondition&lt;/strong&gt;:&lt;br&gt;&#10;    The input text will consists of English letters in uppercase and lowercase and whitespaces.&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="517" />
                      <option name="index" value="18" />
                      <option name="name" value="Popular Words" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def popular_words(text: str, words: list) -&gt; dict:&#10;    # your code here&#10;    return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(popular_words('''&#10;When I was One&#10;I had just begun&#10;When I was Two&#10;I was nearly new&#10;''', ['i', 'was', 'three', 'near']))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert popular_words('''&#10;When I was One&#10;I had just begun&#10;When I was Two&#10;I was nearly new&#10;''', ['i', 'was', 'three', 'near']) == {&#10;        'i': 4,&#10;        'was': 3,&#10;        'three': 0,&#10;        'near': 0&#10;    }&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def mult_two(a, b):&#10;    # your code here&#10;    return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(mult_two(3, 2))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert mult_two(3, 2) == 6&#10;    assert mult_two(1, 0) == 0&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;i&gt;(at the top right of the mission description there always is a list of available translations)&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;This is an intro mission, the purpose of which is to explain how to solve missions on CheckiO and how to get the most out of solving them. When the mission is solved, one more station become available for you, containing more complex missions.&lt;/p&gt;&#10;&#10;&lt;p&gt;So this mission is the easiest one. Write a function that will receive 2 numbers as input and it should return the multiplication of these 2 numbers.&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two arguments. Both are int&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Int. &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;mult_two(2, 3) == 6&#10;mult_two(1, 0) == 0&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&lt;b&gt;How does it work?:&lt;/b&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;When you start solving the initial code is always consists of an “empty” function (which you need to fill in as the solution) and asserts under this function. You should pay attention to is that your function should return values, and not to print them. &#10;&#10;&#10;That is, use the return command instead of the print function. &lt;a target=&quot;_blank&quot; target=&quot;_blank&quot; href=&quot;https://stackoverflow.com/questions/7129285/what-is-the-purpose-of-the-return-statement&quot;&gt;Check this short explanation.&lt;/a&gt;&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;The asserts after your function you can use in order to check yourself  by pressing the “Run” button (&lt;img style=&quot;height: 31px;vertical-align: bottom;&quot; src=&quot;https://static.checkio.org/media/task/media/02c64951715744de9e54c959e3d98def/btn_run.png&quot; /&gt;). CheckiO also uses several additional tests in order to check your solution when you click the “Check” button (&lt;img style=&quot;height: 31px;vertical-align: bottom;&quot; src=&quot;https://static.checkio.org/media/task/media/02c64951715744de9e54c959e3d98def/btn_check.png&quot; /&gt;).&lt;/p&gt;&#10;&#10;&lt;p&gt;If the solution didn’t pass the internal tests, the right panel will display an error message containing 3 items.&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;b&gt;Fail:&lt;/b&gt; - shows how your function was called.&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;Your Result:&lt;/b&gt; - shows what it returned.&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;Right Result:&lt;/b&gt; - what it should’ve returned.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;To solve the task the “empty” function must be replaced with the following code.&lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;def mult_two(a: int, b: int) -&gt; int:&#10;    return a*b&#10;&lt;/pre&gt;&#10;&#10;&#10;&lt;p&gt;Try to click “Check” button now. &lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;If the solution passes all the tests, the congratulations should appear on the right panel along with a suggestion for the following action. (Yes, this is not the end of the story).&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;b&gt;View other solutions&lt;/b&gt; - when the task is solved, you can access the solutions of other players, which are divided into categories.&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;Publish your solution&lt;/b&gt; - publish your own solution.&lt;/li&gt;&#10;&lt;li&gt;&lt;b&gt;Next Mission&lt;/b&gt; - go to the next mission.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;I’d recommend to go through the solutions of other players before publishing your own.&lt;/p&gt;&#10;&#10;&lt;p&gt;The last but not the least, some tasks at the end have a list of hints for solving. But since in this task we’ve already described how to solve, then in hints we’ll add some interesting facts about CheckiO&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="607" />
                      <option name="index" value="19" />
                      <option name="name" value="Multiply (Intro)" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def mult_two(a, b):&#10;    # your code here&#10;    return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(mult_two(3, 2))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert mult_two(3, 2) == 6&#10;    assert mult_two(1, 0) == 0&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def between_markers(text: str, begin: str, end: str) -&gt; str:&#13;&#10;    &quot;&quot;&quot;&#13;&#10;        returns substring between two given markers&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    # your code here&#13;&#10;    return ''&#13;&#10;&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    print('Example:')&#13;&#10;    print(between_markers('What is &gt;apple&lt;', '&gt;', '&lt;'))&#13;&#10;&#13;&#10;    # These &quot;asserts&quot; are used for self-checking and not for testing&#13;&#10;    assert between_markers('What is &gt;apple&lt;', '&gt;', '&lt;') == &quot;apple&quot;&#13;&#10;    assert between_markers('What is [apple]', '[', ']') == &quot;apple&quot;&#13;&#10;    assert between_markers('What is &gt;&lt;', '&gt;', '&lt;') == &quot;&quot;&#13;&#10;    assert between_markers('&gt;apple&lt;', '&gt;', '&lt;') == &quot;apple&quot;&#13;&#10;    print('Wow, you are doing pretty good. Time to check it!')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    You are given a string and two markers (the initial one and final). You have to find a substring enclosed between these two markers. But there are a few important conditions.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;This is a simplified version of the &lt;a href=&quot;/mission/between-markers/&quot;&gt;Between Markers&lt;/a&gt; mission.&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;&#9;&lt;li&gt;The initial and final markers are always different.&lt;/li&gt;&#10;&#9;&lt;li&gt;The initial and final markers are always 1 char size.&lt;/li&gt;&#10;&#9;&lt;li&gt;The initial and final markers always exist in a string and go one after another.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Three arguments. All of them are strings. The second and third arguments are the initial and final markers.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A string. &#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;between_markers('What is &gt;apple&lt;', '&gt;', '&lt;') == 'apple'&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    &lt;i&gt;For text parsing.&lt;/i&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;There can't be more than one final and one initial markers.&lt;/i&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="627" />
                      <option name="index" value="20" />
                      <option name="name" value="Between Markers (simplified)" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def between_markers(text: str, begin: str, end: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns substring between two given markers&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return ''&#10;&#10;&#10;if __name__ == '__main__':&#10;    print('Example:')&#10;    print(between_markers('What is &gt;apple&lt;', '&gt;', '&lt;'))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for testing&#10;    assert between_markers('What is &gt;apple&lt;', '&gt;', '&lt;') == &quot;apple&quot;&#10;    assert between_markers('What is [apple]', '[', ']') == &quot;apple&quot;&#10;    assert between_markers('What is &gt;&lt;', '&gt;', '&lt;') == &quot;&quot;&#10;    assert between_markers('&gt;apple&lt;', '&gt;', '&lt;') == &quot;apple&quot;&#10;    print('Wow, you are doing pretty good. Time to check it!')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def first_word(text: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns the first word in a given text.&#10;    &quot;&quot;&quot;&#10;    answer=[]&#10;    for i in text:&#10;        if i != &quot; &quot;:&#10;            answer.append(i)&#10;        else:&#10;            break&#10;##    answer = str(answer)&#10;    answer = ''.join(answer)&#10;    return answer&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(first_word(&quot;Hello world&quot;))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert first_word(&quot;Hello world&quot;) == &quot;Hello&quot;&#10;    assert first_word(&quot;a word&quot;) == &quot;a&quot;&#10;    assert first_word(&quot;hi&quot;) == &quot;hi&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    You are given a string where you have to find its first word.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    This is a simplified version of the &lt;a href=&quot;/mission/first-word/&quot;&gt;First Word&lt;/a&gt; mission.&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;Input string consists of only english letters and spaces.&lt;/li&gt;&#10;    &lt;li&gt;There aren’t any spaces at the beginning and the end of the string.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A string.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A string. &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;first_word(&quot;Hello world&quot;) == &quot;Hello&quot;&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&lt;!-- Here you can explain how it can be used in development. --&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    &lt;i&gt;The first word is a command in a command line.&lt;/i&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Here you can explain some constraints for input--&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;Text can contain a-z, A-Z and spaces.&lt;/i&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="628" />
                      <option name="index" value="21" />
                      <option name="name" value="First Word (simplified)" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="212808" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def first_word(text: str) -&gt; str:&#10;    &quot;&quot;&quot;&#10;        returns the first word in a given text.&#10;    &quot;&quot;&quot;&#10;    answer=[]&#10;    for i in text:&#10;        if i != &quot; &quot;:&#10;            answer.append(i)&#10;        else:&#10;            break&#10;##    answer = str(answer)&#10;    answer = ''.join(answer)&#10;    return answer&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(first_word(&quot;Hello world&quot;))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert first_word(&quot;Hello world&quot;) == &quot;Hello&quot;&#10;    assert first_word(&quot;a word&quot;) == &quot;a&quot;&#10;    assert first_word(&quot;hi&quot;) == &quot;hi&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                  </list>
                </option>
              </CheckiOStation>
              <CheckiOStation>
                <option name="customPresentableName" />
                <option name="id" value="4" />
                <option name="index" value="3" />
                <option name="name" value="Electronic Station" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CheckiOMission>
                      <option name="code" value="###&#10;# You are given a matrix of NxN (4≤N≤10).&#10;# You should check if there is a sequence of 4 or more matching digits.&#10;# The sequence may be positioned:&#10;# horizontally, vertically or diagonally(NW-SE or NE-SW diagonals).&#10;###&#10;&#10;def checkio(matrix):&#10;    n = len(matrix[0]) #bredd på första elementet, borde ge höjd och langd.&#10;    vilken_ledd = &quot;none&quot;&#10;    langd = 4 # vilken langd ska serien vara.&#10;    answer = False&#10;# första till sista raden -&gt; line&#10;# skanna line för längsta lika, om fyra -&gt; break&#10;&#10;    #hitta horisontala&#10;    j=i=0&#10;    for j in range(n):&#10;        line=&quot;&quot;&#10;        for i in range(n):&#10;            line=line+str(matrix[j][i])&#10;        antal=long_repeat(line)&#10;##        if antal == langd:&#10;        if antal &gt;= langd:&#10;            answer = True&#10;##            vilken_ledd = &quot;Horizontal&quot;&#10;            break&#10;##        if antal &gt; langd:&#10;##            answer = True&#10;##            vilken_ledd = &quot;Long Horizontal&quot;&#10;            #break&#10;&#10;    #hitta vertikala&#10;    j=i=0&#10;    for j in range(n):&#10;        line=&quot;&quot;&#10;        for i in range(n):&#10;            line=line+str(matrix[i][j])&#10;        antal=long_repeat(line)&#10;        if antal &gt;= langd:&#10;            answer = True&#10;            break&#10;&#10;&#10;&#10;    #hitta diagonala vä-hö o hö-vä&#10;    ##        vä-hö&#10;    rep=2*n-1&#10;    j=i=x=y=0&#10;    for j in range(rep):&#10;        line=&quot;&quot;&#10;        i=rep-j-1&#10;        if j &gt;= n:&#10;            x=n-1&#10;        else:&#10;            x=j&#10;        if i &gt;= n:&#10;            y=n-1&#10;        else:&#10;            y=i&#10;        diagonal=x+y-2&#10;        for k in range(x+y-2):&#10;            line=line+str(matrix[x-k][y-k])&#10;            cordx=x-k&#10;            cordy=y-k&#10;            apa=0&#10;&#10;        antal=long_repeat(line)&#10;        if antal &gt;= langd:&#10;            answer = True&#10;            break&#10;&#10;&#10;    ##        hö-vä&#10;    rep=2*n-1&#10;    j=i=x=y=0&#10;    for j in range(rep):&#10;        line=&quot;&quot;&#10;        i=rep-j-1&#10;        if j &gt;= n:&#10;            x=n-1&#10;        else:&#10;            x=j&#10;        if j &gt;= n:&#10;            y=n-i-1&#10;        else:&#10;            y=0&#10;        diagonal=x-y+1&#10;##        print(&quot;\n&quot;)&#10;        for k in range(x-y+1):&#10;            cordx=x-k&#10;            cordy=y+k&#10;##            print(&quot;x:&quot; + str(cordx) + &quot; y:&quot; + str(cordy) + &quot;  :&quot; + str(diagonal))&#10;            line=line+str(matrix[x-k][y+k])&#10;            apa=0&#10;&#10;        antal=long_repeat(line)&#10;        if antal &gt;= langd:&#10;            answer = True&#10;            break&#10;&#10;&#10;&#10;&#10;    return answer&#10;&#10;def long_repeat(line):&#10;    #returnera langden på den med flest lika.&#10;    x=0&#10;    lista=[0]&#10;    tmp=len(line)&#10;    for i in range(len(line)):&#10;        p=line[i]&#10;        if i+1 &lt; len(line):&#10;            r=line[i+1]&#10;        else:&#10;            r=&quot;§&quot;&#10;        x=x+1&#10;#        if line[i] != line[i+1]:&#10;        if line[i] != r:&#10;            lista.append(x)&#10;            x=0&#10;    lista.sort(reverse=True)&#10;    return lista[0]&#10;&#10;def hitta_längsta(data):&#10;    x = 0&#10;    return x&#10;&#10;&#10;def fyll_matris(data, matrisen):&#10;##    for i in range&#10;&#10;    return matrisen&#10;&#10;def bygg_matrisen(data, n):&#10;#    n = len(data[0]) #bredd på första elementet&#10;    matrisen = [[0] * n for i in range(n)]&#10;&#10;    return matrisen&#10;&#10;def skriv_ut_matris(data):&#10;&#10;    for row in data:&#10;        print(' '.join([str(elem) for elem in row]))&#10;&#10;    return&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio([&#10;        [1, 1, 1, 1],&#10;        [4, 1, 4, 1],&#10;        [1, 3, 1, 6],&#10;        [1, 7, 2, 5]&#10;    ]) == True, &quot;Horizontal 1&quot;&#10;    assert checkio([&#10;        [4, 1, 4, 1],&#10;        [1, 1, 1, 1],&#10;        [1, 3, 1, 6],&#10;        [1, 7, 2, 5]&#10;    ]) == True, &quot;Horizontal 2&quot;&#10;    assert checkio([&#10;        [1, 2, 1, 1],&#10;        [1, 1, 4, 1],&#10;        [1, 3, 1, 6],&#10;        [1, 7, 2, 5]&#10;    ]) == True, &quot;Vertical 1&quot;&#10;    assert checkio([&#10;        [2, 1, 1, 1],&#10;        [1, 1, 4, 1],&#10;        [3, 1, 1, 6],&#10;        [7, 1, 2, 5]&#10;    ]) == True, &quot;Vertical 2&quot;&#10;    assert checkio([&#10;        [7, 1, 4, 1],&#10;        [1, 2, 5, 2],&#10;        [3, 4, 1, 3],&#10;        [1, 1, 8, 1]&#10;    ]) == False, &quot;Nothing here&quot;&#10;    assert checkio([&#10;        [2, 1, 1, 6, 1],&#10;        [1, 3, 2, 1, 1],&#10;        [4, 1, 1, 3, 1],&#10;        [5, 5, 5, 5, 5],&#10;        [1, 1, 3, 1, 1]&#10;    ]) == True, &quot;Long Horizontal&quot;&#10;    assert checkio([&#10;        [7, 1, 1, 8, 1, 1],&#10;        [1, 1, 7, 3, 1, 5],&#10;        [2, 3, 1, 2, 5, 1],&#10;        [1, 1, 1, 5, 1, 4],&#10;        [4, 6, 5, 1, 3, 1],&#10;        [1, 1, 9, 1, 2, 1]&#10;    ]) == True, &quot;Diagonal&quot;&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;story&quot;&gt;&#10;    &lt;p&gt;“There’s nothing here...” sighed Nikola.&lt;/p&gt;&#10;&#10;    &lt;p&gt;“You’re kidding right? All treasure is buried treasure! It wouldn’t be treasure otherwise!” Said&#10;&#10;    &lt;p&gt;Sofia. “Here, take these.” She produced three shovels from a backpack that seemed to appear out of thin air.&lt;/p&gt;&#10;&#10;    &lt;p&gt;“Where did you get-”&lt;/p&gt;&#10;&#10;    &lt;p&gt;“Don’t ask questions. Just dig!” She hopped on the shovel and began digging furiously.&lt;/p&gt;&#10;&#10;    &lt;p&gt;CLUNK&lt;/p&gt;&#10;&#10;    &lt;p&gt;“Hey we hit something.” Stephen exclaimed in surprise.&lt;/p&gt;&#10;&#10;    &lt;p&gt;“It’s the treasure!” Sofia was jumping up and down in excitement.&lt;/p&gt;&#10;&#10;    &lt;p&gt;The trio dug around the treasure chest and pulled it out of the hole and wiped the dirt off. Sofia tried grabbing&#10;        the lid but it was locked. Nikola studied the locking mechanism.&lt;/p&gt;&#10;&#10;    &lt;p&gt;“I’ve seen this type of lock before. It’s pretty simple. We just need to check whether there is a sequence of 4&#10;        or more matching numbers and output a bool.”&lt;/p&gt;&#10;&#10;    &lt;p&gt;“Easy enough. Let’s open this sucker up!” Sofia was shaking in excitement.&lt;/p&gt;&#10;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    You are given a matrix of NxN (4&amp;le;N&amp;le;10).&#10;    You should check if there is a sequence of 4 or more matching digits.&#10;    The sequence may be positioned horizontally, vertically or diagonally (NW-SE or NE-SW diagonals).&#10;&lt;/p&gt;&#10;&lt;img class=&quot;for_info_only&quot;&#10;     title=&quot;find-sequence&quot;&#10;     src=&quot;https://static.checkio.org/media/task/media/063e2dfa5ebd43ab9bc3c79fe62d4437/find-sequence.png&quot;&#10;     alt=&quot;find-sequence&quot;&#10;     width=&quot;600px&quot;/&gt;&#10;&lt;img class=&quot;for_editor_only&quot;&#10;     title=&quot;find-sequence&quot;&#10;     src=&quot;https://static.checkio.org/media/task/media/063e2dfa5ebd43ab9bc3c79fe62d4437/find-sequence.png&quot;&#10;     alt=&quot;find-sequence&quot;&#10;     width=&quot;380px&quot;/&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Input: &lt;/strong&gt; A matrix as a list of lists with integers.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt;Whether or not a sequence exists as a boolean.&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;checkio([&#10;    [1, 2, 1, 1],&#10;    [1, 1, 4, 1],&#10;    [1, 3, 1, 6],&#10;    [1, 7, 2, 5]&#10;]) == True&#10;checkio([&#10;    [7, 1, 4, 1],&#10;    [1, 2, 5, 2],&#10;    [3, 4, 1, 3],&#10;    [1, 1, 8, 1]&#10;]) == False&#10;checkio([&#10;    [2, 1, 1, 6, 1],&#10;    [1, 3, 2, 1, 1],&#10;    [4, 1, 1, 3, 1],&#10;    [5, 5, 5, 5, 5],&#10;    [1, 1, 3, 1, 1]&#10;]) == True&#10;checkio([&#10;    [7, 1, 1, 8, 1, 1],&#10;    [1, 1, 7, 3, 1, 5],&#10;    [2, 3, 1, 2, 5, 1],&#10;    [1, 1, 1, 5, 1, 4],&#10;    [4, 6, 5, 1, 3, 1],&#10;    [1, 1, 9, 1, 2, 1]&#10;    ]) == True&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This concept is useful for games where you need to detect various lines of the same elements (match 3 games for&#10;    example).&#10;    This algorithm can be used for basic pattern recognition.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&lt;br&gt;&#10;    0 &amp;le; len(matrix) &amp;le; 10&lt;br&gt;&#10;    all(all(0 &amp;lt; x &amp;lt; 10 for x in row) for row in matrix)&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="21" />
                      <option name="index" value="1" />
                      <option name="name" value="Find Sequence" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="2" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="###&#10;# You are given a matrix of NxN (4≤N≤10).&#10;# You should check if there is a sequence of 4 or more matching digits.&#10;# The sequence may be positioned:&#10;# horizontally, vertically or diagonally(NW-SE or NE-SW diagonals).&#10;###&#10;&#10;def checkio(matrix):&#10;    n = len(matrix[0]) #bredd på första elementet, borde ge höjd och langd.&#10;    vilken_ledd = &quot;none&quot;&#10;    langd = 4 # vilken langd ska serien vara.&#10;    answer = False&#10;# första till sista raden -&gt; line&#10;# skanna line för längsta lika, om fyra -&gt; break&#10;&#10;    #hitta horisontala&#10;    j=i=0&#10;    for j in range(n):&#10;        line=&quot;&quot;&#10;        for i in range(n):&#10;            line=line+str(matrix[j][i])&#10;        antal=long_repeat(line)&#10;##        if antal == langd:&#10;        if antal &gt;= langd:&#10;            answer = True&#10;##            vilken_ledd = &quot;Horizontal&quot;&#10;            break&#10;##        if antal &gt; langd:&#10;##            answer = True&#10;##            vilken_ledd = &quot;Long Horizontal&quot;&#10;            #break&#10;&#10;    #hitta vertikala&#10;    j=i=0&#10;    for j in range(n):&#10;        line=&quot;&quot;&#10;        for i in range(n):&#10;            line=line+str(matrix[i][j])&#10;        antal=long_repeat(line)&#10;        if antal &gt;= langd:&#10;            answer = True&#10;            break&#10;&#10;&#10;&#10;    #hitta diagonala vä-hö o hö-vä&#10;    ##        vä-hö&#10;    rep=2*n-1&#10;    j=i=x=y=0&#10;    for j in range(rep):&#10;        line=&quot;&quot;&#10;        i=rep-j-1&#10;        if j &gt;= n:&#10;            x=n-1&#10;        else:&#10;            x=j&#10;        if i &gt;= n:&#10;            y=n-1&#10;        else:&#10;            y=i&#10;        diagonal=x+y-2&#10;        for k in range(x+y-2):&#10;            line=line+str(matrix[x-k][y-k])&#10;            cordx=x-k&#10;            cordy=y-k&#10;            apa=0&#10;&#10;        antal=long_repeat(line)&#10;        if antal &gt;= langd:&#10;            answer = True&#10;            break&#10;&#10;&#10;    ##        hö-vä&#10;    rep=2*n-1&#10;    j=i=x=y=0&#10;    for j in range(rep):&#10;        line=&quot;&quot;&#10;        i=rep-j-1&#10;        if j &gt;= n:&#10;            x=n-1&#10;        else:&#10;            x=j&#10;        if j &gt;= n:&#10;            y=n-i-1&#10;        else:&#10;            y=0&#10;        diagonal=x-y+1&#10;##        print(&quot;\n&quot;)&#10;        for k in range(x-y+1):&#10;            cordx=x-k&#10;            cordy=y+k&#10;##            print(&quot;x:&quot; + str(cordx) + &quot; y:&quot; + str(cordy) + &quot;  :&quot; + str(diagonal))&#10;            line=line+str(matrix[x-k][y+k])&#10;            apa=0&#10;&#10;        antal=long_repeat(line)&#10;        if antal &gt;= langd:&#10;            answer = True&#10;            break&#10;&#10;&#10;&#10;&#10;    return answer&#10;&#10;def long_repeat(line):&#10;    #returnera langden på den med flest lika.&#10;    x=0&#10;    lista=[0]&#10;    tmp=len(line)&#10;    for i in range(len(line)):&#10;        p=line[i]&#10;        if i+1 &lt; len(line):&#10;            r=line[i+1]&#10;        else:&#10;            r=&quot;§&quot;&#10;        x=x+1&#10;#        if line[i] != line[i+1]:&#10;        if line[i] != r:&#10;            lista.append(x)&#10;            x=0&#10;    lista.sort(reverse=True)&#10;    return lista[0]&#10;&#10;def hitta_längsta(data):&#10;    x = 0&#10;    return x&#10;&#10;&#10;def fyll_matris(data, matrisen):&#10;##    for i in range&#10;&#10;    return matrisen&#10;&#10;def bygg_matrisen(data, n):&#10;#    n = len(data[0]) #bredd på första elementet&#10;    matrisen = [[0] * n for i in range(n)]&#10;&#10;    return matrisen&#10;&#10;def skriv_ut_matris(data):&#10;&#10;    for row in data:&#10;        print(' '.join([str(elem) for elem in row]))&#10;&#10;    return&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio([&#10;        [1, 1, 1, 1],&#10;        [4, 1, 4, 1],&#10;        [1, 3, 1, 6],&#10;        [1, 7, 2, 5]&#10;    ]) == True, &quot;Horizontal 1&quot;&#10;    assert checkio([&#10;        [4, 1, 4, 1],&#10;        [1, 1, 1, 1],&#10;        [1, 3, 1, 6],&#10;        [1, 7, 2, 5]&#10;    ]) == True, &quot;Horizontal 2&quot;&#10;    assert checkio([&#10;        [1, 2, 1, 1],&#10;        [1, 1, 4, 1],&#10;        [1, 3, 1, 6],&#10;        [1, 7, 2, 5]&#10;    ]) == True, &quot;Vertical 1&quot;&#10;    assert checkio([&#10;        [2, 1, 1, 1],&#10;        [1, 1, 4, 1],&#10;        [3, 1, 1, 6],&#10;        [7, 1, 2, 5]&#10;    ]) == True, &quot;Vertical 2&quot;&#10;    assert checkio([&#10;        [7, 1, 4, 1],&#10;        [1, 2, 5, 2],&#10;        [3, 4, 1, 3],&#10;        [1, 1, 8, 1]&#10;    ]) == False, &quot;Nothing here&quot;&#10;    assert checkio([&#10;        [2, 1, 1, 6, 1],&#10;        [1, 3, 2, 1, 1],&#10;        [4, 1, 1, 3, 1],&#10;        [5, 5, 5, 5, 5],&#10;        [1, 1, 3, 1, 1]&#10;    ]) == True, &quot;Long Horizontal&quot;&#10;    assert checkio([&#10;        [7, 1, 1, 8, 1, 1],&#10;        [1, 1, 7, 3, 1, 5],&#10;        [2, 3, 1, 2, 5, 1],&#10;        [1, 1, 1, 5, 1, 4],&#10;        [4, 6, 5, 1, 3, 1],&#10;        [1, 1, 9, 1, 2, 1]&#10;    ]) == True, &quot;Diagonal&quot;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="FIRST_TEN = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;, &quot;seven&quot;,&#13;&#10;             &quot;eight&quot;, &quot;nine&quot;]&#13;&#10;SECOND_TEN = [&quot;ten&quot;, &quot;eleven&quot;, &quot;twelve&quot;, &quot;thirteen&quot;, &quot;fourteen&quot;, &quot;fifteen&quot;,&#13;&#10;              &quot;sixteen&quot;, &quot;seventeen&quot;, &quot;eighteen&quot;, &quot;nineteen&quot;]&#13;&#10;OTHER_TENS = [&quot;twenty&quot;, &quot;thirty&quot;, &quot;forty&quot;, &quot;fifty&quot;, &quot;sixty&quot;, &quot;seventy&quot;,&#13;&#10;              &quot;eighty&quot;, &quot;ninety&quot;]&#13;&#10;HUNDRED = &quot;hundred&quot;&#13;&#10;&#13;&#10;&#13;&#10;def checkio(number):&#13;&#10;&#13;&#10;    #replace this for solution&#13;&#10;    return 'string representation of n'&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert checkio(4) == 'four', &quot;1st example&quot;&#13;&#10;    assert checkio(133) == 'one hundred thirty three', &quot;2nd example&quot;&#13;&#10;    assert checkio(12) == 'twelve', &quot;3rd example&quot;&#13;&#10;    assert checkio(101) == 'one hundred one', &quot;4th example&quot;&#13;&#10;    assert checkio(212) == 'two hundred twelve', &quot;5th example&quot;&#13;&#10;    assert checkio(40) == 'forty', &quot;6th example&quot;&#13;&#10;    assert not checkio(212).endswith(' '), &quot;Don't forget strip whitespaces at the end of string&quot;&#13;&#10;    print('Done! Go and Check it!')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&#10;&lt;p&gt;&#10;    Stephen's speech module is broken.&#10;    This module is responsible for his number pronunciation.&#10;    He has to click to input all of the numerical digits in a figure,&#10;    so when there are big numbers it can take him a long time.&#10;    Help the robot to speak properly and increase his number processing speed by writing a new speech module for him.&#10;    All the words in the string must be separated by exactly one space character.&#10;    Be careful with spaces -- it's hard to see if you place two spaces instead one.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;p&gt;&lt;strong&gt;Input: &lt;/strong&gt;A number as an integer.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt;The string representation of the number as a string.&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;checkio(4)=='four'&#10;checkio(143)=='one hundred forty three'&#10;checkio(12)=='twelve'&#10;checkio(101)=='one hundred one'&#10;checkio(212)=='two hundred twelve'&#10;checkio(40)=='forty'&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This concept may be useful for the speech synthesis software or automatic reports systems.&#10;    This system can also be used when writing a chatbot by assigning words or phrases numerical&#10;    values and having a system retrieve responses based on those values.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Precondition: &lt;/strong&gt;0 &amp;lt; number &amp;lt; 1000&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="30" />
                      <option name="index" value="2" />
                      <option name="name" value="Speech Module" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="FIRST_TEN = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;, &quot;seven&quot;,&#10;             &quot;eight&quot;, &quot;nine&quot;]&#10;SECOND_TEN = [&quot;ten&quot;, &quot;eleven&quot;, &quot;twelve&quot;, &quot;thirteen&quot;, &quot;fourteen&quot;, &quot;fifteen&quot;,&#10;              &quot;sixteen&quot;, &quot;seventeen&quot;, &quot;eighteen&quot;, &quot;nineteen&quot;]&#10;OTHER_TENS = [&quot;twenty&quot;, &quot;thirty&quot;, &quot;forty&quot;, &quot;fifty&quot;, &quot;sixty&quot;, &quot;seventy&quot;,&#10;              &quot;eighty&quot;, &quot;ninety&quot;]&#10;HUNDRED = &quot;hundred&quot;&#10;&#10;&#10;def checkio(number):&#10;&#10;    #replace this for solution&#10;    return 'string representation of n'&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio(4) == 'four', &quot;1st example&quot;&#10;    assert checkio(133) == 'one hundred thirty three', &quot;2nd example&quot;&#10;    assert checkio(12) == 'twelve', &quot;3rd example&quot;&#10;    assert checkio(101) == 'one hundred one', &quot;4th example&quot;&#10;    assert checkio(212) == 'two hundred twelve', &quot;5th example&quot;&#10;    assert checkio(40) == 'forty', &quot;6th example&quot;&#10;    assert not checkio(212).endswith(' '), &quot;Don't forget strip whitespaces at the end of string&quot;&#10;    print('Done! Go and Check it!')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def checkio(data):&#10;&#10;    #replace this for solution&#10;    return &quot;&quot;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio(6) == 'VI', '6'&#10;    assert checkio(76) == 'LXXVI', '76'&#10;    assert checkio(499) == 'CDXCIX', '499'&#10;    assert checkio(3888) == 'MMMDCCCLXXXVIII', '3888'&#10;    print('Done! Go Check!')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;style&gt;&#10;  .numeral-table {&#10;    margin: auto;&#10;    border-collapse: collapse;&#10;    text-align: center;&#10;  }&#10;  .numeral-table * {&#10;    border: 1px solid black;&#10;    padding: 8px;&#10;    width: 50%;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/1a7102cd1f02485d95579b686540dec8/title.png&quot; style=&quot;max-height: 350px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&#10;&lt;p&gt;&#10;  Roman numerals come from the ancient Roman numbering system.&#10;  They are based on specific letters of the alphabet which are combined to signify the sum&#10;  (or, in some cases, the difference) of their values. The first ten Roman&#10;  numerals are:&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;I, II, III, IV, V, VI, VII, VIII, IX, and X.&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;  The Roman numeral system is decimal based but not directly positional and does not&#10;  include a zero. Roman numerals are based on combinations of these seven symbols:&#10;&lt;/p&gt;&#10;&#10;&lt;table class=&quot;numeral-table&quot;&gt;&#10;  &lt;tr&gt;&lt;th&gt;Numeral&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;&#10;  &lt;tr&gt;&lt;td&gt;I&lt;/td&gt;&lt;td&gt;1 (unus)&lt;/td&gt;&lt;/tr&gt;&#10;  &lt;tr&gt;&lt;td&gt;V&lt;/td&gt;&lt;td&gt;5 (quinque)&lt;/td&gt;&lt;/tr&gt;&#10;  &lt;tr&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;10 (decem)&lt;/td&gt;&lt;/tr&gt;&#10;  &lt;tr&gt;&lt;td&gt;L&lt;/td&gt;&lt;td&gt;50 (quinquaginta)&lt;/td&gt;&lt;/tr&gt;&#10;  &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;100 (centum)&lt;/td&gt;&lt;/tr&gt;&#10;  &lt;tr&gt;&lt;td&gt;D&lt;/td&gt;&lt;td&gt;500 (quingenti)&lt;/td&gt;&lt;/tr&gt;&#10;  &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;1,000 (mille)&lt;/td&gt;&lt;/tr&gt;&#10;&lt;/table&gt;&#10;&#10;&lt;p&gt;More additional information about roman numerals can be found on&#10;  &lt;a href=&quot;http://en.wikipedia.org/wiki/Roman_numerals&quot;&#10;  target=&quot;_blank&quot;&gt;the Wikipedia article.&lt;/a&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;For this task, you should return a roman numeral using the specified integer value ranging from 1 to 3999.&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;  &lt;strong&gt;Input: &lt;/strong&gt; A number as an integer.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;  &lt;strong&gt;Output: &lt;/strong&gt; The Roman numeral as a string.&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;  &lt;p&gt;&#10;    &lt;strong&gt;Example:&lt;/strong&gt;&#10;  &lt;/p&gt;&#10;&#10;  &lt;pre class=&quot;brush: python&quot;&gt;checkio(6) == 'VI'&#10;checkio(76) == 'LXXVI'&#10;checkio(13) == 'XIII'&#10;checkio(44) == 'XLIV'&#10;checkio(3999) == 'MMMCMXCIX'&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;  &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;  This is an educational task that allows you to explore different numbering systems.&#10;  Since roman numerals are often used in the typography,&#10;  it can alternatively be used for text generation.&#10;  The year of construction on building faces and cornerstones is most often written by Roman numerals.&#10;  These numerals have many other uses in the modern world and you read about it&#10;  &lt;a href=&quot;http://en.wikipedia.org/wiki/Roman_numerals#Modern_use&quot;&gt;here...&lt;/a&gt;&#10;  Or maybe you will have a customer from Ancient Rome ;-)&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt; 0 &amp;lt; number &amp;lt; 4000&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="95" />
                      <option name="index" value="3" />
                      <option name="name" value="Roman Numerals" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(data):&#10;&#10;    #replace this for solution&#10;    return &quot;&quot;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio(6) == 'VI', '6'&#10;    assert checkio(76) == 'LXXVI', '76'&#10;    assert checkio(499) == 'CDXCIX', '499'&#10;    assert checkio(3888) == 'MMMDCCCLXXXVIII', '3888'&#10;    print('Done! Go Check!')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def probability(dice_number, sides, target):&#13;&#10;    return 0.0&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These are only used for self-checking and are not necessary for auto-testing&#13;&#10;    def almost_equal(checked, correct, significant_digits=4):&#13;&#10;        precision = 0.1 ** significant_digits&#13;&#10;        return correct - precision &lt; checked &lt; correct + precision&#13;&#10;        &#13;&#10;    assert(almost_equal(probability(2, 6, 3), 0.0556)), &quot;Basic example&quot;&#13;&#10;    assert(almost_equal(probability(2, 6, 4), 0.0833)), &quot;More points&quot;&#13;&#10;    assert(almost_equal(probability(2, 6, 7), 0.1667)), &quot;Maximum for two 6-sided dice&quot;&#13;&#10;    assert(almost_equal(probability(2, 3, 5), 0.2222)), &quot;Small dice&quot;&#13;&#10;    assert(almost_equal(probability(2, 3, 7), 0.0000)), &quot;Never!&quot;&#13;&#10;    assert(almost_equal(probability(3, 6, 7), 0.0694)), &quot;Three dice&quot;&#13;&#10;    assert(almost_equal(probability(10, 10, 50), 0.0375)), &quot;Many dice, many sides&quot;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    You're on your way to a board game convention.&#10;    Chances are there’ll be some stiff competition,&#10;    so you decide to learn more about dice probabilities since you suspect you'll be rolling a lot of them soon.&#10;&lt;/p&gt;&#10;    &#10;&lt;p&gt;&#10;    Typically, when using multiple dice, you simply roll them and sum up all the result.&#10;    To get started with your investigation of dice probability, write a function that takes the number of dice,&#10;    the number of sides per die and a target number and&#10;    returns the probability of getting a total roll of exactly the target value.&#10;    The result should be given with four digits precision as &amp;plusmn;0.0001.&#10;    For example, if you roll 2 six-sided dice, the probability of getting exactly a 3 is 2/36 or 5.56%,&#10;    which you should return as &amp;asymp;0.0556.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img class=&quot;for_info_only&quot;&#10;         title=&quot;distribution&quot;&#10;         src=&quot;https://static.checkio.org/media/task/media/76109b57413e4ecca03a5370e3bcad8d/distribution.png&quot;&#10;         alt=&quot;distribution&quot;&#10;         width=&quot;600px&quot;/&gt;&#10;    &lt;img class=&quot;for_editor_only&quot;&#10;         title=&quot;distribution&quot;&#10;         src=&quot;https://static.checkio.org/media/task/media/76109b57413e4ecca03a5370e3bcad8d/distribution.png&quot;&#10;         alt=&quot;distribution&quot;&#10;         width=&quot;380px&quot;/&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    For each test, assume all the dice are the same and are numbered from 1 to the number of sides, inclusive.&#10;    So a 4-sided die (D4)  would have an equal chance of rolling a 1, 2, 3 or 4.&#10;    A 20-sided die (D20) would have an equal chance of rolling any number from 1 to 20.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Tips:&lt;/strong&gt; Be careful if you want to use a brute-force solution -- you could have a very, very long wait for edge cases.&#10;        &lt;/p&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input:&lt;/strong&gt;&#10;    Three arguments. The number of dice, the number of sides per die and the target number as integers.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output:&lt;/strong&gt; &#10;    The probability of getting exactly target number on a single roll of the given dice as a float.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Example:&lt;/strong&gt;&#10;&lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;probability(2, 6, 3) == 0.0556  # 2 six-sided dice have a 5.56% chance of totalling 3&#10;probability(2, 6, 4) == 0.0833&#10;probability(2, 6, 7) == 0.1667&#10;probability(2, 3, 5) == 0.2222  # 2 three-sided dice have a 22.22% chance of totalling 5&#10;probability(2, 3, 7) == 0       # The maximum you can roll on 2 three-sided dice is 6&#10;probability(3, 6, 7) == 0.0694&#10;probability(10, 10, 50) == 0.0375&#10;&lt;/pre&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used:&lt;/strong&gt;&#10;        This task illustrates some of the basics of probability.&#10;        Many events can be described as the combination of other events.&#10;        In this case you're combining several dice into one total to crit the Orc King for massive damage.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Preconditions:&lt;/strong&gt;&lt;br/&gt;&#10;    1 &amp;le; &lt;strong&gt;dice_number&lt;/strong&gt; &amp;le; 10&lt;br/&gt;&#10;    2 &amp;le; &lt;strong&gt;sides&lt;/strong&gt; &amp;le; 20&lt;br/&gt;&#10;    0 &amp;le; &lt;strong&gt;target&lt;/strong&gt; &amp;lt; 1000&#10;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="300" />
                      <option name="index" value="4" />
                      <option name="name" value="Probably Dice" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def probability(dice_number, sides, target):&#10;    return 0.0&#10;&#10;if __name__ == '__main__':&#10;    #These are only used for self-checking and are not necessary for auto-testing&#10;    def almost_equal(checked, correct, significant_digits=4):&#10;        precision = 0.1 ** significant_digits&#10;        return correct - precision &lt; checked &lt; correct + precision&#10;        &#10;    assert(almost_equal(probability(2, 6, 3), 0.0556)), &quot;Basic example&quot;&#10;    assert(almost_equal(probability(2, 6, 4), 0.0833)), &quot;More points&quot;&#10;    assert(almost_equal(probability(2, 6, 7), 0.1667)), &quot;Maximum for two 6-sided dice&quot;&#10;    assert(almost_equal(probability(2, 3, 5), 0.2222)), &quot;Small dice&quot;&#10;    assert(almost_equal(probability(2, 3, 7), 0.0000)), &quot;Never!&quot;&#10;    assert(almost_equal(probability(3, 6, 7), 0.0694)), &quot;Three dice&quot;&#10;    assert(almost_equal(probability(10, 10, 50), 0.0375)), &quot;Many dice, many sides&quot;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def reverse_roman(roman_string):&#13;&#10;&#13;&#10;    #replace this for solution&#13;&#10;    return 0&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert reverse_roman('VI') == 6, '6'&#13;&#10;    assert reverse_roman('LXXVI') == 76, '76'&#13;&#10;    assert reverse_roman('CDXCIX') == 499, '499'&#13;&#10;    assert reverse_roman('MMMDCCCLXXXVIII') == 3888, '3888'&#13;&#10;    print('Great! It is time to Check your code!');" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;style&gt;&#10;  .numeral-table {&#10;    margin: auto;&#10;    border-collapse: collapse;&#10;    text-align: center;&#10;  }&#10;  .numeral-table * {&#10;    border: 1px solid black;&#10;    padding: 8px;&#10;    width: 50%;&#10;  }&#10;&lt;/style&gt;&#10;&#10;&lt;div style=&quot;text-align: center&quot;&gt;&#10;  &lt;img src=&quot;https://static.checkio.org/media/task/media/3266ec9c50344b9c8f09b063c2558c26/title.png&quot; style=&quot;max-height: 350px; max-width: 100%&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;  &lt;i&gt;&#10;    In the CheckiO mission&#10;    &lt;a href=&quot;/mission/roman-numerals/&quot;&gt;Roman Numerals&lt;/a&gt; you have to convert a decimal&#10;    number into its representation as a roman number.&lt;br&gt;&#10;    Here you have to do the same but the other way around.&#10;  &lt;/i&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;You are given a Roman number as a string and your job is to convert this number into&#10;  its decimal representation.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;  A valid Roman number, in the context of this mission, will only&#10;  contain Roman numerals as per the below table &lt;strong&gt;and&lt;/strong&gt; follow the rules of&#10;  the subtractive notation.&lt;br&gt;&#10;  Check this&#10;  &lt;a href=&quot;https://en.wikipedia.org/wiki/Roman_numerals#Roman_numeric_system&quot; target=&quot;_blank&quot;&gt;&#10;    Wikipedia article&#10;  &lt;/a&gt;&#10;  out for more details on how to form Roman numerals.&#10;&#10;  &lt;table class=&quot;numeral-table&quot;&gt;&#10;    &lt;tr&gt;&lt;th&gt;Numeral&lt;/th&gt;&lt;th&gt;Value&lt;/th&gt;&lt;/tr&gt;&#10;    &lt;tr&gt;&lt;td&gt;I&lt;/td&gt;&lt;td&gt;1 (unus)&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;tr&gt;&lt;td&gt;V&lt;/td&gt;&lt;td&gt;5 (quinque)&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;tr&gt;&lt;td&gt;X&lt;/td&gt;&lt;td&gt;10 (decem)&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;tr&gt;&lt;td&gt;L&lt;/td&gt;&lt;td&gt;50 (quinquaginta)&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;100 (centum)&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;tr&gt;&lt;td&gt;D&lt;/td&gt;&lt;td&gt;500 (quingenti)&lt;/td&gt;&lt;/tr&gt;&#10;    &lt;tr&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;1,000 (mille)&lt;/td&gt;&lt;/tr&gt;&#10;&lt;/table&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;  &lt;strong&gt;Input:&lt;/strong&gt; A roman number as a string.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;  &lt;strong&gt;Output:&lt;/strong&gt; The decimal representation of the roman number as an int.&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;  &lt;p&gt;&#10;    &lt;strong&gt;Example:&lt;/strong&gt;&#10;  &lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;reverse_roman('VI') == 6&#10;reverse_roman('LXXVI') == 76&#10;reverse_roman('CDXCIX') == 499&#10;reverse_roman('MMMDCCCLXXXVIII') == 3888&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;  &lt;strong&gt;Precondition:&lt;/strong&gt;&lt;br&gt;&#10;  len(roman_string) &gt; 0&lt;br&gt;&#10;  all(char in &quot;MDCLXVI&quot; for char in roman_string) == True&lt;br&gt;&#10;  0 &amp;lt; reverse_roman(roman_string) &amp;lt; 4000&lt;br&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="486" />
                      <option name="index" value="5" />
                      <option name="name" value="Reverse Roman Numerals" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def reverse_roman(roman_string):&#10;&#10;    #replace this for solution&#10;    return 0&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert reverse_roman('VI') == 6, '6'&#10;    assert reverse_roman('LXXVI') == 76, '76'&#10;    assert reverse_roman('CDXCIX') == 499, '499'&#10;    assert reverse_roman('MMMDCCCLXXXVIII') == 3888, '3888'&#10;    print('Great! It is time to Check your code!');" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def time_converter(time):&#13;&#10;    #replace this for solution&#13;&#10;    return time&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    print(&quot;Example:&quot;)&#13;&#10;    print(time_converter('12:30 p.m.'))&#13;&#10;&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert time_converter('12:30 p.m.') == '12:30'&#13;&#10;    assert time_converter('9:00 a.m.') == '09:00'&#13;&#10;    assert time_converter('11:15 p.m.') == '23:15'&#13;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    You are the modern man who prefers the 24-hour time format. But the 12-hour format is used in some places. Your task is to convert the time from the 12-h format into 24-h by following the next rules:&lt;br&gt;&#10;- the output format should be 'hh:mm'&lt;br&gt;&#10;- if the output hour is less than 10 - write '0' before it. For example: '09:05'&lt;br&gt;&#10;&#10;Here you can find some useful information about the &lt;a href='https://en.wikipedia.org/wiki/12-hour_clock'&gt;12-hour format&lt;/a&gt;.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img  title=&quot;Time&quot; src=&quot;https://static.checkio.org/media/task/media/dcd11931c5b64a0ebbb6887074c3ac86/time.png&quot; alt=&quot;example&quot; style=&quot;max-height: 220px&quot;/&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Time in a 12-hour format (as a string).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Time in a 24-hour format (as a string).&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;&lt;p&gt;&#10;&lt;strong&gt;Example:&lt;/strong&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;time_converter('12:30 p.m.') == '12:30'&#10;time_converter('9:00 a.m.') == '09:00'&#10;time_converter('11:15 p.m.') == '23:15'&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Here you can explain how it can be used in development and what is usage of this. --&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    For work with the different time formats.&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Here you can explain some constraints for input--&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p&gt;&lt;strong&gt;Precondition&lt;/strong&gt;:&lt;br&gt;&#10;    '00:00' &lt;= time &lt;= '23:59'&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="547" />
                      <option name="index" value="6" />
                      <option name="name" value="Time Converter (12h to 24h)" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def time_converter(time):&#10;    #replace this for solution&#10;    return time&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(time_converter('12:30 p.m.'))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert time_converter('12:30 p.m.') == '12:30'&#10;    assert time_converter('9:00 a.m.') == '09:00'&#10;    assert time_converter('11:15 p.m.') == '23:15'&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="class Lamp:&#13;&#10;    pass&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;&#13;&#10;    lamp_1 = Lamp()&#13;&#10;    lamp_2 = Lamp()&#13;&#10;&#13;&#10;    lamp_1.light() #Green&#13;&#10;    lamp_1.light() #Red&#13;&#10;    lamp_2.light() #Green&#13;&#10;    &#13;&#10;    assert lamp_1.light() == &quot;Blue&quot;&#13;&#10;    assert lamp_1.light() == &quot;Yellow&quot;&#13;&#10;    assert lamp_1.light() == &quot;Green&quot;&#13;&#10;    assert lamp_2.light() == &quot;Red&quot;&#13;&#10;    assert lamp_2.light() == &quot;Blue&quot;&#13;&#10;    print(&quot;Coding complete? Let's try tests!&quot;)" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;The New Year is coming and you've decided to decorate your home. But simple &#10;lights and Christmas decorations are so boring, so you have figured that you can use your programing skills and create something really cool and original.&#10;Your task is to create the class Lamp() and method light() which will make the lamp glow with one of the four colors in the sequence - (‘Green’, ‘Red’, ‘Blue’, ‘Yellow’). When the light() method is used for the first time, the color should be 'Green', the second time - 'Red' and so on.&#10;If the current color is 'Yellow', the next color should be 'Green' and so on.&#10;&#10;In this mission you can use the &lt;a href='https://en.wikipedia.org/wiki/State_pattern'&gt;State&lt;/a&gt; design pattern. It's highly useful in the situations where object should change its behaviour depending on the internal state.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;&lt;strong&gt;Example&lt;/strong&gt;:&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;lamp_1 = Lamp()&#10;lamp_2 = Lamp()&#10;&#10;lamp_1.light() #Green&#10;lamp_1.light() #Red&#10;lamp_2.light() #Green&#10;    &#10;lamp_1.light() == &quot;Blue&quot;&#10;lamp_1.light() == &quot;Yellow&quot;&#10;lamp_1.light() == &quot;Green&quot;&#10;lamp_2.light() == &quot;Red&quot;&#10;lamp_2.light() == &quot;Blue&quot;&#10;&lt;/pre&gt;&#10;&lt;/p&gt;&#10;&lt;br&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt;A few strings indicating the number of times the lamp is being turned on.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt;The color of the lamp.&#10;&lt;/p&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    To implement objects with mutable behavior.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    4 colors: Green, Red, Blue, Yellow.&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="556" />
                      <option name="index" value="7" />
                      <option name="name" value="Multicolored Lamp" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="class Lamp:&#10;    pass&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;&#10;    lamp_1 = Lamp()&#10;    lamp_2 = Lamp()&#10;&#10;    lamp_1.light() #Green&#10;    lamp_1.light() #Red&#10;    lamp_2.light() #Green&#10;    &#10;    assert lamp_1.light() == &quot;Blue&quot;&#10;    assert lamp_1.light() == &quot;Yellow&quot;&#10;    assert lamp_1.light() == &quot;Green&quot;&#10;    assert lamp_2.light() == &quot;Red&quot;&#10;    assert lamp_2.light() == &quot;Blue&quot;&#10;    print(&quot;Coding complete? Let's try tests!&quot;)" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def count_consecutive_summers(num):&#10;    # your code here&#10;    return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(count_consecutive_summers(42))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert count_consecutive_summers(42) == 4&#10;    assert count_consecutive_summers(99) == 6&#10;    assert count_consecutive_summers(1) == 1&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    Positive integers can be expressed as sums of consecutive positive integers in various ways. For example, 42 can be expressed as such a sum in four different ways:(a) 3+4+5+6+7+8+9, (b) 9+10+11+12, (c) 13+14+15 and (d) 42. As the last solution (d) shows, any positive integer can always be trivially expressed as a singleton sum   that consists of that integer alone.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;Compute how many different ways it can be expressed as a sum of consecutive positive integers.&lt;/p&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Int.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Int. &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;count_consecutive_summers(42) == 4&#10;count_consecutive_summers(99) == 6&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;Input is always a positive integer.&lt;/i&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;i&gt;The mission was taken from Python CCPS 109 Fall 2018. It’s being taught for Ryerson Chang School of Continuing Education by &lt;a href=&quot;http://www.scs.ryerson.ca/~ikokkari/&quot;&gt;Ilkka Kokkarinen&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="609" />
                      <option name="index" value="8" />
                      <option name="name" value="Count Consecutive Summers" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def count_consecutive_summers(num):&#10;    # your code here&#10;    return None&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(count_consecutive_summers(42))&#10;&#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert count_consecutive_summers(42) == 4&#10;    assert count_consecutive_summers(99) == 6&#10;    assert count_consecutive_summers(1) == 1&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="# Taken from mission The Warriors&#10;&#10;class Warrior(object):&#10;    &quot;&quot;&quot;klass för att lösa spelproblem checkio&quot;&quot;&quot;&#10;    def __init__(self, health=50, attack=5):&#10;        self.health = health&#10;        self.attack = attack&#10;        if self.health &gt; 0:&#10;            self.is_alive = True&#10;        else:&#10;            self.is_alive = False&#10;&#10;    def talk(self):&#10;        print(&quot;Health = &quot; + str(self.health))&#10;        print(&quot;Attack = &quot; + str(self.attack))&#10;        print(&quot;I liv = &quot;  + str(self.is_alive))&#10;    pass&#10;&#10;class Knight(Warrior):&#10;    def __init__(self, health=50, attack=7):&#10;        self.health = health&#10;        self.attack = attack&#10;        if self.health &gt; 0:&#10;            self.is_alive = True&#10;        else:&#10;            self.is_alive = False&#10;    pass&#10;&#10;def fight(unit_1, unit_2):&#10;    success = False&#10;    while unit_1.is_alive &amp; unit_2.is_alive:&#10;        unit_2.health -= unit_1.attack&#10;        if unit_1.health &gt; 0 and unit_2.health &lt;= 0:&#10;            success = True&#10;        else:&#10;            unit_1.health -= unit_2.attack&#10;        if unit_1.health &gt; 0 and unit_2.health &lt;= 0:&#10;            success = True&#10;        if unit_2.health &lt;= 0:&#10;            unit_2.is_alive = False&#10;        if unit_1.health &lt;= 0:&#10;            unit_1.is_alive = False&#10;    return success&#10;&#10;if __name__ == '__main__':&#10;&#10;    chuck = Warrior()&#10;    bruce = Warrior()&#10;    carl = Knight()&#10;    dave = Warrior()&#10;    mark = Warrior()&#10;&#10;    assert fight(chuck, bruce) == True&#10;    assert fight(dave, carl) == False&#10;    assert chuck.is_alive == True&#10;    assert bruce.is_alive == False&#10;    assert carl.is_alive == True&#10;    assert dave.is_alive == False&#10;    assert fight(carl, mark) == False&#10;    assert carl.is_alive == False&#10;&#10;    print(&quot;Coding complete? Let's try tests!&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    &#10;    #fight tests&#10;    chuck = Warrior()&#10;    bruce = Warrior()&#10;    carl = Knight()&#10;    dave = Warrior()&#10;    mark = Warrior()&#10;&#10;    assert fight(chuck, bruce) == True&#10;    assert fight(dave, carl) == False&#10;    assert chuck.is_alive == True&#10;    assert bruce.is_alive == False&#10;    assert carl.is_alive == True&#10;    assert dave.is_alive == False&#10;    assert fight(carl, mark) == False&#10;    assert carl.is_alive == False&#10;&#10;    #battle tests&#10;    my_army = Army()&#10;    my_army.add_units(Knight, 3)&#10;    &#10;    enemy_army = Army()&#10;    enemy_army.add_units(Warrior, 3)&#10;&#10;    army_3 = Army()&#10;    army_3.add_units(Warrior, 20)&#10;    army_3.add_units(Knight, 5)&#10;    &#10;    army_4 = Army()&#10;    army_4.add_units(Warrior, 30)&#10;&#10;    battle = Battle()&#10;&#10;    assert battle.fight(my_army, enemy_army) == True&#10;    assert battle.fight(army_3, army_4) == False&#10;    print(&quot;Coding complete? Let's try tests!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;story for_info_only&quot;&gt;&#10;...Sir Ronald’s opponent - Umbert, has proved to be a very skillful warrior. In addition, he was a good fifteen years younger, which gave him a certain advantage. But Sir Ronald was also very strong - he had the experience of participation in many battles and in several major wars behind his back. And besides that, in his youth he was known as the best duelist in this land. &lt;br&gt;&#10;Realizing that the forces are equal, each of them had followed the only course possible - to call for help. Umbert sent for the reinforcement his coachman on a horse, and Sir Ronald used a family horn that sounded more than once in hot battles. The knight's castle was close enough for the call to arms was heard back there. Nobody quite knew where the Umbert's accomplices were located, and this made it difficult to come up with a strategy for the battle ahead. &lt;br&gt;&#10;Fortunately, the reinforcements for both sides arrived almost simultaneously. Now it was more than a question of the girl's honor. There was no peaceful solutions to this matter. One of the two armies must be destroyed.&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;In the previous mission - Warriors - you've learned how to make a duel between 2 warriors happen. Great job! But let's move to something that feels a little more epic - the armies! In this mission your task is to add new classes and  functions to the existing ones. The new class should be the &lt;strong&gt;Army&lt;/strong&gt; and have the method &lt;strong&gt;add_units()&lt;/strong&gt; - for adding the chosen amount of units to the army. Also you need to create a &lt;strong&gt;Battle()&lt;/strong&gt; class with a &lt;strong&gt;fight()&lt;/strong&gt; function, which will determine the strongest army.&lt;br&gt;&#10;The battles occur according to the following principles:&lt;br&gt;&#10;at first, there is a duel between the first warrior of the first army and the first warrior of the second army. As soon as one of them dies - the next warrior from the army that lost the fighter enters the duel, and the surviving warrior continues to fight with his current health. This continues until all the soldiers of one of the armies die. In this case, the battle() function should return &lt;strong&gt;True&lt;/strong&gt;, if the first army won, or &lt;strong&gt;False&lt;/strong&gt;, if the second one was stronger.&lt;br&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;Note that army 1 have the advantage to start every fight!&#10;&lt;/p&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot; style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img  title=&quot;battle&quot; src=&quot;https://static.checkio.org/media/task/media/8f856023648b4e48837e1d2df1b434ff/battle.png&quot; alt=&quot;example&quot; style=&quot;max-height: 1000px&quot;/&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;&lt;p&gt;&#10;&lt;strong&gt;Example&lt;/strong&gt;:&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;chuck = Warrior()&#10;bruce = Warrior()&#10;carl = Knight()&#10;dave = Warrior()&#10;mark = Warrior()&#10;&#10;fight(chuck, bruce) == True&#10;fight(dave, carl) == False&#10;chuck.is_alive == True&#10;bruce.is_alive == False&#10;carl.is_alive == True&#10;dave.is_alive == False&#10;fight(carl, mark) == False&#10;carl.is_alive == False&#10;&#10;my_army = Army()&#10;my_army.add_units(Knight, 3)&#10;    &#10;enemy_army = Army()&#10;enemy_army.add_units(Warrior, 3)&#10;&#10;army_3 = Army()&#10;army_3.add_units(Warrior, 20)&#10;army_3.add_units(Knight, 5)&#10;    &#10;army_4 = Army()&#10;army_4.add_units(Warrior, 30)&#10;&#10;battle = Battle()&#10;&#10;battle.fight(my_army, enemy_army) == True&#10;battle.fight(army_3, army_4) == False&#10;&lt;/pre&gt;&#10;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt;The warriors and armies.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt;The result of the battle (True or False).&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    For computer games development.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    2 types of units&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="567" />
                      <option name="index" value="9" />
                      <option name="name" value="Army Battles" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="# Taken from mission The Warriors&#10;&#10;class Warrior(object):&#10;    &quot;&quot;&quot;klass för att lösa spelproblem checkio&quot;&quot;&quot;&#10;    def __init__(self, health=50, attack=5):&#10;##        self.health = 50&#10;##        self.attack = attack&#10;        self.health = health&#10;        self.attack = attack&#10;        if self.health &gt; 0:&#10;            self.is_alive = True&#10;        else:&#10;            self.is_alive = False&#10;&#10;    def talk(self):&#10;        print(&quot;Health = &quot; + str(self.health))&#10;        print(&quot;Attack = &quot; + str(self.attack))&#10;        print(&quot;I liv = &quot;  + str(self.is_alive))&#10;&#10;    pass&#10;&#10;class Knight(Warrior):&#10;    def __init__(self, health=50, attack=7):&#10;        self.health = health&#10;        self.attack = attack&#10;        if self.health &gt; 0:&#10;            self.is_alive = True&#10;        else:&#10;            self.is_alive = False&#10;&#10;    pass&#10;&#10;def fight(unit_1, unit_2):&#10;&#10;    def turn(unit_1, unit_2):&#10;        success = False&#10;        unit_2.health -= unit_1.attack&#10;        p1 = unit_1.health&#10;        p2 = unit_2.health&#10;&#10;        if unit_1.health &gt; 0 and unit_2.health &lt;= 0:&#10;            success = True&#10;        else:&#10;&#10;            unit_1.health -= unit_2.attack&#10;            p1 = unit_1.health&#10;            p2 = unit_2.health&#10;&#10;        if unit_1.health &gt; 0 and unit_2.health &lt;= 0:&#10;            success = True&#10;&#10;        if unit_2.health &lt;= 0:&#10;            unit_2.is_alive = False&#10;        if unit_1.health &lt;= 0:&#10;            unit_1.is_alive = False&#10;&#10;        return success&#10;&#10;    while unit_1.is_alive &amp; unit_2.is_alive:&#10;        success = turn(unit_1, unit_2)&#10;&#10;##    success = turn(unit_1, unit_2)&#10;&#10;    return success&#10;&#10;&#10;if __name__ == '__main__':&#10;&#10;    chuck = Warrior()&#10;    bruce = Warrior()&#10;    carl = Knight()&#10;    dave = Warrior()&#10;    mark = Warrior()&#10;&#10;    assert fight(chuck, bruce) == True&#10;    assert fight(dave, carl) == False&#10;    assert chuck.is_alive == True&#10;    assert bruce.is_alive == False&#10;    assert carl.is_alive == True&#10;    assert dave.is_alive == False&#10;    assert fight(carl, mark) == False&#10;    assert carl.is_alive == False&#10;&#10;    print(&quot;Coding complete? Let's try tests!&quot;)&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    &#10;    #fight tests&#10;    chuck = Warrior()&#10;    bruce = Warrior()&#10;    carl = Knight()&#10;    dave = Warrior()&#10;    mark = Warrior()&#10;&#10;    assert fight(chuck, bruce) == True&#10;    assert fight(dave, carl) == False&#10;    assert chuck.is_alive == True&#10;    assert bruce.is_alive == False&#10;    assert carl.is_alive == True&#10;    assert dave.is_alive == False&#10;    assert fight(carl, mark) == False&#10;    assert carl.is_alive == False&#10;&#10;    #battle tests&#10;    my_army = Army()&#10;    my_army.add_units(Knight, 3)&#10;    &#10;    enemy_army = Army()&#10;    enemy_army.add_units(Warrior, 3)&#10;&#10;    army_3 = Army()&#10;    army_3.add_units(Warrior, 20)&#10;    army_3.add_units(Knight, 5)&#10;    &#10;    army_4 = Army()&#10;    army_4.add_units(Warrior, 30)&#10;&#10;    battle = Battle()&#10;&#10;    assert battle.fight(my_army, enemy_army) == True&#10;    assert battle.fight(army_3, army_4) == False&#10;    print(&quot;Coding complete? Let's try tests!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                  </list>
                </option>
              </CheckiOStation>
              <CheckiOStation>
                <option name="customPresentableName" />
                <option name="id" value="9" />
                <option name="index" value="4" />
                <option name="name" value="Scientific Expedition" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CheckiOMission>
                      <option name="code" value="def checkio():&#13;&#10;    return 73  # if you are Sheldon&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    # These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert isinstance(checkio(), (int, float, complex))" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;story&quot;&gt;&#10;    &lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center;&quot;&gt;&#10;       &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RyFr279K9TE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    It was Sheldon's version and his best number. But you have the coding skills to prove that there is&#10;    a better number, or prove Sheldon sheldon right. You can return any number, but use the&#10;    code to prove your number is the best!&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    This mission is pretty simple to solve. You are given a function called &quot;checkio&quot; which will return any number (integer or float).&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Let's write an essay in python code which will explain why is your number is the best.&#10;    Publishing the default solution will only earn you 0 points as the&#10;    goal is to earn points through votes for your code essay.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Nothing.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A number as an integer or a float or a complex.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;isinstance(checkio(), (int, float, complex))&#10;    &lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This mission revolves around code and math literacy.&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="171" />
                      <option name="index" value="1" />
                      <option name="name" value="The Best Number Ever" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio():&#10;    return 73  # if you are Sheldon&#10;&#10;if __name__ == '__main__':&#10;    # These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert isinstance(checkio(), (int, float, complex))" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def checkio(time_string: str) -&gt; str:&#13;&#10;&#13;&#10;    #replace this for solution&#13;&#10;    return &quot;.- .... : .-- .--- : -.. -..-&quot;&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    print(&quot;Example:&quot;)&#13;&#10;    print(checkio(&quot;10:37:49&quot;))&#13;&#10;&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert checkio(&quot;10:37:49&quot;) == &quot;.- .... : .-- .--- : -.. -..-&quot;, &quot;First Test&quot;&#13;&#10;    assert checkio(&quot;21:34:56&quot;) == &quot;-. ...- : .-- .-.. : -.- .--.&quot;, &quot;Second Test&quot;&#13;&#10;    assert checkio(&quot;00:1:02&quot;) == &quot;.. .... : ... ...- : ... ..-.&quot;, &quot;Third Test&quot;&#13;&#10;    assert checkio(&quot;23:59:59&quot;) == &quot;-. ..-- : -.- -..- : -.- -..-&quot;, &quot;Fourth Test&quot;&#13;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; src=&quot;https://static.checkio.org/media/task/media/6503379414a84f2cb5b5b41a5f945bb2/title.png&quot; style=&quot;float:left;max-height: 400px&quot;&gt;&#10;&#10;&lt;div class=&quot;story&quot;&gt;&#10;    &lt;p&gt;&#10;        &quot;di-dah di-di-di-dit di-dah-dah di-dah-dah-dah dah-di-dit dah-di-di-dah&quot;,&#10;        sound of Morszelizer clanked out loud.&lt;br&gt;&lt;br&gt;&#10;&#10;        &quot;What're you doing?&quot; Nikola asked curiously.&lt;br&gt;&lt;br&gt;&#10;&#10;        &quot;I'm sending our time logs for the last expedition to headquarters, but it's not an easy task...&quot;&#10;        Stephen grumbled, &quot;Can you imagine that with all the computer power at our disposal,&#10;        I STILL have to convert this message to Morse-code with only an on/off button... Hrmph... what a pain.&quot;&#10;        He grumbled at the inconvenience.&lt;br&gt;&lt;br&gt;&#10;&#10;        &quot;Let me look at it.&quot; Nikola offered his help, &quot;It looks like a pretty easy solution, we could&#10;        automate the process.&quot;&lt;br&gt;&lt;br&gt;&#10;&#10;        &quot;Oh.. you hero of my day.&quot; Stephen started excitedly. &quot;So, how do we start&#10;        it?&quot;&lt;br&gt;&lt;br&gt;&#10;&#10;        &quot;With Python!&quot; Nikola exclaimed.&#10;    &lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;&#10;    Help Stephen to create a module for converting a normal time string to a morse time string.&#10;    As you can see in the illustration, a gray circle means on, while a white circle means off.&#10;    Every digit in the time string contains a different number of slots.&#10;    The first digit for the hours has a length of 2 while the second digit for the hour has a length of 4.&#10;    The first digits for the minutes and seconds have a length of 3 while the second digits for the minutes and&#10;    seconds have a length of 4.&#10;    Every digit in the time is converted to binary representation.&#10;    You will convert every on (or 1) signal to dash (&quot;-&quot;) and every off (or 0) signal to dot (&quot;.&quot;).&#10;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img class=&quot;for_info_only&quot; title=&quot;example&quot; src=&quot;https://static.checkio.org/media/task/media/6503379414a84f2cb5b5b41a5f945bb2/morse_clock.png&quot; alt=&quot;example&quot; style=&quot;max-height:460px&quot;/&gt;&#10;    &lt;span class=&quot;ref-source&quot;&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_clock&quot;&gt;source: Wikipedia&lt;/a&gt;&lt;/span&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    An time string could be in the follow formats: &lt;em&gt;&quot;hh:mm:ss&quot;&lt;/em&gt;, &lt;em&gt;&quot;h:m:s&quot;&lt;/em&gt; or &lt;em&gt;&quot;hh:m:ss&quot;&lt;/em&gt;.&#10;    The &quot;missing&quot; digits are zeroes. For example, &quot;1:2:3&quot; is the same as &quot;01:02:03&quot;.&#10;&lt;/p&gt;&#10;&lt;div&gt;&#10;    The result will be a morse time string with specific format:&#10;    &lt;pre class=&quot;format&quot; style=&quot;text-align: center;&quot;&gt;&quot;h h : m m : s s&quot;&lt;/pre&gt;&#10;    where each digits represented as sequence of &quot;.&quot; and &quot;-&quot;&#10;&lt;/div&gt;&#10;&lt;br/&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A normal time string as a string (unicode).&#10;&lt;/p&gt;&#10;&#10;&lt;div&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The morse time string as a string.&#10;&lt;/div&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio(&quot;10:37:49&quot;) == &quot;.- .... : .-- .--- : -.. -..-&quot;&#10;checkio(&quot;21:34:56&quot;) == &quot;-. ...- : .-- .-.. : -.- .--.&quot;&#10;checkio(&quot;00:1:02&quot;) == &quot;.. .... : ... ...- : ... ..-.&quot;&#10;checkio(&quot;23:59:59&quot;) == &quot;-. ..-- : -.- -..- : -.- -..-&quot;&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Did you see the binary clocks task earlier?&#10;    This is can be a fun gift for any geek.&#10;    We tried to combine the old good Morse code with a binary clock in this task,&#10;    and now you can create the new more complex binary clock,&#10;    which doesn't show time -- but makes morse style bips and beeps. ;-)&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition: &lt;/strong&gt;&lt;br&gt;&#10;    &lt;em&gt;time_string&lt;/em&gt; contains correct time.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;!--&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How to use TryIt: &lt;/strong&gt;&lt;br&gt;&#10;    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/OqSAHhRlwx4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&#10;&lt;/p&gt;&#10;--&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="196" />
                      <option name="index" value="2" />
                      <option name="name" value="Morse Clock" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(time_string: str) -&gt; str:&#10;&#10;    #replace this for solution&#10;    return &quot;.- .... : .-- .--- : -.. -..-&quot;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(checkio(&quot;10:37:49&quot;))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert checkio(&quot;10:37:49&quot;) == &quot;.- .... : .-- .--- : -.. -..-&quot;, &quot;First Test&quot;&#10;    assert checkio(&quot;21:34:56&quot;) == &quot;-. ...- : .-- .-.. : -.- .--.&quot;, &quot;Second Test&quot;&#10;    assert checkio(&quot;00:1:02&quot;) == &quot;.. .... : ... ...- : ... ..-.&quot;, &quot;Third Test&quot;&#10;    assert checkio(&quot;23:59:59&quot;) == &quot;-. ..-- : -.- -..- : -.- -..-&quot;, &quot;Fourth Test&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def checkio(first, second):&#10;    return &quot;&quot;&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    assert checkio(&quot;hello,world&quot;, &quot;hello,earth&quot;) == &quot;hello&quot;, &quot;Hello&quot;&#10;    assert checkio(&quot;one,two,three&quot;, &quot;four,five,six&quot;) == &quot;&quot;, &quot;Too different&quot;&#10;    assert checkio(&quot;one,two,three&quot;, &quot;four,five,one,two,six,three&quot;) == &quot;one,three,two&quot;, &quot;1 2 3&quot;&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; title=&quot;mirror&quot; src=&quot;https://static.checkio.org/media/task/media/84f9e77b569e48cd9b4c9498ad3d5868/mirror.png&quot; alt=&quot;mirror&quot; style=&quot;float: left;&quot;/&gt;&#10;&#10;&#10;&#10;&lt;p&gt;&#10;    Let's continue examining words. You are given two string with words separated by commas.&#10;    Try to find what is common between these strings. The words are not repeated in the same string.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Your function should find all of the words that appear in both strings.&#10;    The result must be represented as a string of words separated by commas in &lt;strong&gt;alphabetic order.&lt;/strong&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two arguments as strings.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The common words as a string.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio(&quot;hello,world&quot;, &quot;hello,earth&quot;) == &quot;hello&quot;&#10;checkio(&quot;one,two,three&quot;, &quot;four,five,six&quot;) == &quot;&quot;&#10;checkio(&quot;one,two,three&quot;, &quot;four,five,one,two,six,three&quot;) == &quot;one,three,two&quot;&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Here you can learn how to work with strings and sets.&#10;    This knowledge can be useful for linguistic analysis.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition: &lt;/strong&gt;&lt;br&gt;&#10;    Each string contains no more than 10 words.&lt;br&gt;&#10;    All words separated by commas.&lt;br&gt;&#10;    All words consist of lowercase latin letters.&#10;&#10;&#10;        &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="277" />
                      <option name="index" value="3" />
                      <option name="name" value="Common Words" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def checkio(first, second):&#10;    return &quot;&quot;&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    assert checkio(&quot;hello,world&quot;, &quot;hello,earth&quot;) == &quot;hello&quot;, &quot;Hello&quot;&#10;    assert checkio(&quot;one,two,three&quot;, &quot;four,five,six&quot;) == &quot;&quot;, &quot;Too different&quot;&#10;    assert checkio(&quot;one,two,three&quot;, &quot;four,five,one,two,six,three&quot;) == &quot;one,three,two&quot;, &quot;1 2 3&quot;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def verify_anagrams(first_word, second_word):&#13;&#10;    return True or False&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert isinstance(verify_anagrams(&quot;a&quot;, 'z'), bool), &quot;Boolean!&quot;&#13;&#10;    assert verify_anagrams(&quot;Programming&quot;, &quot;Gram Ring Mop&quot;) == True, &quot;Gram of code&quot;&#13;&#10;    assert verify_anagrams(&quot;Hello&quot;, &quot;Ole Oh&quot;) == False, &quot;Hello! Ole Oh!&quot;&#13;&#10;    assert verify_anagrams(&quot;Kyoto&quot;, &quot;Tokyo&quot;) == True, &quot;The global warming crisis of 3002&quot;&#13;&#10;&#13;&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    An anagram is a type of word play,&#10;    the result of rearranging the letters of a word or phrase to produce a new word or phrase,&#10;    using all the original letters exactly once.&#10;    Two words are anagrams to each other if we can get one from another by rearranging the letters.&#10;    Anagrams are case-insensitive and don't take account whitespaces.&#10;    For example: &quot;Gram Ring Mop&quot; and &quot;Programming&quot; are anagrams. But &quot;Hello&quot; and &quot;Ole Oh&quot; are not.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You are given two words or phrase. Try to verify are they anagrams or not.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two arguments as strings.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Are they anagrams or not as boolean (True or False)&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;verify_anagrams(&quot;Programming&quot;, &quot;Gram Ring Mop&quot;) == True&#10;verify_anagrams(&quot;Hello&quot;, &quot;Ole Oh&quot;) == False&#10;verify_anagrams(&quot;Kyoto&quot;, &quot;Tokyo&quot;) == True&#10;    &lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Anagramming can be a fun way to train your brain, but they have and another application.&#10;    Psychologists use anagram-oriented tests, often called &quot;anagram solution tasks&quot;, to assess the implicit memory.&#10;    Anagrams are connected to pseudonyms, by the fact that they may conceal or reveal,&#10;    or operate somewhere in between like a mask that can establish identity.&#10;    In addition to this, multiple anagramming is a technique sometimes used to solve some kinds of cryptograms.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition: &lt;/strong&gt;&#10;    0 &lt; |first_word| &lt; 100;&lt;br&gt;&#10;    0 &lt; |second_word| &lt; 100;&lt;br&gt;&#10;    Words contain only ASCII latin letters and whitespaces.&#10;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="309" />
                      <option name="index" value="4" />
                      <option name="name" value="Verify Anagrams" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def verify_anagrams(first_word, second_word):&#10;    return True or False&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert isinstance(verify_anagrams(&quot;a&quot;, 'z'), bool), &quot;Boolean!&quot;&#10;    assert verify_anagrams(&quot;Programming&quot;, &quot;Gram Ring Mop&quot;) == True, &quot;Gram of code&quot;&#10;    assert verify_anagrams(&quot;Hello&quot;, &quot;Ole Oh&quot;) == False, &quot;Hello! Ole Oh!&quot;&#10;    assert verify_anagrams(&quot;Kyoto&quot;, &quot;Tokyo&quot;) == True, &quot;The global warming crisis of 3002&quot;&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def completely_empty(val):&#13;&#10;    return True&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert completely_empty([]) == True, &quot;First&quot;&#13;&#10;    assert completely_empty([1]) == False, &quot;Second&quot;&#13;&#10;    assert completely_empty([[]]) == True, &quot;Third&quot;&#13;&#10;    assert completely_empty([[],[]]) == True, &quot;Forth&quot;&#13;&#10;    assert completely_empty([[[]]]) == True, &quot;Fifth&quot;&#13;&#10;    assert completely_empty([[],[1]]) == False, &quot;Sixth&quot;&#13;&#10;    assert completely_empty([0]) == False, &quot;[0]&quot;&#13;&#10;    assert completely_empty(['']) == True&#13;&#10;    assert completely_empty([[],[{'':'No WAY'}]]) == True&#13;&#10;    print('Done')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    You need to figure if a wellfounded and wellsized iterable is completely empty.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    An iterable &lt;i&gt;x0&lt;/i&gt; is wellfounded if there is no infinite sequence &lt;pre style=&quot;display: inline;&quot;&gt;x1,x2,x3...&lt;/pre&gt; such that &#10;    &lt;pre style=&quot;display: inline;&quot;&gt;... in x3 in x2 in x1 in x0&lt;/pre&gt; (where &lt;pre style=&quot;display: inline;&quot;&gt;in&lt;/pre&gt; is meant iteratively,&#10;    &lt;pre style=&quot;display: inline;&quot;&gt;x(n+1)&lt;/pre&gt; will be encountered while iterating through &lt;pre style=&quot;display: inline;&quot;&gt;xn&lt;/pre&gt;).&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    A wellfounded iterable is wellsized if it has only finitely many iterable elements, and all of them are wellsized.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    A wellfounded iterable is completely empty when all its elements are completely empty.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Some consequences of the above definitions:&#10;&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;any empty iterable is completely empty&lt;/li&gt;&#10;    &lt;li&gt;a non-iterable is never completely empty&lt;/li&gt;&#10;    &lt;li&gt;the only wellfounded string is &lt;pre style=&quot;display: inline;&quot;&gt;''&lt;/pre&gt;, and it is completely empty&lt;/li&gt;&#10;    &lt;li&gt;bytes, and (possibly nested) tuples/frozensets of them are always wellfounded and wellsized&lt;/li&gt;&#10;    &lt;li&gt;&lt;pre style=&quot;display: inline;&quot;&gt;{'': 'Nonempty'}&lt;/pre&gt; is a wellfounded and completely empty iterable&lt;/li&gt;&#10;    &lt;li&gt;after &lt;pre style=&quot;display: inline;&quot;&gt;c=[];c.append(c)&lt;/pre&gt;, c is a non-wellfounded iterable&lt;/li&gt;&#10;    &lt;li&gt;&lt;pre style=&quot;display: inline;&quot;&gt;itertools.repeat(())&lt;/pre&gt; is wellfounded but not wellsized&lt;/li&gt;&#10;    &lt;li&gt;&lt;pre style=&quot;display: inline;&quot;&gt;itertools.repeat(5)&lt;/pre&gt; is wellfounded and wellsized&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A wellfounded and wellsized iterable.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; A bool.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;completely_empty([]) == True&#10;completely_empty([1]) == False&#10;completely_empty([[]]) == True&#10;completely_empty([[],[]]) == True&#10;completely_empty([[[]]]) == True&#10;completely_empty(['']) == True&#10;completely_empty([[],[{'':'No WAY'}]]) == True&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="487" />
                      <option name="index" value="5" />
                      <option name="name" value="Completely Empty" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def completely_empty(val):&#10;    return True&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert completely_empty([]) == True, &quot;First&quot;&#10;    assert completely_empty([1]) == False, &quot;Second&quot;&#10;    assert completely_empty([[]]) == True, &quot;Third&quot;&#10;    assert completely_empty([[],[]]) == True, &quot;Forth&quot;&#10;    assert completely_empty([[[]]]) == True, &quot;Fifth&quot;&#10;    assert completely_empty([[],[1]]) == False, &quot;Sixth&quot;&#10;    assert completely_empty([0]) == False, &quot;[0]&quot;&#10;    assert completely_empty(['']) == True&#10;    assert completely_empty([[],[{'':'No WAY'}]]) == True&#10;    print('Done')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def double_substring(line):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;        length of the longest substring that non-overlapping repeats more than once.&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    # your code here&#13;&#10;    return 0&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert double_substring('aaaa') == 2, &quot;First&quot;&#13;&#10;    assert double_substring('abc') == 0, &quot;Second&quot;&#13;&#10;    assert double_substring('aghtfghkofgh') == 3, &quot;Third&quot;&#13;&#10;    print('&quot;Run&quot; is good. How is &quot;Check&quot;?')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;i&gt;&lt;a href=&quot;https://py.checkio.org/forum/post/11382/4-mission-ideas-substrings/&quot;&gt;There are four substring missions&lt;/a&gt; that were born all in one day and you shouldn’t be needed more than one day to solve them. All of those mission can be simply solved by brute force, but is it always the best way to go? (you might not have access to all of those missions yet, but they are going to be available with more opened islands on the map).&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    This is the third mission of the series, and it’s the only one where you have to return not a substring but a substring length. You need to find a substring that repeats more than once in a given string. This reiteration shouldn't have overlaps. For example, in a string &quot;abcab&quot; the longest substring that repeats more than once is &quot;ab&quot;, so the answer should be 2 (length of &quot;ab&quot;)&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; String.&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Int. &#10;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img  title=&quot;Double substring&quot; src=&quot;https://static.checkio.org/media/task/media/cd53e00183ff4a8d8a2af7a587aa7329/double_substring.svg.png&quot; alt=&quot;example&quot; style=&quot;max-height: 80px&quot;&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;double_substring('aaaa') == 2&#10;double_substring('abc') == 0&#10;double_substring('aghtfghkofgh') == 3 # fgh&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="497" />
                      <option name="index" value="6" />
                      <option name="name" value="Double Substring" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def double_substring(line):&#10;    &quot;&quot;&quot;&#10;        length of the longest substring that non-overlapping repeats more than once.&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return 0&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert double_substring('aaaa') == 2, &quot;First&quot;&#10;    assert double_substring('abc') == 0, &quot;Second&quot;&#10;    assert double_substring('aghtfghkofgh') == 3, &quot;Third&quot;&#10;    print('&quot;Run&quot; is good. How is &quot;Check&quot;?')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def seven_segment(lit_seg, broken_seg):&#13;&#10;&#13;&#10;    #replace this for solution&#13;&#10;    return 0&#13;&#10;&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    assert seven_segment({'B', 'C', 'b', 'c'}, {'A'}) == 2, '11, 71'&#13;&#10;    assert seven_segment({'B', 'C', 'a', 'f', 'g', 'c', 'd'}, {'A', 'G', 'D', 'e'}) == 6, '15, 16, 35, 36, 75, 76'&#13;&#10;    assert seven_segment({'B', 'C', 'a', 'f', 'g', 'c', 'd'}, {'A', 'G', 'D', 'F', 'b', 'e'}) == 20, '15...98'&#13;&#10;    print('&quot;Run&quot; is good. How is &quot;Check&quot;?')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;You have a device that uses a &lt;a href='https://en.wikipedia.org/wiki/Seven-segment_display'&gt;Seven-segment display&lt;/a&gt; to display 2 digit numbers.&#10;However, some of the segments aren't working and can't be displayed.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;You will be given information on the lit and broken segments.&#10;You won't know whether the broken segment is lit or not.&#10;You have to count and return the total number that the device may be displaying.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;The input is a set of lit segments (the first argument) and broken segments (the second argument).&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;Uppercase letters represent the segments of the first out two digit number.&lt;/li&gt;&#10;    &lt;li&gt;Lowercase letters represent the segments of the second out two digit number.&lt;/li&gt;&#10;    &lt;li&gt;topmost: 'A(a)', top right: 'B(b)', bottom right: 'C(c)', bottommost: 'D(d)', bottom left: 'E(e)', top left: 'F(f)', middle: 'G(g)'&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;div&gt;&#10;    &lt;p style=&quot;text-align: left;&quot;&gt;&#10;        &lt;img  title=&quot;example&quot; src=&quot;https://static.checkio.org/media/task/media/f137d7959e3c4a7b9e210252c6c8af12/checkio_seven_segment_00.png&quot; alt=&quot;example&quot; style=&quot;max-height: 150px&quot;/&gt;&#10;    &lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;seven_segment({'B', 'C', 'b', 'c'}, {'A'}) == 2    #11, 71&#10;seven_segment({'B', 'C', 'a', 'c', 'd', 'f', 'g'}, {'A', 'D', 'G', 'e'}) == 6    #15, 16, 35, 36, 75, 76&#10;seven_segment({'A', 'B', 'C', 'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f'}, {'G', 'g'}) == 4    #0, 8, 80, 88&lt;/pre&gt; &lt;/div&gt;&#10;&#10;&lt;div&gt;&#10;    &lt;p style=&quot;text-align: left;&quot;&gt;&#10;        &lt;img  title=&quot;example&quot; src=&quot;https://static.checkio.org/media/task/media/f137d7959e3c4a7b9e210252c6c8af12/checkio_seven_segment_example_00.png&quot; alt=&quot;example&quot; style=&quot;max-height: 160px&quot;/&gt;&#10;    &lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Input: &lt;/strong&gt;Two arguments. The first one contains the lit segments as a set of letters representing segments. The second one contains the broken segments as a set of letters representing segments.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt;The total number that the device may be displaying.&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;&lt;!--&#10;&lt;strong&gt;How it is used:&lt;/strong&gt;&lt;br&gt;&#10;You will get the basis of nonogram-solver.  The actual nonogaram puzzles consists of multiple rows and also has clue numbers for the columns.&#10;All nonogram puzzles are designed to be able to identify all cells as 'filled' or 'empty' with these clue numbers.&#10;--&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;&lt;strong&gt;Precondition:&lt;/strong&gt;&lt;br&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;all(re.match('[A-Ga-g]', s) for s in lit | broken)&lt;/li&gt;&#10;    &lt;li&gt;len(lit  &amp;amp;  broken) == 0&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="549" />
                      <option name="index" value="7" />
                      <option name="name" value="Seven Segment" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def seven_segment(lit_seg, broken_seg):&#10;&#10;    #replace this for solution&#10;    return 0&#10;&#10;&#10;if __name__ == '__main__':&#10;    assert seven_segment({'B', 'C', 'b', 'c'}, {'A'}) == 2, '11, 71'&#10;    assert seven_segment({'B', 'C', 'a', 'f', 'g', 'c', 'd'}, {'A', 'G', 'D', 'e'}) == 6, '15, 16, 35, 36, 75, 76'&#10;    assert seven_segment({'B', 'C', 'a', 'f', 'g', 'c', 'd'}, {'A', 'G', 'D', 'F', 'b', 'e'}) == 20, '15...98'&#10;    print('&quot;Run&quot; is good. How is &quot;Check&quot;?')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def group_equal(els):&#10;    # your code here&#10;    return els&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(group_equal([1, 1, 4, 4, 4, &quot;hello&quot;, &quot;hello&quot;, 4]))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert group_equal([1, 1, 4, 4, 4, &quot;hello&quot;, &quot;hello&quot;, 4]) == [[1,1],[4,4,4],[&quot;hello&quot;,&quot;hello&quot;],[4]]&#10;    assert group_equal([1, 2, 3, 4]) == [[1], [2], [3], [4]]&#10;    assert group_equal([1]) == [[1]]&#10;    assert group_equal([]) == []&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    Given a list of elements, create and return a list whose elements are lists that contain the consecutive runs of equal elements of the original list. Note that elements that aren’t duplicated in the original list should become singleton lists in the result, so that every element gets included in the resulting list of lists.&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; &#10;    &#10;        List of str and int.&#10;    &#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; &#10;        List of lists of str and int&#10;    &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;group_equal([1, 1, 4, 4, 4, &quot;hello&quot;, &quot;hello&quot;, 4]) == [[1,1],[4,4,4],[&quot;hello&quot;,&quot;hello&quot;],[4]]&#10;group_equal([1, 2, 3, 4]) == [[1], [2], [3], [4]]&#10;group_equal([1]) == [[1]]&#10;group_equal([]) == []&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&lt;i&gt;The mission was taken from Python CCPS 109 Fall 2018. It is taught for Ryerson Chang School of Continuing Education by &lt;a href=&quot;http://www.scs.ryerson.ca/~ikokkari/&quot;&gt;Ilkka Kokkarinen&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="605" />
                      <option name="index" value="8" />
                      <option name="name" value="Group Equal consecutive" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def group_equal(els):&#10;    # your code here&#10;    return els&#10;&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(group_equal([1, 1, 4, 4, 4, &quot;hello&quot;, &quot;hello&quot;, 4]))&#10;    &#10;    # These &quot;asserts&quot; are used for self-checking and not for an auto-testing&#10;    assert group_equal([1, 1, 4, 4, 4, &quot;hello&quot;, &quot;hello&quot;, 4]) == [[1,1],[4,4,4],[&quot;hello&quot;,&quot;hello&quot;],[4]]&#10;    assert group_equal([1, 2, 3, 4]) == [[1], [2], [3], [4]]&#10;    assert group_equal([1]) == [[1]]&#10;    assert group_equal([]) == []&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                  </list>
                </option>
              </CheckiOStation>
              <CheckiOStation>
                <option name="customPresentableName" />
                <option name="id" value="18" />
                <option name="index" value="5" />
                <option name="name" value="O'Reilly" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CheckiOMission>
                      <option name="code" value="from typing import List&#10;&#10;def checkio(data: List[int]) -&gt; [int, float]:&#10;&#10;    #replace this for solution&#10;    return data[0]&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(checkio([1, 2, 3, 4, 5]))&#10;&#10;    assert checkio([1, 2, 3, 4, 5]) == 3, &quot;Sorted list&quot;&#10;    assert checkio([3, 1, 2, 5, 3]) == 3, &quot;Not sorted list&quot;&#10;    assert checkio([1, 300, 2, 200, 1]) == 2, &quot;It's not an average&quot;&#10;    assert checkio([3, 6, 20, 99, 10, 15]) == 12.5, &quot;Even length&quot;&#10;    print(&quot;Start the long test&quot;)&#10;    assert checkio(list(range(1000000))) == 499999.5, &quot;Long.&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;story&quot; style=&quot;margin-bottom: 0&quot;&gt;&#10;    &lt;div style=&quot;text-align: center&quot;&gt;&#10;        &lt;img src=&quot;https://static.checkio.org/media/task/media/e412c7aa5ddb4845a7cfdf394d070c0c/elki.png&quot; title=&quot;elki&quot; alt=&quot;elki&quot; width=&quot;600px&quot;&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    A median is a numerical value separating the upper half of a &lt;strong&gt;sorted&lt;/strong&gt; array of numbers from the lower half.&#10;    In a list where there are an odd number of entities, the median is the number found in the middle of the array.&#10;    If the array contains an even number of entities, then there is no single middle value, instead the median becomes&#10;    the average of the two numbers found in the middle.&#10;    For this mission, you are given a non-empty array of natural numbers (X). With it, you must separate the upper half of&#10;    the numbers from the lower half and find the median.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; An array as a list of integers.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The median as a float or an integer.&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;checkio([1, 2, 3, 4, 5]) == 3&#10;checkio([3, 1, 2, 5, 3]) == 3&#10;checkio([1, 300, 2, 200, 1]) == 2&#10;checkio([3, 6, 20, 99, 10, 15]) == 12.5&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&lt;br&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used:&lt;/strong&gt;&#10;    The median has usage for Statistics and Probability theory,&#10;    it has especially significant value for skewed distribution.&#10;    For example: we want to know average wealth of people from a set of data --&#10;    100 people earn $100 in month and 10 people earn $1,000,000. If we average it out,&#10;    we get $91,000. This is weird value and does nothing to show us the real picture.&#10;    In this case the median would give to us more useful value and a better picture.&#10;    &lt;a href=&quot;http://en.wikipedia.org/wiki/Median&quot;&gt;The Article at Wikipedia.&lt;/a&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&lt;strong&gt;Precondition: &lt;/strong&gt;&lt;br&gt;&#10;    1 &amp;lt; len(data) &amp;le; 1000&lt;br&gt;&#10;    all(0 &amp;le; x &lt; 10 ** 6 for x in data)&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="186" />
                      <option name="index" value="1" />
                      <option name="name" value="Median" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="from typing import List&#10;&#10;def checkio(data: List[int]) -&gt; [int, float]:&#10;&#10;    #replace this for solution&#10;    return data[0]&#10;&#10;#These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(checkio([1, 2, 3, 4, 5]))&#10;&#10;    assert checkio([1, 2, 3, 4, 5]) == 3, &quot;Sorted list&quot;&#10;    assert checkio([3, 1, 2, 5, 3]) == 3, &quot;Not sorted list&quot;&#10;    assert checkio([1, 300, 2, 200, 1]) == 2, &quot;It's not an average&quot;&#10;    assert checkio([3, 6, 20, 99, 10, 15]) == 12.5, &quot;Even length&quot;&#10;    print(&quot;Start the long test&quot;)&#10;    assert checkio(list(range(1000000))) == 499999.5, &quot;Long.&quot;&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def recall_password(cipher_grille, ciphered_password):&#10;    return &quot;&quot;&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert recall_password(&#10;        ('X...',&#10;         '..X.',&#10;         'X..X',&#10;         '....'),&#10;        ('itdf',&#10;         'gdce',&#10;         'aton',&#10;         'qrdi')) == 'icantforgetiddqd', 'First example'&#10;&#10;    assert recall_password(&#10;        ('....',&#10;         'X..X',&#10;         '.X..',&#10;         '...X'),&#10;        ('xhwc',&#10;         'rsqx',&#10;         'xqzz',&#10;         'fyzr')) == 'rxqrwsfzxqxzhczy', 'Second example'&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;img class=&quot;for_info_only half&quot; style=&quot;float: left&quot; src=&quot;https://static.checkio.org/media/task/media/95d396addcaa4803a4ec528f61a6fabc/cipher_map_illustration.png&quot;&gt;&#10;&#10;&lt;div class=&quot;story&quot;&gt;&#10;    &lt;p&gt;&quot;Nikola, A1213pokl, bAse730onE.&quot;&lt;/p&gt;&#10;&#10;    &lt;p&gt;&quot;Yes Sofia, what is it?&quot;&lt;/p&gt;&#10;&#10;    &lt;p&gt;&quot;You tell me! Your torture device is singing my circuits with its new lexicon. There is no way I can remember&#10;        these new passwords and the thing doesn't accept simple and easy ones!&quot;&lt;/p&gt;&#10;&#10;    &lt;p&gt;&quot;Oh, those will be good passwords, you can use them.&quot;&lt;/p&gt;&#10;&#10;    &lt;p&gt;&quot;Why can’t you use them!?&quot; Sofia asked almost hysterically. &quot;I’ve already forgotten them! Do you want me locked&#10;        out of my own house for eternity? Come up with something easier so I don’t have to keep all that randomized&#10;        gobbledygook in my head.&quot; Sofia rarely acted so demanding but she had reached her boiling point. The stress of&#10;        the past few days coupled with her exhaustion had brought her to the edge.&lt;/p&gt;&#10;&#10;    &lt;p&gt;&quot;Don’t worry, I was expecting something easier to remember. Why don’t you use the cipher map to help with your&#10;        password.&#10;        With it we can encrypt all the passwords and leave them right next to the door or in a special place that we&#10;        all agree upon. You will only be able to read them with the use of the cipher map which we will take with us&#10;        on our trip.&lt;/p&gt;&#10;&#10;    &lt;p&gt;&quot;So I don’t need to remember all of those passwords? All we have to do is make sure that we don't lose the&#10;        cipher map.&quot; asked Sofia with hopefully.&lt;/p&gt;&#10;&#10;    &lt;p&gt;&quot;Yes, that is correct.&quot;&lt;/p&gt;&#10;&#10;    &lt;p&gt;&quot;Awesome. Show me the cipher map and explain how this works one more time.&quot;&lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    Help Sofia write a decrypter for the passwords that Nikola will encrypt through the cipher map.&#10;    A cipher grille is a 4×4 square of paper with four windows cut out.&#10;    Placing the grille on a paper sheet of the same size, the encoder writes down the first four symbols of his password&#10;    inside the windows (see fig. below).&#10;    After that, the encoder turns the grille 90 degrees clockwise.&#10;    The symbols written earlier become hidden under the grille and clean paper appears inside the windows.&#10;    The encoder then writes down the next four symbols of the password in the windows and turns the grille 90 degrees&#10;    again.&#10;    Then, they write down the following four symbols and turns the grille once more.&#10;    Lastly, they write down the final four symbols of the password.&#10;    Without the same cipher grille, it is difficult to discern the password from the resulting square comprised of 16&#10;    symbols.&#10;    Thus, the encoder can be confident that no hooligan will easily gain access to the locked door.&#10;&lt;/p&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot; style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/95d396addcaa4803a4ec528f61a6fabc/cipher_map.png&quot; style=&quot;max-height: 350px&quot; /&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;Write a module that enables the robots to easily recall their passwords through codes when they return home.&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    The cipher grille and the ciphered password are represented as an array (tuple) of strings.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; A cipher grille and a ciphered password as a tuples of strings.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; The password as a string.&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;recall_password(&#10;    ('X...',&#10;     '..X.',&#10;     'X..X',&#10;     '....'),&#10;    ('itdf',&#10;     'gdce',&#10;     'aton',&#10;     'qrdi')) == 'icantforgetiddqd'&#10;&#10;recall_password(&#10;    ('....',&#10;     'X..X',&#10;     '.X..',&#10;     '...X'),&#10;    ('xhwc',&#10;     'rsqx',&#10;     'xqzz',&#10;     'fyzr')) == 'rxqrwsfzxqxzhczy'&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Here you can learn how to work with 2D arrays.&#10;    You also get to learn about the ancient Grille Cipher,&#10;    a technique of encoding messages which has been used for half a millenium.&#10;    The earliest known description of the grille cipher comes from the Italian mathematician, Girolamo Cardano in 1550.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    len(cipher_grille) == 4&lt;br&gt;&#10;    len(ciphered_password) == 4&lt;br&gt;&#10;    all(len(row) == 4 for row in ciphered_password)&lt;br&gt;&#10;    all(len(row) == 4 for row in cipher_grille)&lt;br&gt;&#10;    all(all(ch in string.ascii_lowercase for ch in row) for row in ciphered_password)&lt;br&gt;&#10;    all(all(ch == &quot;X&quot; or ch == &quot;.&quot; for ch in row) for row in cipher_grille)&lt;br&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="290" />
                      <option name="index" value="2" />
                      <option name="name" value="Cipher Map" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def recall_password(cipher_grille, ciphered_password):&#10;    return &quot;&quot;&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert recall_password(&#10;        ('X...',&#10;         '..X.',&#10;         'X..X',&#10;         '....'),&#10;        ('itdf',&#10;         'gdce',&#10;         'aton',&#10;         'qrdi')) == 'icantforgetiddqd', 'First example'&#10;&#10;    assert recall_password(&#10;        ('....',&#10;         'X..X',&#10;         '.X..',&#10;         '...X'),&#10;        ('xhwc',&#10;         'rsqx',&#10;         'xqzz',&#10;         'fyzr')) == 'rxqrwsfzxqxzhczy', 'Second example'&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def check_connection(network, first, second):&#13;&#10;    return True or False&#13;&#10;&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert check_connection(&#13;&#10;        (&quot;dr101-mr99&quot;, &quot;mr99-out00&quot;, &quot;dr101-out00&quot;, &quot;scout1-scout2&quot;,&#13;&#10;         &quot;scout3-scout1&quot;, &quot;scout1-scout4&quot;, &quot;scout4-sscout&quot;, &quot;sscout-super&quot;),&#13;&#10;        &quot;scout2&quot;, &quot;scout3&quot;) == True, &quot;Scout Brotherhood&quot;&#13;&#10;    assert check_connection(&#13;&#10;        (&quot;dr101-mr99&quot;, &quot;mr99-out00&quot;, &quot;dr101-out00&quot;, &quot;scout1-scout2&quot;,&#13;&#10;         &quot;scout3-scout1&quot;, &quot;scout1-scout4&quot;, &quot;scout4-sscout&quot;, &quot;sscout-super&quot;),&#13;&#10;        &quot;super&quot;, &quot;scout2&quot;) == True, &quot;Super Scout&quot;&#13;&#10;    assert check_connection(&#13;&#10;        (&quot;dr101-mr99&quot;, &quot;mr99-out00&quot;, &quot;dr101-out00&quot;, &quot;scout1-scout2&quot;,&#13;&#10;         &quot;scout3-scout1&quot;, &quot;scout1-scout4&quot;, &quot;scout4-sscout&quot;, &quot;sscout-super&quot;),&#13;&#10;        &quot;dr101&quot;, &quot;sscout&quot;) == False, &quot;I don't know any scouts.&quot;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    Sophia's drones are not soulless and stupid drones; they can make and have friends.&#10;    In fact, they already are working for the their own social network just for drones!&#10;    Sophia has received the data about the connections between drones and she wants to know more about relations between them.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    We have an array of straight connections between drones.&#10;    Each connection is represented as a string with two names of friends separated by hyphen.&#10;    For example: &quot;dr101-mr99&quot; means what the &lt;em&gt;dr101&lt;/em&gt; and &lt;em&gt;mr99&lt;/em&gt; are friends.&#10;    Your should write a function that allow determine more complex connection between drones.&#10;    You are given two names also. Try to determine if they are related through common bonds by any depth.&#10;    For example: if two drones have a common friends or friends who have common friends and so on.&#10;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img class=&quot;for_info_only&quot; title=&quot;network&quot; src=&quot;https://static.checkio.org/media/task/media/1a7ec6b18a52406db09137714f7fb5c3/network.png&quot; alt=&quot;network&quot; width=&quot;600px&quot;/&gt;&#10;    &lt;img class=&quot;for_editor_only&quot; title=&quot;network&quot; src=&quot;https://static.checkio.org/media/task/media/1a7ec6b18a52406db09137714f7fb5c3/network.png&quot; alt=&quot;network&quot; width=&quot;380px&quot;/&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Let's look at examples:&lt;br&gt;&#10;    &lt;em&gt;scout2&lt;/em&gt; and &lt;em&gt;scout3&lt;/em&gt; have the common friend &lt;em&gt;scout1&lt;/em&gt; so they are related.&#10;    &lt;em&gt;super&lt;/em&gt; and &lt;em&gt;scout2&lt;/em&gt;  are related through &lt;em&gt;sscout&lt;/em&gt;, &lt;em&gt;scout4&lt;/em&gt; and &lt;em&gt;scout1&lt;/em&gt;.&#10;    But &lt;em&gt;dr101&lt;/em&gt; and &lt;em&gt;sscout&lt;/em&gt; are not related.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Three arguments: Information about friends as a tuple of strings; first name as a string;&#10;    second name as a string.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Are these drones related or not as a boolean.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;check_connection(&#10;    (&quot;dr101-mr99&quot;, &quot;mr99-out00&quot;, &quot;dr101-out00&quot;, &quot;scout1-scout2&quot;,&#10;     &quot;scout3-scout1&quot;, &quot;scout1-scout4&quot;, &quot;scout4-sscout&quot;, &quot;sscout-super&quot;),&#10;    &quot;scout2&quot;, &quot;scout3&quot;) == True&#10;check_connection(&#10;    (&quot;dr101-mr99&quot;, &quot;mr99-out00&quot;, &quot;dr101-out00&quot;, &quot;scout1-scout2&quot;,&#10;     &quot;scout3-scout1&quot;, &quot;scout1-scout4&quot;, &quot;scout4-sscout&quot;, &quot;sscout-super&quot;),&#10;    &quot;dr101&quot;, &quot;sscout&quot;) == False&#10;    &lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This concept will help you find not too obvious connections with the building of bond networks.&#10;    And how to work social networks.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    len(network) &amp;le; 45&lt;br&gt;&#10;    if &lt;em&gt;&quot;name1-name2&quot;&lt;/em&gt; in &lt;em&gt;network&lt;/em&gt;, then &lt;em&gt;&quot;name2-name1&quot;&lt;/em&gt; not in &lt;em&gt;network&lt;/em&gt;&lt;br&gt;&#10;    3 &amp;le; len(drone_name) &amp;le; 6&lt;br&gt;&#10;    &lt;em&gt;first_name&lt;/em&gt; and &lt;em&gt;second_name&lt;/em&gt; in &lt;em&gt;network&lt;/em&gt;.&#10;&lt;/p&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="319" />
                      <option name="index" value="3" />
                      <option name="name" value="How to Find Friends" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def check_connection(network, first, second):&#10;    return True or False&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert check_connection(&#10;        (&quot;dr101-mr99&quot;, &quot;mr99-out00&quot;, &quot;dr101-out00&quot;, &quot;scout1-scout2&quot;,&#10;         &quot;scout3-scout1&quot;, &quot;scout1-scout4&quot;, &quot;scout4-sscout&quot;, &quot;sscout-super&quot;),&#10;        &quot;scout2&quot;, &quot;scout3&quot;) == True, &quot;Scout Brotherhood&quot;&#10;    assert check_connection(&#10;        (&quot;dr101-mr99&quot;, &quot;mr99-out00&quot;, &quot;dr101-out00&quot;, &quot;scout1-scout2&quot;,&#10;         &quot;scout3-scout1&quot;, &quot;scout1-scout4&quot;, &quot;scout4-sscout&quot;, &quot;sscout-super&quot;),&#10;        &quot;super&quot;, &quot;scout2&quot;) == True, &quot;Super Scout&quot;&#10;    assert check_connection(&#10;        (&quot;dr101-mr99&quot;, &quot;mr99-out00&quot;, &quot;dr101-out00&quot;, &quot;scout1-scout2&quot;,&#10;         &quot;scout3-scout1&quot;, &quot;scout1-scout4&quot;, &quot;scout4-sscout&quot;, &quot;sscout-super&quot;),&#10;        &quot;dr101&quot;, &quot;sscout&quot;) == False, &quot;I don't know any scouts.&quot;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def i_love_python():&#10;    &quot;&quot;&quot;&#10;        Let's explain why do we love Python.&#10;    &quot;&quot;&quot;&#10;    return &quot;I love Python&quot;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert i_love_python() == &quot;I love Python!&quot;&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;story&quot;&gt;&#10;    &lt;p&gt;&#10;        Over six years ago, in December 1989, I was looking for a &quot;hobby&quot; programming project that would keep me&#10;        occupied during the week around Christmas. My office (a government-run research lab in Amsterdam) would be&#10;        closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new&#10;        scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix/C hackers. I&#10;        chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty&#10;        Python's Flying Circus).&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;        Today, I can safely say that Python has changed my life. I have moved to a different continent. I spend my&#10;        working days developing large systems in Python, when I'm not hacking on Python or answering Python-related&#10;        email. There are Python T-shirts, workshops, mailing lists, a newsgroup, and now a book. Frankly, my only&#10;        unfulfilled wish is to have my picture on the front page of the New York Times.&#10;    &lt;/p&gt;&#10;&#10;    &lt;p&gt;&#10;        -- Guido van Rossum, Foreword for &quot;Programming Python&quot;, Reston, VA, May 1996&#10;    &lt;/p&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    This mission is simple to solve. You are given a function called &quot;i_love_python&quot; which will only return the phrase -&#10;    &lt;strong&gt;&quot;I love Python!&quot;&lt;/strong&gt;&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Let's write an essay in python code which will explain why you love python (if you don't love it, when we will make&#10;    an additional mission special for the haters). Publishing the default solution will only earn you 0 points as the&#10;    goal is to earn points through votes for your code essay.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Nothing.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The string &quot;I love Python!&quot;.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;    &lt;pre class=&quot;brush: python&quot;&gt;&#10;i_love_python() == &quot;I love Python!&quot;&#10;    &lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    This mission revolves around code literacy.&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="356" />
                      <option name="index" value="4" />
                      <option name="name" value="I Love Python!" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def i_love_python():&#10;    &quot;&quot;&quot;&#10;        Let's explain why do we love Python.&#10;    &quot;&quot;&quot;&#10;    return &quot;I love Python&quot;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert i_love_python() == &quot;I love Python!&quot;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="class Friends:&#10;    def __init__(self, connections):&#10;        raise NotImplementedError&#10;&#10;    def add(self, connection):&#10;        raise NotImplementedError&#10;&#10;    def remove(self, connection):&#10;        raise NotImplementedError&#10;&#10;    def names(self):&#10;        raise NotImplementedError&#10;&#10;    def connected(self, name):&#10;        raise NotImplementedError&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    letter_friends = Friends(({&quot;a&quot;, &quot;b&quot;}, {&quot;b&quot;, &quot;c&quot;}, {&quot;c&quot;, &quot;a&quot;}, {&quot;a&quot;, &quot;c&quot;}))&#10;    digit_friends = Friends([{&quot;1&quot;, &quot;2&quot;}, {&quot;3&quot;, &quot;1&quot;}])&#10;    assert letter_friends.add({&quot;c&quot;, &quot;d&quot;}) is True, &quot;Add&quot;&#10;    assert letter_friends.add({&quot;c&quot;, &quot;d&quot;}) is False, &quot;Add again&quot;&#10;    assert letter_friends.remove({&quot;c&quot;, &quot;d&quot;}) is True, &quot;Remove&quot;&#10;    assert digit_friends.remove({&quot;c&quot;, &quot;d&quot;}) is False, &quot;Remove non exists&quot;&#10;    assert letter_friends.names() == {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}, &quot;Names&quot;&#10;    assert letter_friends.connected(&quot;d&quot;) == set(), &quot;Non connected name&quot;&#10;    assert letter_friends.connected(&quot;a&quot;) == {&quot;b&quot;, &quot;c&quot;}, &quot;Connected name&quot;&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;style&gt;&#10;    pre.example {&#10;        border: 1px solid #aaa;&#10;        border-radius: 3px;&#10;        background: #eee;&#10;        margin-left: 20px;&#10;        padding: 5px;&#10;        overflow: auto;&#10;    }&#10;&#10;    p.indent {&#10;        margin-left: 20px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;p&gt;&#10;    For the mission&#10;    &lt;a href=&quot;http://www.checkio.org/mission/find-friends/share/3061fec1b35588e4bae8ad69db073aab/&quot;&gt;&#10;        &quot;How to find friends&quot;&#10;    &lt;/a&gt;, it’s nice to have access to a specially made data structure. In this mission we will&#10;    realize a data structure which we will use to store and work with a friend network.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    The class &quot;Friends&quot; should contains names and the connections between them. Names are&#10;    represented as strings and are case sensitive. Connections are undirected, so if &quot;sophia&quot; is&#10;    connected with &quot;nikola&quot;, then it's also correct in reverse.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;em&gt;class&lt;/em&gt; &lt;strong&gt;Friends&lt;/strong&gt;&lt;em&gt;(connections)&lt;/em&gt;&#10;&lt;/p&gt;&#10;&lt;p class=&quot;indent&quot;&gt;&#10;    Returns a new Friends instance. &lt;em&gt;&quot;connections&quot;&lt;/em&gt; is an iterable of sets with two elements&#10;    in each. Each connection contains two names as strings. Connections can be repeated in the&#10;    initial data, but inside it's stored once. Each connection has only two states - existing or not.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;pre class=&quot;example&quot;&gt;&#10;&gt;&gt;&gt; Friends(({&quot;a&quot;, &quot;b&quot;}, {&quot;b&quot;, &quot;c&quot;}, {&quot;c&quot;, &quot;a&quot;}, {&quot;a&quot;, &quot;c&quot;}))&#10;&gt;&gt;&gt; Friends([{&quot;1&quot;, &quot;2&quot;}, {&quot;3&quot;, &quot;1&quot;}])&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;add&lt;/strong&gt;(connection)&#10;&lt;/p&gt;&#10;&lt;p class=&quot;indent&quot;&gt;&#10;    Add a connection in the instance. &lt;em&gt;&quot;connection&quot;&lt;/em&gt;&#10;    is a set of two names (strings).&#10;    Returns True if this connection is new.&#10;    Returns False if this connection exists already.&#10;&lt;/p&gt;&#10;&lt;pre class=&quot;example&quot;&gt;&#10;&gt;&gt;&gt; f = Friends([{&quot;1&quot;, &quot;2&quot;}, {&quot;3&quot;, &quot;1&quot;}])&#10;&gt;&gt;&gt; f.add({&quot;1&quot;, &quot;3&quot;})&#10;False&#10;&gt;&gt;&gt; f.add({&quot;4&quot;, &quot;5&quot;})&#10;True&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;remove&lt;/strong&gt;(connection)&#10;&lt;/p&gt;&#10;&lt;p class=&quot;indent&quot;&gt;&#10;    Remove a connection from the instance. &lt;em&gt;&quot;connection&quot;&lt;/em&gt;&#10;    is a set of two names (strings).&#10;    Returns True if this connection exists.&#10;    Returns False if this connection is not in the instance.&#10;&lt;/p&gt;&#10;&lt;pre class=&quot;example&quot;&gt;&#10;&gt;&gt;&gt; f = Friends([{&quot;1&quot;, &quot;2&quot;}, {&quot;3&quot;, &quot;1&quot;}])&#10;&gt;&gt;&gt; f.remove({&quot;1&quot;, &quot;3&quot;})&#10;True&#10;&gt;&gt;&gt; f.remove({&quot;4&quot;, &quot;5&quot;})&#10;False&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;names&lt;/strong&gt;()&#10;&lt;/p&gt;&#10;&lt;p class=&quot;indent&quot;&gt;&#10;    Returns a set of names. The set contains only names which are connected with somebody.&#10;&lt;/p&gt;&#10;&lt;pre class=&quot;example&quot;&gt;&#10;&gt;&gt;&gt; f = Friends(({&quot;a&quot;, &quot;b&quot;}, {&quot;b&quot;, &quot;c&quot;}, {&quot;c&quot;, &quot;d&quot;}))&#10;&gt;&gt;&gt; f.names()&#10;{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;}&#10;&gt;&gt;&gt; f.remove({&quot;d&quot;, &quot;c&quot;})&#10;True&#10;&gt;&gt;&gt; f.names()&#10;{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;connected&lt;/strong&gt;(name)&#10;&lt;/p&gt;&#10;&lt;p class=&quot;indent&quot;&gt;&#10;    Returns a set of names which is connected with the given &lt;em&gt;&quot;name&quot;&lt;/em&gt;.&#10;    If &quot;name&quot; does not exist in the instance, then return an empty set.&#10;&lt;/p&gt;&#10;&lt;pre class=&quot;example&quot;&gt;&#10;&gt;&gt;&gt; f = Friends(({&quot;a&quot;, &quot;b&quot;}, {&quot;b&quot;, &quot;c&quot;}, {&quot;c&quot;, &quot;a&quot;}))&#10;&gt;&gt;&gt; f.connected(&quot;a&quot;)&#10;{&quot;b&quot;, &quot;c&quot;}&#10;&gt;&gt;&gt; f.connected(&quot;d&quot;)&#10;set()&#10;&gt;&gt;&gt; f.remove({&quot;c&quot;, &quot;a&quot;})&#10;True&#10;&gt;&gt;&gt; f.connected(&quot;c&quot;)&#10;{&quot;b&quot;}&#10;&gt;&gt;&gt; f.remove({&quot;c&quot;, &quot;b&quot;})&#10;True&#10;&gt;&gt;&gt; f.connected(&quot;c&quot;)&#10;set()&#10;&lt;/pre&gt;&#10;&lt;br&gt;&#10;&lt;p&gt;&#10;    In this mission all data will be correct and you don't need to implement value checking.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Statements and expression with the Friends class.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The behaviour as described.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    Here you will implement a class with mutable states. This is not a simple structure with a&#10;    couple of functions, but object representation with more complex structure.&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    All data is correct.&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="389" />
                      <option name="index" value="5" />
                      <option name="name" value="Friends" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="class Friends:&#10;    def __init__(self, connections):&#10;        raise NotImplementedError&#10;&#10;    def add(self, connection):&#10;        raise NotImplementedError&#10;&#10;    def remove(self, connection):&#10;        raise NotImplementedError&#10;&#10;    def names(self):&#10;        raise NotImplementedError&#10;&#10;    def connected(self, name):&#10;        raise NotImplementedError&#10;&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    letter_friends = Friends(({&quot;a&quot;, &quot;b&quot;}, {&quot;b&quot;, &quot;c&quot;}, {&quot;c&quot;, &quot;a&quot;}, {&quot;a&quot;, &quot;c&quot;}))&#10;    digit_friends = Friends([{&quot;1&quot;, &quot;2&quot;}, {&quot;3&quot;, &quot;1&quot;}])&#10;    assert letter_friends.add({&quot;c&quot;, &quot;d&quot;}) is True, &quot;Add&quot;&#10;    assert letter_friends.add({&quot;c&quot;, &quot;d&quot;}) is False, &quot;Add again&quot;&#10;    assert letter_friends.remove({&quot;c&quot;, &quot;d&quot;}) is True, &quot;Remove&quot;&#10;    assert digit_friends.remove({&quot;c&quot;, &quot;d&quot;}) is False, &quot;Remove non exists&quot;&#10;    assert letter_friends.names() == {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}, &quot;Names&quot;&#10;    assert letter_friends.connected(&quot;d&quot;) == set(), &quot;Non connected name&quot;&#10;    assert letter_friends.connected(&quot;a&quot;) == {&quot;b&quot;, &quot;c&quot;}, &quot;Connected name&quot;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def non_repeat(line):&#13;&#10;    &quot;&quot;&quot;&#13;&#10;        the longest substring without repeating chars&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    # your code here&#13;&#10;    return line&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert non_repeat('aaaaa') == 'a', &quot;First&quot;&#13;&#10;    assert non_repeat('abdjwawk') == 'abdjw', &quot;Second&quot;&#13;&#10;    assert non_repeat('abcabcffab') == 'abcf', &quot;Third&quot;&#13;&#10;    print('&quot;Run&quot; is good. How is &quot;Check&quot;?')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;i&gt;&lt;a href=&quot;https://py.checkio.org/forum/post/11382/4-mission-ideas-substrings/&quot;&gt;There are four substring missions&lt;/a&gt; that were born all in one day and you shouldn’t be needed more than one day to solve them. All of those mission can be simply solved by brute force, but is it always the best way to go? (you might not have access to all of those missions yet, but they are going to be available with more opened islands on the map).&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    A very similar to the first is the second mission of the series with only one distinction is that you should look in a completely different way. You need to find the first longest substring with all unique letters. For example, in substring &quot;abca&quot; we have two substrings with unique letters &quot;abc&quot; and &quot;bca&quot;, but we should take the first one, so the answer is &quot;abc&quot;. &#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; String.&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; String. &#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;non_repeat('aaaaa') == 'a'&#10;non_repeat('abdjwawk') == 'abdjw'&#10;non_repeat('abcabcffab') == 'abcf'&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="495" />
                      <option name="index" value="6" />
                      <option name="name" value="Long Non Repeat" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def non_repeat(line):&#10;    &quot;&quot;&quot;&#10;        the longest substring without repeating chars&#10;    &quot;&quot;&quot;&#10;    # your code here&#10;    return line&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert non_repeat('aaaaa') == 'a', &quot;First&quot;&#10;    assert non_repeat('abdjwawk') == 'abdjw', &quot;Second&quot;&#10;    assert non_repeat('abcabcffab') == 'abcf', &quot;Third&quot;&#10;    print('&quot;Run&quot; is good. How is &quot;Check&quot;?')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="VALUES = {'e': 1,  'a': 1, 'i': 1, 'o': 1, 'n': 1, 'r': 1,&#10;          't': 1,  'l': 1, 's': 1, 'u': 1, 'd': 2, 'g': 2,&#10;          'b': 3,  'c': 3, 'm': 3, 'p': 3, 'f': 4, 'h': 4,&#10;          'v': 4,  'w': 4, 'y': 4, 'k': 5, 'j': 8, 'x': 8,&#10;          'q': 10, 'z': 10}&#10;&#10;def worth_of_words(words):&#10;    #replace this for solution&#10;    return words&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(worth_of_words(['hi', 'quiz', 'bomb', 'president']))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert worth_of_words(['hi', 'quiz', 'bomb', 'president']) == 'quiz'&#10;    assert worth_of_words(['zero', 'one', 'two', 'three', 'four', 'five']) == 'zero'&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;!-- Describe task in general --&gt;&#10;&#10;&lt;p&gt;&#10;    Hey, are you ready for a Scrabble game party?&lt;br&gt;    &#10;    You have a list of words and you have to find only one that is the most valuable among  them.&lt;br&gt;&#10;    Rules:&lt;br&gt;&#10;    The worth of each word is equivalent to the sum of letters which it consists of.&lt;br&gt;&#10;    The values of the letters are as follow:&lt;br&gt;&#10;    e, a, i, o, n, r, t, l, s, u = 1&lt;br&gt;&#10;    d, g = 2&lt;br&gt;&#10;    b, c, m, p = 3&lt;br&gt;&#10;    f, h, v, w, y = 4&lt;br&gt;&#10;    k = 5&lt;br&gt;&#10;    j, x = 8&lt;br&gt;&#10;    q, z = 10&lt;br&gt;&#10;    For example, the worth of the word 'dog' is 5, because 'd' = 2, 'o' = 1 and 'g' = 2.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&#10;    &lt;img  title=&quot;Worth of words&quot; src=&quot;https://static.checkio.org/media/task/media/22eb44f2e71e4da08538c234964641c9/words.png&quot; alt=&quot;example&quot; style=&quot;max-height: 70px&quot;&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Explain input and output values --&gt;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; A list of words.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; The most valuable word.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;!-- Put some usage examples --&gt;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;&lt;p&gt;&#10;&lt;strong&gt;Example:&lt;/strong&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;worth_of_words(['hi', 'quiz', 'bomb', 'president']) == 'quiz'&#10;worth_of_words(['zero', 'one', 'two', 'three', 'four', 'five']) == 'zero'&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Here you can explain how it can be used in development and what is usage of this. --&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    For the lexicographic analysis of the texts.&#10;&lt;/p&gt;&#10;&#10;&lt;!-- Here you can explain some constraints for input--&gt;&#10;&lt;!-- The section is optional --&gt;&#10;&lt;p&gt;&lt;strong&gt;Precondition&lt;/strong&gt;:&lt;br&gt;&#10;    2 &lt;= words &lt;= 10&lt;br&gt;&#10;    Real words only&lt;br&gt;&#10;    lowercase letters only&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="534" />
                      <option name="index" value="7" />
                      <option name="name" value="Worth of Words" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="VALUES = {'e': 1,  'a': 1, 'i': 1, 'o': 1, 'n': 1, 'r': 1,&#10;          't': 1,  'l': 1, 's': 1, 'u': 1, 'd': 2, 'g': 2,&#10;          'b': 3,  'c': 3, 'm': 3, 'p': 3, 'f': 4, 'h': 4,&#10;          'v': 4,  'w': 4, 'y': 4, 'k': 5, 'j': 8, 'x': 8,&#10;          'q': 10, 'z': 10}&#10;&#10;def worth_of_words(words):&#10;    #replace this for solution&#10;    return words&#10;&#10;if __name__ == '__main__':&#10;    print(&quot;Example:&quot;)&#10;    print(worth_of_words(['hi', 'quiz', 'bomb', 'president']))&#10;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert worth_of_words(['hi', 'quiz', 'bomb', 'president']) == 'quiz'&#10;    assert worth_of_words(['zero', 'one', 'two', 'three', 'four', 'five']) == 'zero'&#10;    print(&quot;Coding complete? Click 'Check' to earn cool rewards!&quot;)&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="class Text:&#13;&#10;    pass&#13;&#10;&#13;&#10;class SavedText:&#13;&#10;    pass&#13;&#10;&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;&#13;&#10;    text = Text()&#13;&#10;    saver = SavedText()&#13;&#10;    &#13;&#10;    text.write(&quot;At the very beginning &quot;)&#13;&#10;    saver.save_text(text)&#13;&#10;    text.set_font(&quot;Arial&quot;)&#13;&#10;    saver.save_text(text)&#13;&#10;    text.write(&quot;there was nothing.&quot;)&#13;&#10;&#13;&#10;    assert text.show() == &quot;[Arial]At the very beginning there was nothing.[Arial]&quot;&#13;&#10;    &#13;&#10;    text.restore(saver.get_version(0))&#13;&#10;    assert text.show() == &quot;At the very beginning &quot;&#13;&#10;&#13;&#10;    print(&quot;Coding complete? Let's try tests!&quot;)" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;I believe that many of you have dealt with such a problem. One day you are working in the text editor, saving the document and closing it. And the next day you are re-reading the text and realizing that one of the previous versions was better but there is no way to get it back. This thing can be easily handled by the version control system (for example, git), but it’s used mostly by the developers and not the ordinary people who work with texts. In this mission you’ll help the latter by creating a text editor prototype that supports the version control system, which will allow to save different versions of the text and restore any one of them.&lt;br&gt;&#10;Your task is to create 2 classes: Text and SavedText. The first will works with texts (adding, font changing, etc.), the second will control the versions and save them.&lt;br&gt;&lt;br&gt;&#10;Class Text should have the next methods:&lt;br&gt;&#10;&lt;strong&gt;write&lt;/strong&gt;(text) - adds (text) to the current text;&lt;br&gt;&#10;&lt;strong&gt;set_font&lt;/strong&gt;(font name) - sets the chosen font. Font is applied to the whole text, even if it’s added after the font is set. The font is displayed in the square brackets before and after the text: &quot;[Arial]...example...[Arial]&quot;. Font can be specified multiple times but only the last variant is displays;&lt;br&gt;&#10;&lt;strong&gt;show()&lt;/strong&gt; - returns the current text and font (if is was set);&lt;br&gt;&#10;&lt;strong&gt;restore&lt;/strong&gt;(SavedText.get_version(number)) - restores the text of the chosen version.&lt;br&gt;&#10;&lt;br&gt;&#10;Class SavedText should have the next methods:&lt;br&gt;&#10;&lt;strong&gt;save_text&lt;/strong&gt;(Text) - saves the current text and font. The first saved version has the number 0, the second - 1, and so on;&lt;br&gt;&#10;&lt;strong&gt;get_version&lt;/strong&gt;(number) - this method works with the 'restore' method and is used for choosing the needed version of the text.&lt;br&gt;&#10;&lt;br&gt;&#10;In this mission you can use the &lt;a href='https://en.wikipedia.org/wiki/Memento_pattern'&gt;Memento&lt;/a&gt; design pattern.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;&lt;strong&gt;Example&lt;/strong&gt;:&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;text = Text()&#10;saver = SavedText()&#10;    &#10;text.write(&quot;At the very beginning &quot;)&#10;saver.save_text(text)&#10;text.set_font(&quot;Arial&quot;)&#10;saver.save_text(text)&#10;text.write(&quot;there was nothing.&quot;)&#10;text.show() == &quot;[Arial]At the very beginning there was nothing.[Arial]&quot;&#10;    &#10;text.restore(saver.get_version(0))&#10;text.show() == &quot;At the very beginning &quot;&#10;&lt;/pre&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt;information about the text and saved copies.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt;the text after all of the commands.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&#10;    &lt;strong&gt;How it is used: &lt;/strong&gt;&#10;    To save the object’s previous states with the ability to return to them, in case something goes wrong.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    No more than 10 saved copies.&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="563" />
                      <option name="index" value="8" />
                      <option name="name" value="Text Editor" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="class Text:&#10;    pass&#10;&#10;class SavedText:&#10;    pass&#10;&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;&#10;    text = Text()&#10;    saver = SavedText()&#10;    &#10;    text.write(&quot;At the very beginning &quot;)&#10;    saver.save_text(text)&#10;    text.set_font(&quot;Arial&quot;)&#10;    saver.save_text(text)&#10;    text.write(&quot;there was nothing.&quot;)&#10;&#10;    assert text.show() == &quot;[Arial]At the very beginning there was nothing.[Arial]&quot;&#10;    &#10;    text.restore(saver.get_version(0))&#10;    assert text.show() == &quot;At the very beginning &quot;&#10;&#10;    print(&quot;Coding complete? Let's try tests!&quot;)" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                  </list>
                </option>
              </CheckiOStation>
              <CheckiOStation>
                <option name="customPresentableName" />
                <option name="id" value="32" />
                <option name="index" value="6" />
                <option name="name" value="SendGrid" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CheckiOMission>
                      <option name="code" value="def is_stressful(subj):&#10;    &quot;&quot;&quot;&#10;        recoognise stressful subject&#10;    &quot;&quot;&quot;&#10;    return False&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert is_stressful(&quot;Hi&quot;) == False, &quot;First&quot;&#10;    assert is_stressful(&quot;I neeed HELP&quot;) == True, &quot;Second&quot;&#10;    print('Done! Go Check it!')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/59ce692dcb1e480abc9cf269cab468ec/title.png&quot; style=&quot;max-height: 296px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p class=&quot;for_info_only&quot;&gt;&lt;i&gt;Sofia has had a very stressful month and decided to take a vacation for a week. To avoid any stress during her vacation she wants to forward emails with a stressful subject line to Stephen.&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    The function should recognise if a subject line is stressful. A stressful subject line means that all letters are in uppercase, and/or ends by at least 3 exclamation marks, and/or contains at least one of the following “red” words: &quot;help&quot;, &quot;asap&quot;, &quot;urgent&quot;. Any of those &quot;red&quot; words can be spelled in different ways - &quot;HELP&quot;, &quot;help&quot;, &quot;HeLp&quot;, &quot;H!E!L!P!&quot;, &quot;H-E-L-P&quot;, even in a very loooong way &quot;HHHEEEEEEEEELLP&quot;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Subject line as a string.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Boolean. &#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;is_stressful(&quot;Hi&quot;) == False&#10;is_stressful(&quot;I neeed HELP&quot;) == True&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Precondition:&lt;/strong&gt;&#10;    &lt;i&gt;Subject can be up to 100 letters&lt;/i&gt;&#10;&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="474" />
                      <option name="index" value="1" />
                      <option name="name" value="Stressful Subject" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def is_stressful(subj):&#10;    &quot;&quot;&quot;&#10;        recoognise stressful subject&#10;    &quot;&quot;&quot;&#10;    return False&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert is_stressful(&quot;Hi&quot;) == False, &quot;First&quot;&#10;    assert is_stressful(&quot;I neeed HELP&quot;) == True, &quot;Second&quot;&#10;    print('Done! Go Check it!')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def disconnected_users(net, users, source, crushes):&#13;&#10;    return 0&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    assert disconnected_users([&#13;&#10;        ['A', 'B'],&#13;&#10;        ['B', 'C'],&#13;&#10;        ['C', 'D']&#13;&#10;    ], {&#13;&#10;        'A': 10,&#13;&#10;        'B': 20,&#13;&#10;        'C': 30,&#13;&#10;        'D': 40&#13;&#10;    },&#13;&#10;        'A', ['C']) == 70, &quot;First&quot;&#13;&#10;&#13;&#10;    assert disconnected_users([&#13;&#10;        ['A', 'B'],&#13;&#10;        ['B', 'D'],&#13;&#10;        ['A', 'C'],&#13;&#10;        ['C', 'D']&#13;&#10;    ], {&#13;&#10;        'A': 10,&#13;&#10;        'B': 0,&#13;&#10;        'C': 0,&#13;&#10;        'D': 40&#13;&#10;    },&#13;&#10;        'A', ['B']) == 0, &quot;Second&quot;&#13;&#10;&#13;&#10;    assert disconnected_users([&#13;&#10;        ['A', 'B'],&#13;&#10;        ['A', 'C'],&#13;&#10;        ['A', 'D'],&#13;&#10;        ['A', 'E'],&#13;&#10;        ['A', 'F']&#13;&#10;    ], {&#13;&#10;        'A': 10,&#13;&#10;        'B': 10,&#13;&#10;        'C': 10,&#13;&#10;        'D': 10,&#13;&#10;        'E': 10,&#13;&#10;        'F': 10&#13;&#10;    },&#13;&#10;        'C', ['A']) == 50, &quot;Third&quot;&#13;&#10;&#13;&#10;    print('Done. Try to check now. There are a lot of other tests')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/856915a43ad64d2ca04c28c441d8b6b6/title.png&quot; style=&quot;max-height: 294px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;Welcome to the GridLand. All the citizens here are connected through the global internal network because the main way for communication here is via email. Every new district of the city starts with building a node – center of the district. All citizens are connected to this node in order to send and receive emails. All nodes of GridLand are connected so one node can send emails between the connected nodes. In such a way, no matter how big the city is all users can send messages to each other as long as all of the nodes are connected.&lt;/p&gt;&#10; &#10;&lt;p&gt;The Mayor of GridLand is using this network to quickly send emergency emails to all citizens when necessary. But the system is not perfect. When one of city nodes gets crushed it may leave the citizens of this node district disconnected from these emergency emails. It may also leave districts around the crushed node disconnected if their nodes do not have other ways to connect. To resolve this occurrence, the Mayor uses mail-pigeons – an old method of sending mail that was invented before the global internal network. All of the citizens still connected to the network receive the emergency emails, but the disconnected citizens receive their messages from these pigeons.&lt;/p&gt;&#10; &#10;&lt;p&gt;Your mission is to figure out how many pigeons you need when some of the nodes are crushed.&lt;/p&gt;&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/856915a43ad64d2ca04c28c441d8b6b6/example.png&quot; style=&quot;max-height: 302px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Four arguments: network structure (as a list of connections between the nodes), users of each node (as dict where keys are the node-names and values are the amounts of users), name of the node that sends email, and the list of crashed nodes.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Int. The amount of users that won't receive an email.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;disconnected_users([&#10;    ['A', 'B'],&#10;    ['B', 'C'],&#10;    ['C', 'D']&#10;], {&#10;    'A': 10,&#10;    'B': 20,&#10;    'C': 30,&#10;    'D': 40&#10;},&#10;    'A', ['C']) == 70&#10;&#10;disconnected_users([&#10;    ['A', 'B'],&#10;    ['B', 'D'],&#10;    ['A', 'C'],&#10;    ['C', 'D']&#10;], {&#10;    'A': 10,&#10;    'B': 0,&#10;    'C': 0,&#10;    'D': 40&#10;},&#10;    'A', ['B']) == 0&#10;&#10;disconnected_users([&#10;    ['A', 'B'],&#10;    ['A', 'C'],&#10;    ['A', 'D'],&#10;    ['A', 'E'],&#10;    ['A', 'F']&#10;], {&#10;    'A': 10,&#10;    'B': 10,&#10;    'C': 10,&#10;    'D': 10,&#10;    'E': 10,&#10;    'F': 10&#10;},&#10;    'C', ['A']) == 50&#10;&#10;&lt;/pre&gt;&#10;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="476" />
                      <option name="index" value="2" />
                      <option name="name" value="Node Disconnected Users" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def disconnected_users(net, users, source, crushes):&#10;    return 0&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert disconnected_users([&#10;        ['A', 'B'],&#10;        ['B', 'C'],&#10;        ['C', 'D']&#10;    ], {&#10;        'A': 10,&#10;        'B': 20,&#10;        'C': 30,&#10;        'D': 40&#10;    },&#10;        'A', ['C']) == 70, &quot;First&quot;&#10;&#10;    assert disconnected_users([&#10;        ['A', 'B'],&#10;        ['B', 'D'],&#10;        ['A', 'C'],&#10;        ['C', 'D']&#10;    ], {&#10;        'A': 10,&#10;        'B': 0,&#10;        'C': 0,&#10;        'D': 40&#10;    },&#10;        'A', ['B']) == 0, &quot;Second&quot;&#10;&#10;    assert disconnected_users([&#10;        ['A', 'B'],&#10;        ['A', 'C'],&#10;        ['A', 'D'],&#10;        ['A', 'E'],&#10;        ['A', 'F']&#10;    ], {&#10;        'A': 10,&#10;        'B': 10,&#10;        'C': 10,&#10;        'D': 10,&#10;        'E': 10,&#10;        'F': 10&#10;    },&#10;        'C', ['A']) == 50, &quot;Third&quot;&#10;&#10;    print('Done. Try to check now. There are a lot of other tests')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def subnetworks(net, crushes):&#10;    return 0&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert subnetworks([&#10;            ['A', 'B'],&#10;            ['B', 'C'],&#10;            ['C', 'D']&#10;        ], ['B']) == 2, &quot;First&quot;&#10;    assert subnetworks([&#10;            ['A', 'B'],&#10;            ['A', 'C'],&#10;            ['A', 'D'],&#10;            ['D', 'F']&#10;        ], ['A']) == 3, &quot;Second&quot;&#10;    assert subnetworks([&#10;            ['A', 'B'],&#10;            ['B', 'C'],&#10;            ['C', 'D']&#10;        ], ['C', 'D']) == 1, &quot;Third&quot;&#10;    print('Done! Check button is waiting for you!')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&#10;    Sometimes damaged nodes are unrecoverable. In that case, people that were connected to the crushed node must migrate to another district while administration attempts to fix the node.&lt;/p&gt;&#10; &#10;&lt;p&gt;But if a crushed node disconnects multiple districts from one another, then the network splits into two sub-networks and every sub-network should have their own Mayor. And Mayors must use pigeons for mailing between each other. In that case, when the network is split you don’t need hundreds of pigeons.&lt;/p&gt;&#10; &#10;&lt;p&gt;Your mission is to figure out how many Mayors you need to control the entire city when some nodes are crushed. In other words, you need to figure out how many sub-networks will be formed after some nodes are crush and not recovered.&lt;/p&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/5d8b680383864c0c8cb10aa5afc70bca/example.png&quot; style=&quot;max-height: 302px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two arguments: the network structure (as a list of connections between the nodes) and the list of crashed nodes.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Int. The amount of sub-networks formed after some nodes were crushed.&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;subnetworks([&#10;        ['A', 'B'],&#10;        ['B', 'C'],&#10;        ['C', 'D']&#10;    ], ['B']) == 2&#10;subnetworks([&#10;        ['A', 'B'],&#10;        ['A', 'C'],&#10;        ['A', 'D'],&#10;        ['D', 'F']&#10;    ], ['A']) == 3&#10;subnetworks([&#10;        ['A', 'B'],&#10;        ['B', 'C'],&#10;        ['C', 'D']&#10;    ], ['C', 'D']) == 1&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="477" />
                      <option name="index" value="3" />
                      <option name="name" value="New Cities" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def subnetworks(net, crushes):&#10;    return 0&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert subnetworks([&#10;            ['A', 'B'],&#10;            ['B', 'C'],&#10;            ['C', 'D']&#10;        ], ['B']) == 2, &quot;First&quot;&#10;    assert subnetworks([&#10;            ['A', 'B'],&#10;            ['A', 'C'],&#10;            ['A', 'D'],&#10;            ['D', 'F']&#10;        ], ['A']) == 3, &quot;Second&quot;&#10;    assert subnetworks([&#10;            ['A', 'B'],&#10;            ['B', 'C'],&#10;            ['C', 'D']&#10;        ], ['C', 'D']) == 1, &quot;Third&quot;&#10;    print('Done! Check button is waiting for you!')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="import sendgrid&#10;from sendgrid.helpers.mail import Email,  Mail, Content&#10;&#10;API_KEY = 'Registrate your own key'&#10;SUBJECT = 'Welcome'&#10;BODY = 'Hi {}'&#10;&#10;sg = sendgrid.SendGridAPIClient(apikey=API_KEY)&#10;&#10;def send_email(email, name):&#10;    pass&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    send_email('somebody@gmail.com', 'Some Body')&#10;    print('Done')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;i&gt;To solve this mission you must use the &lt;a href=&quot;https://py.checkio.org/projects/open/sendgrid/settings-api-key/&quot;&gt;SendGrid API Key&lt;/a&gt; (&lt;a href=&quot;https://py.checkio.org/projects/open/sendgrid/youtube-how-to-api/&quot;&gt;this video will explain&lt;/a&gt; how to create your own API Key). Check out these &lt;a href=&quot;https://py.checkio.org/projects/open/sendgrid/docs-mail/&quot;&gt;Python examples&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;It all starts with your first email. Let’s try to send one.&lt;/p&gt;&#10; &#10;&lt;p&gt;Your mission is to create a function that sends a welcome email to a user. The function gets two arguments: email and the name of the user.&lt;/p&gt;&#10; &#10;&lt;p&gt;Subject of the email should be &quot;Welcome&quot; and body simply &quot;Hi {name}&quot; ({name} should be replaced by a user's name)&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two arguments: email and a username.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; None. You should send an email. You don’t need to return anything.&#10;&lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;send_email('a.lyabah@checkio.org', 'oduvan')&#10;send_email('somebody@gmail.com', 'Some Body')&#10;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="478" />
                      <option name="index" value="4" />
                      <option name="name" value="Welcome Email by SendGrid" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="import sendgrid&#10;from sendgrid.helpers.mail import Email,  Mail, Content&#10;&#10;API_KEY = 'Registrate your own key'&#10;SUBJECT = 'Welcome'&#10;BODY = 'Hi {}'&#10;&#10;sg = sendgrid.SendGridAPIClient(apikey=API_KEY)&#10;&#10;def send_email(email, name):&#10;    pass&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    send_email('somebody@gmail.com', 'Some Body')&#10;    print('Done')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="def most_crucial(net, users):&#10;    return ['B']&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert most_crucial([&#10;            ['A', 'B'],&#10;            ['B', 'C']&#10;        ],{&#10;            'A': 10,&#10;            'B': 10,&#10;            'C': 10&#10;        }) == ['B'], 'First'&#10;&#10;    assert most_crucial([&#10;            ['A', 'B']&#10;        ],{&#10;            'A': 20,&#10;            'B': 10&#10;        }) == ['A'], 'Second'&#10;&#10;    assert most_crucial([&#10;            ['A', 'B'],&#10;            ['A', 'C'],&#10;            ['A', 'D'],&#10;            ['A', 'E']&#10;        ],{&#10;            'A': 0,&#10;            'B': 10,&#10;            'C': 10,&#10;            'D': 10,&#10;            'E': 10&#10;        }) == ['A'], 'Third'&#10;&#10;    assert most_crucial([&#10;            ['A', 'B'],&#10;            ['B', 'C'],&#10;            ['C', 'D']&#10;        ],{&#10;            'A': 10,&#10;            'B': 20,&#10;            'C': 10,&#10;            'D': 20&#10;        }) == ['B'], 'Forth'&#10;&#10;    print('Nobody expected that, but you did it! It is time to share it!')&#10;" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/65f32cbe77a54923b2607d69c89d4028/title.png&quot; style=&quot;max-height: 337px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;p&gt;&#10;    Citizens of GridLand are sending emails to each other all the time. They send everything - what they just ate, a funny picture, questions or thoughts that are bothering them right now. All the citizens are happy because they have such a wonderful network that keeps them connected.&lt;/p&gt;&#10; &#10;&lt;p&gt;The main goal of the Mayor is to control the city's happiness. The city's happiness is a sum of all citizens' happiness. And the happiness of each citizen is equal to the number of citizens (always including oneself) that one can send emails to.&lt;/p&gt;&#10; &#10;&lt;p&gt;Because the city is growing, the citizens have decided that the Mayor needs an assistant to focus on the node protection.&lt;/p&gt;&#10; &#10;&lt;p&gt;Your mission is to figure out what will be the first nodes to investigate and protect for the new assistant. Remember, you should choose the most important node in the network. If several nodes have the maximal importance, find all of them&lt;/p&gt;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot; style=&quot;text-align: center&quot;&gt;&#10;    &lt;img src=&quot;https://static.checkio.org/media/task/media/65f32cbe77a54923b2607d69c89d4028/example.png&quot; style=&quot;max-height: 711px&quot;&gt;&#10;&lt;/div&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Two arguments: the network structure (as a list of connections between the nodes), users on each node (as dict where keys are the node-names and values are the amounts of users).&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; List of the most cruсial nodes.&#10;&lt;/p&gt;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;most_crucial([&#10;    ['A', 'B'],&#10;    ['B', 'C']&#10;],{&#10;    'A': 10,&#10;    'B': 10,&#10;    'C': 10&#10;}) == ['B']&#10;&#10;most_crucial([&#10;    ['A', 'B']&#10;],{&#10;    'A': 20,&#10;    'B': 10&#10;}) == ['A']&#10;&#10;most_crucial([&#10;    ['A', 'B'],&#10;    ['A', 'C'],&#10;    ['A', 'D'],&#10;    ['A', 'E']&#10;],{&#10;    'A': 0,&#10;    'B': 10,&#10;    'C': 10,&#10;    'D': 10,&#10;    'E': 10&#10;}) == ['A']&#10;&#10;most_crucial([&#10;    ['A', 'B'],&#10;    ['B', 'C'],&#10;    ['C', 'D']&#10;],{&#10;    'A': 10,&#10;    'B': 20,&#10;    'C': 10,&#10;    'D': 20&#10;}) == ['B']&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="479" />
                      <option name="index" value="5" />
                      <option name="name" value="City's Happiness" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="def most_crucial(net, users):&#10;    return ['B']&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    assert most_crucial([&#10;            ['A', 'B'],&#10;            ['B', 'C']&#10;        ],{&#10;            'A': 10,&#10;            'B': 10,&#10;            'C': 10&#10;        }) == ['B'], 'First'&#10;&#10;    assert most_crucial([&#10;            ['A', 'B']&#10;        ],{&#10;            'A': 20,&#10;            'B': 10&#10;        }) == ['A'], 'Second'&#10;&#10;    assert most_crucial([&#10;            ['A', 'B'],&#10;            ['A', 'C'],&#10;            ['A', 'D'],&#10;            ['A', 'E']&#10;        ],{&#10;            'A': 0,&#10;            'B': 10,&#10;            'C': 10,&#10;            'D': 10,&#10;            'E': 10&#10;        }) == ['A'], 'Third'&#10;&#10;    assert most_crucial([&#10;            ['A', 'B'],&#10;            ['B', 'C'],&#10;            ['C', 'D']&#10;        ],{&#10;            'A': 10,&#10;            'B': 20,&#10;            'C': 10,&#10;            'D': 20&#10;        }) == ['B'], 'Forth'&#10;&#10;    print('Nobody expected that, but you did it! It is time to share it!')&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="import sendgrid&#13;&#10;&#13;&#10;API_KEY = 'Registrate your own key'&#13;&#10;&#13;&#10;sg = sendgrid.SendGridAPIClient(apikey=API_KEY)&#13;&#10;&#13;&#10;def how_spammed(str_date):&#13;&#10;    return 1&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    print('You had {} spam reports in 2016-01-01'.format(how_spammed('2016-01-01')))&#13;&#10;    print('Check your results')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;i&gt;To solve this mission you must use the &lt;a href=&quot;https://py.checkio.org/projects/open/sendgrid/settings-api-key/&quot;&gt;SendGrid API Key&lt;/a&gt;. When you click &quot;Run&quot; you will see the results of using your API key with your data, but if you click &quot;Check&quot; your solution will be tested using our data.&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;You are massively sending thousands and thousands emails every day, meanwhile experimenting with subject lines and the message itself. &lt;a href=&quot;https://py.checkio.org/projects/open/sendgrid/main/&quot;&gt;SendGrid&lt;/a&gt; allows you to see statistics of your spam reports.&lt;/p&gt;&#10;&#10;&lt;p&gt;Your mission is to figure out how many spam reports you receive on a specific day.&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input: &lt;/strong&gt; Day as a string in format 'YYYY-MM-DD'&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output: &lt;/strong&gt; Int. The amount of spam reports&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;div class=&quot;for_info_only&quot;&gt;&#10;    &lt;p&gt;&#10;        &lt;strong&gt;Example:&lt;/strong&gt;&#10;    &lt;/p&gt;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;how_spammed('2014-5-5') == 16&#10;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="481" />
                      <option name="index" value="6" />
                      <option name="name" value="SendGrid Spam Reports" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="import sendgrid&#10;&#10;API_KEY = 'Registrate your own key'&#10;&#10;sg = sendgrid.SendGridAPIClient(apikey=API_KEY)&#10;&#10;def how_spammed(str_date):&#10;    return 1&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    print('You had {} spam reports in 2016-01-01'.format(how_spammed('2016-01-01')))&#10;    print('Check your results')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                    <CheckiOMission>
                      <option name="code" value="import sendgrid&#13;&#10;&#13;&#10;API_KEY = 'Registrate your own key'&#13;&#10;&#13;&#10;sg = sendgrid.SendGridAPIClient(apikey=API_KEY)&#13;&#10;&#13;&#10;def best_country(str_date):&#13;&#10;    return 'UA'&#13;&#10;&#13;&#10;if __name__ == '__main__':&#13;&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#13;&#10;    print('Your best country in 2016-01-01 was ' + best_country('2016-01-01'))&#13;&#10;    print('Check your results')" />
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;p&gt;&lt;i&gt;To solve this mission you must use the &lt;a href=&quot;https://py.checkio.org/projects/open/sendgrid/settings-api-key/&quot;&gt;SendGrid API Key&lt;/a&gt;. When you click &quot;Run&quot; you will see the results of using your API key with your data, but if you click &quot;Check&quot; your solution will be tested using our data.&lt;/i&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;You should be able to operate with your statistical email data and SendGrid has a lot of APIs that provide information you may need.&lt;/p&gt;&#10; &#10;&lt;p&gt;Your mission is to figure out which country opens your emails the most. You can use this information in order to focus on a specific segment.&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Input:&lt;/strong&gt; Day as a string in format 'YYYY-MM-DD'&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Output:&lt;/strong&gt; String, Two-digit country code of country that has more unique clicks.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    &lt;strong&gt;Example:&lt;/strong&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;pre class=&quot;brush: python&quot;&gt;&#10;best_country('2016-01-01') == 'UA'&#10;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="482" />
                      <option name="index" value="7" />
                      <option name="name" value="SendGrid Geo Stats" />
                      <option name="record" value="-1" />
                      <option name="secondsFromLastChangeOnServer" value="9223372036854775807" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="mission.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="mission.py" />
                                <option name="text" value="import sendgrid&#10;&#10;API_KEY = 'Registrate your own key'&#10;&#10;sg = sendgrid.SendGridAPIClient(apikey=API_KEY)&#10;&#10;def best_country(str_date):&#10;    return 'UA'&#10;&#10;if __name__ == '__main__':&#10;    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing&#10;    print('Your best country in 2016-01-01 was ' + best_country('2016-01-01'))&#10;    print('Check your results')" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="0" />
                    </CheckiOMission>
                  </list>
                </option>
              </CheckiOStation>
            </list>
          </option>
        </CheckiOCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>